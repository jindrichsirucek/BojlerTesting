{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"c",
				"c_str"
			],
			[
				"succ",
				"successfullySent"
			],
			[
				"Addres",
				"addresses"
			],
			[
				"S",
				"SSID"
			],
			[
				"fi",
				"fileToSend"
			],
			[
				"y",
				"yield"
			],
			[
				"IP",
				"IPAddress"
			],
			[
				"fom",
				"from"
			],
			[
				"ye",
				"yield_debug"
			],
			[
				"if",
				"if\tDeviot Macro if"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"pro",
				"PROGMEM_T"
			],
			[
				"DEb",
				"DEBUG_OUTPUT"
			],
			[
				"err",
				"ERROR_OUTPUT"
			],
			[
				"Err",
				"ERROR_OUTPUT"
			],
			[
				"ERR",
				"ERROR_OUTPUT"
			],
			[
				"FA",
				"false"
			],
			[
				"le",
				"length"
			],
			[
				"att",
				"attempt"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"for",
				"for\tfor (…) {…}"
			],
			[
				"RXD",
				"RXD_PIN"
			],
			[
				"add",
				"address"
			],
			[
				"INP",
				"INPUT_PULLUP"
			],
			[
				"sam",
				"sampleCounter"
			],
			[
				"Last",
				"lastCurrentMeasurment_global"
			],
			[
				"led",
				"LED_BUILTIN"
			],
			[
				"te",
				"template\tTag"
			],
			[
				"digit",
				"digitalWrite\tDeviot digitalWrite"
			],
			[
				"conn",
				"connect"
			],
			[
				"yi",
				"yield_debug"
			],
			[
				"connect",
				"connected"
			],
			[
				"ui",
				"uint8_t"
			],
			[
				"int",
				"int8_t"
			],
			[
				"n",
				"number"
			],
			[
				"disp",
				"displayIPAddress"
			],
			[
				"pulldown",
				"INPUT_PULLDOWN_16"
			],
			[
				"E",
				"E\tE MACRO"
			],
			[
				"Deb",
				"DEBUG_OUTPUT"
			],
			[
				"temp",
				"tempSensors"
			],
			[
				"sens",
				"sensorName"
			],
			[
				"senso",
				"sensorIndex"
			],
			[
				"file",
				"fileTosend"
			],
			[
				"getTe",
				"getTempC"
			],
			[
				"request",
				"requestTemperatures"
			],
			[
				"IPS",
				"IPString"
			],
			[
				"new",
				"newState"
			],
			[
				"show",
				"SHOW_WARNING_DEBUG_MESSAGES"
			],
			[
				"setO",
				"setOutroTask"
			],
			[
				"deb",
				"INTERNAL_DEBUG_OUTPUT"
			],
			[
				"measu",
				"measurment"
			],
			[
				"newCharW",
				"newCharWifiNOTConnected"
			],
			[
				"LO",
				"LOGGER_FILE_NAME"
			],
			[
				"wa",
				"waitSymbolCounter"
			],
			[
				"un",
				"uint8_t"
			],
			[
				"ad",
				"address"
			],
			[
				"pin",
				"pinState"
			],
			[
				"cl",
				"close"
			],
			[
				"cu",
				"CURRENT_SENSOR_PIN"
			],
			[
				"respon",
				"response"
			],
			[
				"AP_",
				"AP_SSID"
			],
			[
				"filec",
				"fileContent"
			],
			[
				"pars",
				"parsedLogNumber"
			],
			[
				"getF",
				"getFreeSpaceSPIFFS"
			],
			[
				"s",
				"success"
			],
			[
				"si",
				"size"
			],
			[
				"size",
				"size_t"
			],
			[
				"CSTR",
				"c_str"
			],
			[
				"Pri",
				"println"
			],
			[
				"cs",
				"c_str"
			],
			[
				"ope",
				"openFile"
			],
			[
				"data",
				"dataSentOk"
			],
			[
				"Spi",
				"SPIFFS"
			],
			[
				"fil",
				"fileSizeToSend"
			],
			[
				"flow",
				"flowTemp_global"
			],
			[
				"Ser",
				"Serial"
			],
			[
				"prin",
				"println"
			],
			[
				"tes",
				"testFIle"
			],
			[
				"l",
				"line"
			],
			[
				"else",
				"else"
			],
			[
				"POSTdata",
				"postDataToServer"
			],
			[
				"pri",
				"println"
			],
			[
				"Us",
				"USE_SERIAL"
			],
			[
				"Data",
				"DATA_LOGGING_DEBUG"
			],
			[
				"in",
				"interval"
			],
			[
				"se",
				"selectedRegion"
			],
			[
				"t",
				"t_idx"
			],
			[
				"ne",
				"neverSkip"
			],
			[
				"Ard",
				"ARDUINO_STYLE_CONTROL"
			],
			[
				"isp",
				"isProgramaticControl"
			],
			[
				"lcd",
				"lcdDisplayConnected_global"
			],
			[
				"old",
				"oledDisplayConnected_global"
			],
			[
				"oled",
				"OLED_Display"
			],
			[
				"f",
				"false"
			],
			[
				"tr",
				"true"
			],
			[
				"de",
				"delay\tDeviot delay()"
			],
			[
				"time",
				"timeDateStrig"
			],
			[
				"tim",
				"timeDateStrig"
			],
			[
				"Conn",
				"connected"
			],
			[
				"Beg",
				"begining"
			],
			[
				"respons",
				"responseText"
			],
			[
				"print",
				"println"
			],
			[
				"mi",
				"millis\tDeviot millis()"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 546 files for \"pgm_read\"\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/pgmspace.cpp:\n   27  size_t strnlen_P(PGM_P s, size_t size) {\n   28      const char* cp;\n   29:     for (cp = s; size != 0 && pgm_read_byte(cp) != '\\0'; cp++, size--);\n   30      return (size_t) (cp - s);\n   31  }\n   ..\n   35      const char* pn = reinterpret_cast<const char*>(needle);\n   36      if (haystack[0] == 0) {\n   37:         if (pgm_read_byte(pn)) {\n   38  \t        return NULL;\n   39          }\n   ..\n   44          size_t i = 0;\n   45          while (true) {\n   46:             char n = pgm_read_byte(pn + i);\n   47              if (n == 0) {\n   48                  return (char *) haystack;\n   ..\n   64      while (count)\n   65      {\n   66:         *write++ = pgm_read_byte(read++);\n   67          count--;\n   68      }\n   ..\n   77  \n   78      while (size > 0) {\n   79:         uint8_t ch2 = pgm_read_byte(read2);\n   80          uint8_t ch1 = *read1;\n   81          if (ch1 != ch2) {\n   ..\n   98  \n   99      while (count > 0) {\n  100:         uint8_t ch = pgm_read_byte(read++);\n  101          *write++ = ch;\n  102          count--;\n  ...\n  112      const uint8_t* read = (const uint8_t*)buf;\n  113      const uint8_t* find = (uint8_t*)findP;\n  114:     uint8_t first = pgm_read_byte(find++);\n  115  \n  116      findPSize--;\n  ...\n  124  \n  125              while (tagBufSize > 0 && findSize > 0) {\n  126:                 uint8_t ch = pgm_read_byte(findTag++);\n  127                  if (ch != *tag) {\n  128                      bufSize--;\n  ...\n  153      while (size > 0 && ch != '\\0')\n  154      {\n  155:         ch = pgm_read_byte(read++);\n  156          *write++ = ch;\n  157          size--;\n  ...\n  174      while (size > 0 && ch != '\\0')\n  175      {\n  176:         ch = pgm_read_byte(read++);\n  177          *write++ = ch;\n  178  \n  ...\n  194      {\n  195          char ch1 = *str1++;\n  196:         char ch2 = pgm_read_byte(str2P++);\n  197          result = ch1 - ch2;\n  198          if (result != 0 || ch2 == '\\0')\n  ...\n  213      {\n  214          char ch1 = tolower(*str1++);\n  215:         char ch2 = tolower(pgm_read_byte(str2P++));\n  216          result = ch1 - ch2;\n  217          if (result != 0 || ch2 == '\\0')\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/pgmspace.h:\n   88  \n   89  #ifdef __ets__\n   90: #define pgm_read_byte(addr) \t\t                                           \\\n   91  (__extension__({                                                               \\\n   92      PGM_P __local = (PGM_P)(addr);  /* isolate varible for macro expansion */         \\\n   ..\n   97  }))\n   98  \n   99: #define pgm_read_word(addr) \t\t                                           \\\n  100  (__extension__({                                                               \\\n  101      PGM_P __local = (PGM_P)(addr); /* isolate varible for macro expansion */          \\\n  ...\n  106  }))\t\n  107  #else //__ets__\n  108: #define pgm_read_byte(addr)     (*reinterpret_cast<const uint8_t*>(addr))\n  109: #define pgm_read_word(addr)     (*reinterpret_cast<const uint16_t*>(addr))\n  110  #endif //__ets__\n  111  \n  112: #define pgm_read_dword(addr) \t\t(*reinterpret_cast<const uint32_t*>(addr))\n  113: #define pgm_read_float(addr) \t\t(*reinterpret_cast<const float*>(addr))\n  114: #define pgm_read_ptr(addr) \t\t(*reinterpret_cast<const void* const *>(addr))\n  115  \n  116: #define pgm_read_byte_near(addr) \tpgm_read_byte(addr)\n  117: #define pgm_read_word_near(addr) \tpgm_read_word(addr)\n  118: #define pgm_read_dword_near(addr) \tpgm_read_dword(addr)\n  119: #define pgm_read_float_near(addr)\tpgm_read_float(addr)\n  120: #define pgm_read_ptr_near(addr) \tpgm_read_ptr(addr)\n  121: #define pgm_read_byte_far(addr) \tpgm_read_byte(addr)\n  122: #define pgm_read_word_far(addr) \tpgm_read_word(addr)\n  123: #define pgm_read_dword_far(addr) \tpgm_read_dword(addr)\n  124: #define pgm_read_float_far(addr) \tpgm_read_float(addr)\n  125: #define pgm_read_ptr_far(addr)\t\tpgm_read_ptr(addr)\n  126  \n  127  #endif //__PGMSPACE_H_\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Print.cpp:\n   69      size_t n = 0;\n   70      while (1) {\n   71:         uint8_t c = pgm_read_byte(p++);\n   72          if (c == 0) break;\n   73          n += write(c);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/SD/src/utility/SdFatUtil.h:\n   60   */\n   61  static NOINLINE void SerialPrint_P(PGM_P str) {\n   62:   for (uint8_t c; (c = pgm_read_byte(str)); str++) Serial.write(c);\n   63  }\n   64  //------------------------------------------------------------------------------\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/SD/src/utility/SdFile.cpp:\n  263  #if defined(__AVR__)\n  264        PGM_P p = PSTR(\"|<>^+=?/[];,*\\\"\\\\\");\n  265:       while ((b = pgm_read_byte(p++))) if (b == c) return false;\n  266  #elif defined(__arm__)\n  267        const uint8_t valid[] = \"|<>^+=?/[];,*\\\"\\\\\";\n  ...\n 1250   */\n 1251  void SdFile::write_P(PGM_P str) {\n 1252:   for (uint8_t c; (c = pgm_read_byte(str)); str++) write(c);\n 1253  }\n 1254  //------------------------------------------------------------------------------\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/TFT_Touch_Shield_V2/TFTv2.cpp:\n  284      }\n  285      for (int i =0; i<FONT_X; i++ ) {\n  286:         INT8U temp = pgm_read_byte(&simpleFont[ascii-0x20][i]);\n  287          for(INT8U f=0;f<8;f++)\n  288          {\n\n44 matches across 6 files\n\n\nSearching 546 files for \"Software/System restart\"\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp:\n  373        strcpy_P(buff, PSTR(\"Software Watchdog\"));\n  374      } else if (resetInfo.reason == REASON_SOFT_RESTART) { // software restart ,system_restart , GPIO status won’t change \n  375:       strcpy_P(buff, PSTR(\"Software/System restart\"));\n  376      } else if (resetInfo.reason == REASON_DEEP_SLEEP_AWAKE) { // wake up from deep-sleep \n  377        strcpy_P(buff, PSTR(\"Deep-Sleep Wake\"));\n\n1 match in 1 file\n\n\nSearching 1742 files for \"Software/System\"\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp:\n  381        strcpy_P(buff, PSTR(\"Software Watchdog\"));\n  382      } else if (resetInfo.reason == REASON_SOFT_RESTART) { // software restart ,system_restart , GPIO status won’t change\n  383:       strcpy_P(buff, PSTR(\"Software/System restart\"));\n  384      } else if (resetInfo.reason == REASON_DEEP_SLEEP_AWAKE) { // wake up from deep-sleep\n  385        strcpy_P(buff, PSTR(\"Deep-Sleep Wake\"));\n\n1 match in 1 file\n\n\nSearching 1742 files for \"reset\"\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/boards.txt:\n   12  menu.FlashMode=Flash Mode\n   13  menu.FlashFreq=Flash Frequency\n   14: menu.ResetMethod=Reset Method\n   15  menu.ESPModule=Module\n   16  menu.Debug=Debug port\n   ..\n   46  generic.menu.VTable.iram=IRAM\n   47  generic.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n   48: generic.menu.ResetMethod.ck=ck\n   49: generic.menu.ResetMethod.ck.upload.resetmethod=ck\n   50: generic.menu.ResetMethod.nodemcu=nodemcu\n   51: generic.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n   52: generic.menu.ResetMethod.none=none\n   53: generic.menu.ResetMethod.none.upload.resetmethod=none\n   54: generic.menu.ResetMethod.dtrset=dtrset\n   55: generic.menu.ResetMethod.dtrset.upload.resetmethod=dtrset\n   56  generic.menu.CrystalFreq.26=26 MHz\n   57  generic.menu.CrystalFreq.40=40 MHz\n   ..\n  396  esp8285.menu.VTable.iram=IRAM\n  397  esp8285.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n  398: esp8285.menu.ResetMethod.ck=ck\n  399: esp8285.menu.ResetMethod.ck.upload.resetmethod=ck\n  400: esp8285.menu.ResetMethod.nodemcu=nodemcu\n  401: esp8285.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n  402: esp8285.menu.ResetMethod.none=none\n  403: esp8285.menu.ResetMethod.none.upload.resetmethod=none\n  404: esp8285.menu.ResetMethod.dtrset=dtrset\n  405: esp8285.menu.ResetMethod.dtrset.upload.resetmethod=dtrset\n  406  esp8285.menu.CrystalFreq.26=26 MHz\n  407  esp8285.menu.CrystalFreq.40=40 MHz\n  ...\n  618  espduino.build.board=ESP8266_ESP13\n  619  espduino.build.variant=ESPDuino\n  620: espduino.menu.ResetMethod.v2=ESPduino-V2\n  621: espduino.menu.ResetMethod.v2.upload.resetmethod=nodemcu\n  622: espduino.menu.ResetMethod.v1=ESPduino-V1\n  623: espduino.menu.ResetMethod.v1.upload.resetmethod=ck\n  624  espduino.menu.UploadTool.esptool=Serial\n  625  espduino.menu.UploadTool.esptool.upload.tool=esptool\n  ...\n  801  huzzah.menu.VTable.iram=IRAM\n  802  huzzah.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n  803: huzzah.upload.resetmethod=nodemcu\n  804  huzzah.build.flash_mode=qio\n  805  huzzah.build.flash_freq=40\n  ...\n  955  cw01.menu.VTable.iram=IRAM\n  956  cw01.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n  957: cw01.upload.resetmethod=nodemcu\n  958  cw01.menu.CrystalFreq.26=26 MHz\n  959  cw01.menu.CrystalFreq.40=40 MHz\n  ...\n 1144  espresso_lite_v1.menu.FlashSize.4M3M.build.spiffs_end=0x3FB000\n 1145  espresso_lite_v1.menu.FlashSize.4M3M.build.spiffs_blocksize=8192\n 1146: espresso_lite_v1.menu.ResetMethod.ck=ck\n 1147: espresso_lite_v1.menu.ResetMethod.ck.upload.resetmethod=ck\n 1148: espresso_lite_v1.menu.ResetMethod.nodemcu=nodemcu\n 1149: espresso_lite_v1.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n 1150  espresso_lite_v1.menu.LwIPVariant.v2mss536=v2 Lower Memory\n 1151  espresso_lite_v1.menu.LwIPVariant.v2mss536.build.lwip_include=lwip2/include\n ....\n 1301  espresso_lite_v2.menu.FlashSize.4M3M.build.spiffs_end=0x3FB000\n 1302  espresso_lite_v2.menu.FlashSize.4M3M.build.spiffs_blocksize=8192\n 1303: espresso_lite_v2.menu.ResetMethod.ck=ck\n 1304: espresso_lite_v2.menu.ResetMethod.ck.upload.resetmethod=ck\n 1305: espresso_lite_v2.menu.ResetMethod.nodemcu=nodemcu\n 1306: espresso_lite_v2.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n 1307  espresso_lite_v2.menu.LwIPVariant.v2mss536=v2 Lower Memory\n 1308  espresso_lite_v2.menu.LwIPVariant.v2mss536.build.lwip_include=lwip2/include\n ....\n 1458  phoenix_v1.menu.FlashSize.4M3M.build.spiffs_end=0x3FB000\n 1459  phoenix_v1.menu.FlashSize.4M3M.build.spiffs_blocksize=8192\n 1460: phoenix_v1.menu.ResetMethod.ck=ck\n 1461: phoenix_v1.menu.ResetMethod.ck.upload.resetmethod=ck\n 1462: phoenix_v1.menu.ResetMethod.nodemcu=nodemcu\n 1463: phoenix_v1.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n 1464  phoenix_v1.menu.LwIPVariant.v2mss536=v2 Lower Memory\n 1465  phoenix_v1.menu.LwIPVariant.v2mss536.build.lwip_include=lwip2/include\n ....\n 1615  phoenix_v2.menu.FlashSize.4M3M.build.spiffs_end=0x3FB000\n 1616  phoenix_v2.menu.FlashSize.4M3M.build.spiffs_blocksize=8192\n 1617: phoenix_v2.menu.ResetMethod.ck=ck\n 1618: phoenix_v2.menu.ResetMethod.ck.upload.resetmethod=ck\n 1619: phoenix_v2.menu.ResetMethod.nodemcu=nodemcu\n 1620: phoenix_v2.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n 1621  phoenix_v2.menu.LwIPVariant.v2mss536=v2 Lower Memory\n 1622  phoenix_v2.menu.LwIPVariant.v2mss536.build.lwip_include=lwip2/include\n ....\n 1740  nodemcu.menu.VTable.iram=IRAM\n 1741  nodemcu.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 1742: nodemcu.upload.resetmethod=nodemcu\n 1743  nodemcu.build.flash_mode=qio\n 1744  nodemcu.build.flash_freq=40\n ....\n 1894  nodemcuv2.menu.VTable.iram=IRAM\n 1895  nodemcuv2.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 1896: nodemcuv2.upload.resetmethod=nodemcu\n 1897  nodemcuv2.build.flash_mode=dio\n 1898  nodemcuv2.build.flash_freq=40\n ....\n 2048  modwifi.menu.VTable.iram=IRAM\n 2049  modwifi.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2050: modwifi.upload.resetmethod=ck\n 2051  modwifi.build.flash_mode=qio\n 2052  modwifi.build.flash_freq=40\n ....\n 2182  thing.menu.VTable.iram=IRAM\n 2183  thing.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2184: thing.upload.resetmethod=ck\n 2185  thing.build.flash_mode=qio\n 2186  thing.build.flash_freq=40\n ....\n 2343  thingdev.menu.VTable.iram=IRAM\n 2344  thingdev.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2345: thingdev.upload.resetmethod=nodemcu\n 2346  thingdev.build.flash_mode=dio\n 2347  thingdev.build.flash_freq=40\n ....\n 2504  esp210.menu.VTable.iram=IRAM\n 2505  esp210.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2506: esp210.upload.resetmethod=ck\n 2507  esp210.build.flash_mode=qio\n 2508  esp210.build.flash_freq=40\n ....\n 2658  d1_mini.menu.VTable.iram=IRAM\n 2659  d1_mini.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2660: d1_mini.upload.resetmethod=nodemcu\n 2661  d1_mini.build.flash_mode=dio\n 2662  d1_mini.build.flash_freq=40\n ....\n 2812  d1_mini_pro.menu.VTable.iram=IRAM\n 2813  d1_mini_pro.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2814: d1_mini_pro.upload.resetmethod=nodemcu\n 2815  d1_mini_pro.build.flash_mode=dio\n 2816  d1_mini_pro.build.flash_freq=40\n ....\n 2946  d1_mini_lite.menu.VTable.iram=IRAM\n 2947  d1_mini_lite.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 2948: d1_mini_lite.upload.resetmethod=nodemcu\n 2949  d1_mini_lite.build.flash_mode=dout\n 2950  d1_mini_lite.build.flash_freq=40\n ....\n 3147  d1.menu.VTable.iram=IRAM\n 3148  d1.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 3149: d1.upload.resetmethod=nodemcu\n 3150  d1.build.flash_mode=dio\n 3151  d1.build.flash_freq=40\n ....\n 3301  espino.menu.VTable.iram=IRAM\n 3302  espino.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 3303: espino.menu.ResetMethod.ck=ck\n 3304: espino.menu.ResetMethod.ck.upload.resetmethod=ck\n 3305: espino.menu.ResetMethod.nodemcu=nodemcu\n 3306: espino.menu.ResetMethod.nodemcu.upload.resetmethod=nodemcu\n 3307  espino.build.flash_mode=qio\n 3308  espino.build.flash_freq=40\n ....\n 3458  espinotee.menu.VTable.iram=IRAM\n 3459  espinotee.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 3460: espinotee.upload.resetmethod=nodemcu\n 3461  espinotee.build.flash_mode=qio\n 3462  espinotee.build.flash_freq=40\n ....\n 3629  wifinfo.menu.VTable.iram=IRAM\n 3630  wifinfo.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 3631: wifinfo.upload.resetmethod=nodemcu\n 3632  wifinfo.build.flash_mode=qio\n 3633  wifinfo.menu.FlashFreq.40=40MHz\n ....\n 3845  arduino-esp8266.menu.VTable.iram=IRAM\n 3846  arduino-esp8266.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 3847: arduino-esp8266.upload.resetmethod=ck\n 3848  arduino-esp8266.build.flash_mode=qio\n 3849  arduino-esp8266.build.flash_freq=40\n ....\n 4000  gen4iod.menu.VTable.iram=IRAM\n 4001  gen4iod.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 4002: gen4iod.upload.resetmethod=nodemcu\n 4003  gen4iod.build.flash_mode=dio\n 4004  gen4iod.build.flash_freq=80\n ....\n 4162  oak.menu.VTable.iram=IRAM\n 4163  oak.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 4164: oak.upload.resetmethod=none\n 4165  oak.build.flash_mode=dio\n 4166  oak.build.flash_freq=40\n ....\n 4316  wifiduino.menu.VTable.iram=IRAM\n 4317  wifiduino.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 4318: wifiduino.upload.resetmethod=nodemcu\n 4319  wifiduino.build.flash_mode=dio\n 4320  wifiduino.build.flash_freq=40\n ....\n 4470  wifi_slot.menu.VTable.iram=IRAM\n 4471  wifi_slot.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 4472: wifi_slot.upload.resetmethod=nodemcu\n 4473  wifi_slot.menu.FlashFreq.40=40MHz\n 4474  wifi_slot.menu.FlashFreq.40.build.flash_freq=40\n ....\n 4691  wiolink.menu.VTable.iram=IRAM\n 4692  wiolink.menu.VTable.iram.build.vtable_flags=-DVTABLES_IN_IRAM\n 4693: wiolink.upload.resetmethod=nodemcu\n 4694  wiolink.build.flash_mode=qio\n 4695  wiolink.build.flash_freq=40\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/bootloaders/eboot/eboot.ld:\n   21  /*  Default entry point:  */\n   22  ENTRY(main)\n   23: PROVIDE(_memmap_vecbase_reset = 0x40000000);\n   24  /* Various memory-map dependent cache attribute settings: */\n   25  _memmap_cacheattr_wb_base = 0x00000110;\n   ..\n   38  _memmap_cacheattr_wt_allvalid = 0x22222112;\n   39  _memmap_cacheattr_bp_allvalid = 0x22222222;\n   40: PROVIDE(_memmap_cacheattr_reset = _memmap_cacheattr_wb_trapnull);\n   41  \n   42  SECTIONS\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/bootloaders/eboot/rom.ld:\n   42  PROVIDE ( _KernelExceptionVector = 0x40000030 );\n   43  PROVIDE ( _NMIExceptionVector = 0x40000020 );\n   44: PROVIDE ( _ResetHandler = 0x400000a4 );\n   45: PROVIDE ( _ResetVector = 0x40000080 );\n   46  PROVIDE ( _UserExceptionVector = 0x40000050 );\n   47  PROVIDE ( __adddf3 = 0x4000c538 );\n   ..\n  109  PROVIDE ( eprintf_to_host = 0x40001d48 );\n  110  PROVIDE ( est_get_printf_buf_remain_len = 0x40002494 );\n  111: PROVIDE ( est_reset_printf_buf_len = 0x4000249c );\n  112  PROVIDE ( ets_bzero = 0x40002ae8 );\n  113  PROVIDE ( ets_char2xdigit = 0x40002b74 );\n  ...\n  240  PROVIDE ( rom_pbus_xpd_tx_on = 0x40007740 );\n  241  PROVIDE ( rom_pbus_xpd_tx_on__low_gain = 0x400077a0 );\n  242: PROVIDE ( rom_phy_reset_req = 0x40007804 );\n  243  PROVIDE ( rom_restart_cal = 0x4000781c );\n  244  PROVIDE ( rom_rfcal_pwrctrl = 0x40007eb4 );\n  ...\n  249  PROVIDE ( rom_rfcal_txiq_cover = 0x400088b8 );\n  250  PROVIDE ( rom_rfcal_txiq_set_reg = 0x40008a70 );\n  251: PROVIDE ( rom_rfpll_reset = 0x40007868 );\n  252  PROVIDE ( rom_rfpll_set_freq = 0x40007968 );\n  253  PROVIDE ( rom_rxiq_cover_mg_mp = 0x40008b6c );\n  ...\n  271  PROVIDE ( roundup2 = 0x400031b4 );\n  272  PROVIDE ( rtc_enter_sleep = 0x40002870 );\n  273: PROVIDE ( rtc_get_reset_reason = 0x400025e0 );\n  274  PROVIDE ( rtc_intr_handler = 0x400029ec );\n  275  PROVIDE ( rtc_set_sleep_mode = 0x40002668 );\n  ...\n  306  PROVIDE ( slc_set_host_io_max_window = 0x40006068 );\n  307  PROVIDE ( slc_to_host_chain_recycle = 0x40005f10 );\n  308: PROVIDE ( software_reset = 0x4000264c );\n  309  PROVIDE ( spi_flash_attach = 0x40004644 );\n  310  PROVIDE ( srand = 0x400005f0 );\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Arduino.h:\n  115  // timer0 is a special CPU timer that has very high resolution but with\n  116  // limited control.\n  117: // it uses CCOUNT (ESP.GetCycleCount()) as the non-resetable timer counter\n  118  // it does not support divide, type, or reload flags\n  119  // it is auto-disabled when the compare value matches CCOUNT\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/cont.S:\n  122      /* a1 <- cont_ctx.sp_yield */\n  123      l32i    a1, a2, 12\n  124:     /* reset yield flag, 0 -> cont_ctx.pc_yield */\n  125      movi    a3, 0\n  126      s32i    a3, a2, 8\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/core_esp8266_i2s.c:\n  451    I2SIE = 0;\n  452    \n  453:   // Reset I2S\n  454    I2SC &= ~(I2SRST);\n  455    I2SC |= I2SRST;\n  ...\n  481  void i2s_end() {\n  482    // Disable any I2S send or receive\n  483:   // ? Maybe not needed since we're resetting on the next line...\n  484    I2SC &= ~(I2STXS | I2SRXS);\n  485  \n  486:   // Reset I2S\n  487    I2SC &= ~(I2SRST);\n  488    I2SC |= I2SRST;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/core_esp8266_main.cpp:\n   47  \n   48  /* Not static, used in Esp.cpp */\n   49: struct rst_info resetInfo;\n   50  \n   51  /* Not static, used in core_esp8266_postmortem.c.\n   ..\n  216  extern \"C\" void user_init(void) {\n  217      struct rst_info *rtc_info_ptr = system_get_rst_info();\n  218:     memcpy((void *) &resetInfo, (void *) rtc_info_ptr, sizeof(resetInfo));\n  219  \n  220      uart_div_modify(0, UART_CLK_FREQ / (115200));\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/core_esp8266_postmortem.c:\n  129      }\n  130      else if (rst_info.reason == REASON_SOFT_WDT_RST) {\n  131:         ets_printf_P(\"\\nSoft WDT reset\\n\");\n  132      }\n  133  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp:\n   29  #include \"user_interface.h\"\n   30  \n   31: extern struct rst_info resetInfo;\n   32  }\n   33  \n   ..\n   97  {\n   98      /// Please don't stop software watchdog too long (less than 6 seconds),\n   99:     /// otherwise it will trigger hardware watchdog reset.\n  100      system_soft_wdt_stop();\n  101  }\n  ...\n  143  \n  144  extern \"C\" void __real_system_restart_local();\n  145: void EspClass::reset(void)\n  146  {\n  147      __real_system_restart_local();\n  ...\n  370  }\n  371  \n  372: String EspClass::getResetReason(void) {\n  373      char buff[32];\n  374:     if (resetInfo.reason == REASON_DEFAULT_RST) { // normal startup by power on\n  375        strcpy_P(buff, PSTR(\"Power on\"));\n  376:     } else if (resetInfo.reason == REASON_WDT_RST) { // hardware watch dog reset\n  377        strcpy_P(buff, PSTR(\"Hardware Watchdog\"));\n  378:     } else if (resetInfo.reason == REASON_EXCEPTION_RST) { // exception reset, GPIO status won’t change\n  379        strcpy_P(buff, PSTR(\"Exception\"));\n  380:     } else if (resetInfo.reason == REASON_SOFT_WDT_RST) { // software watch dog reset, GPIO status won’t change\n  381        strcpy_P(buff, PSTR(\"Software Watchdog\"));\n  382:     } else if (resetInfo.reason == REASON_SOFT_RESTART) { // software restart ,system_restart , GPIO status won’t change\n  383        strcpy_P(buff, PSTR(\"Software\"));\n  384:     } else if (resetInfo.reason == REASON_DEEP_SLEEP_AWAKE) { // wake up from deep-sleep\n  385        strcpy_P(buff, PSTR(\"Deep-Sleep Wake\"));\n  386:     } else if (resetInfo.reason == REASON_EXT_SYS_RST) { // external system reset\n  387        strcpy_P(buff, PSTR(\"External\"));\n  388      } else {\n  ...\n  392  }\n  393  \n  394: String EspClass::getResetInfo(void) {\n  395:     if(resetInfo.reason != 0) {\n  396          char buff[200];\n  397:         sprintf(&buff[0], (String)F(\"Fatal exception:%d flag:%d (%s) epc1:0x%08x epc2:0x%08x epc3:0x%08x excvaddr:0x%08x depc:0x%08x\").c_str(), resetInfo.exccause, resetInfo.reason, (resetInfo.reason == 0 ? \"DEFAULT\" : resetInfo.reason == 1 ? \"WDT\" : resetInfo.reason == 2 ? \"EXCEPTION\" : resetInfo.reason == 3 ? \"SOFT_WDT\" : resetInfo.reason == 4 ? \"SOFT_RESTART\" : resetInfo.reason == 5 ? \"DEEP_SLEEP_AWAKE\" : resetInfo.reason == 6 ? \"EXT_SYS_RST\" : \"???\"), resetInfo.epc1, resetInfo.epc2, resetInfo.epc3, resetInfo.excvaddr, resetInfo.depc);\n  398          return String(buff);\n  399      }\n  ...\n  401  }\n  402  \n  403: struct rst_info * EspClass::getResetInfoPtr(void) {\n  404:     return &resetInfo;\n  405  }\n  406  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.h:\n   44  #define wdt_enable(time)    ESP.wdtEnable(time)\n   45  #define wdt_disable()       ESP.wdtDisable()\n   46: #define wdt_reset()         ESP.wdtFeed()\n   47  \n   48  #define cli()        ets_intr_lock()       // IRQ Disable\n   ..\n   99          bool rtcUserMemoryWrite(uint32_t offset, uint32_t *data, size_t size);\n  100  \n  101:         void reset();\n  102          void restart();\n  103  \n  ...\n  140          bool updateSketch(Stream& in, uint32_t size, bool restartOnFail = false, bool restartOnSuccess = true);\n  141  \n  142:         String getResetReason();\n  143:         String getResetInfo();\n  144:         struct rst_info * getResetInfoPtr();\n  145  \n  146          bool eraseConfig();\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/esp8266_peri.h:\n  266  #define UCCTSI  20 //Invert CTS\n  267  #define UCRXI   19 //Invert RX\n  268: #define UCTXRST 18 //Reset TX FIFO\n  269: #define UCRXRST 17 //Reset RX FIFO\n  270  #define UCTXHFE 15 //TX Harware Flow Enable\n  271  #define UCLBE   14 //LoopBack Enable\n  ...\n  509  \n  510  //SPI Slave (SPIxS)\n  511: #define SPISSRES    (1 << 31) //SYNC RESET, SPI_SYNC_RESET\n  512  #define SPISE       (1 << 30) //Slave Enable, SPI_SLAVE_MODE\n  513  #define SPISBE      (1 << 29) //WR/RD BUF enable, SPI_SLV_WR_RD_BUF_EN\n  ...\n  785  #define I2SRSM  (1 << 5)  //I2S_RECE_SLAVE_MOD\n  786  #define I2STSM  (1 << 4)  //I2S_TRANS_SLAVE_MOD\n  787: #define I2SRXFR (1 << 3)  //I2S_I2S_RX_FIFO_RESET\n  788: #define I2STXFR (1 << 2)  //I2S_I2S_TX_FIFO_RESET\n  789: #define I2SRXR  (1 << 1)  //I2S_I2S_RX_RESET\n  790: #define I2STXR  (1 << 0)  //I2S_I2S_TX_RESET\n  791: #define I2SRST  (0xF)     //I2S_I2S_RESET_MASK\n  792  \n  793  //I2S INT\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/sntp-lwip2.c:\n   70          os_printf(stod14);\n   71  \n   72:         // reset time subsystem\n   73          timeshift64_is_set = false;\n   74          \n   ..\n  450      if (tv) /* after*/\n  451      {\n  452:         // reset time subsystem\n  453          tune_timeshift64(tv->tv_sec * 1000000ULL + tv->tv_usec);\n  454  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/spiffs/README.md:\n   18   - Small (embedded) targets, sparse RAM without heap\n   19   - Only big areas of data (blocks) can be erased\n   20:  - An erase will reset all bits in block to ones\n   21   - Writing pulls one to zeroes\n   22   - Zeroes can only be pulled to ones by erase\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/spiffs/spiffs_gc.c:\n  400    while (res == SPIFFS_OK && gc.state != FINISHED) {\n  401      SPIFFS_GC_DBG(\"gc_clean: state = \"_SPIPRIi\" entry:\"_SPIPRIi\"\\n\", gc.state, cur_entry);\n  402:     gc.obj_id_found = 0; // reset (to no found data page)\n  403  \n  404      // scan through lookup pages\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/spiffs/spiffs_nucleus.c:\n 1918        } else {\n 1919          // make uninitialized object\n 1920:         SPIFFS_DBG(\"truncate: reset objix_hdr page \"_SPIPRIpg\"\\n\", objix_pix);\n 1921          memset(fs->work + sizeof(spiffs_page_object_ix_header), 0xff,\n 1922              SPIFFS_CFG_LOG_PAGE_SZ(fs) - sizeof(spiffs_page_object_ix_header));\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/spiffs/spiffs_nucleus.h:\n   10   * spiffs is designed for following spi flash characteristics:\n   11   *   - only big areas of data (blocks) can be erased\n   12:  *   - erasing resets all bits in a block to ones\n   13   *   - writing pulls ones to zeroes\n   14   *   - zeroes cannot be pulled to ones, without erase\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/spiffs/TECH_SPEC:\n   36  \n   37  A clean SPI flash from factory have all bits in entire memory set to one. A\n   38: mass erase will reset the device to this state. Block or sector erasing will\n   39  put the all bits in the area given by the sector or block to ones. Writing to a\n   40  NOR flash pulls ones to zeroes. Writing 0xFF to an address is simply a no-op. \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/spiffs_api.h:\n  224                     workBufSize, fdsBufSize, cacheBufSize,\n  225                     workBufSize + fdsBufSize + cacheBufSize);\n  226:             _workBuf.reset(new uint8_t[workBufSize]);\n  227:             _fdsBuf.reset(new uint8_t[fdsBufSize]);\n  228:             _cacheBuf.reset(new uint8_t[cacheBufSize]);\n  229          }\n  230  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Stream.cpp:\n  105  \n  106          if(c != target[index])\n  107:             index = 0; // reset index if any char does not match\n  108  \n  109          if(c == target[index]) {\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Updater.cpp:\n   27  }\n   28  \n   29: void UpdaterClass::_reset() {\n   30    if (_buffer)\n   31      delete[] _buffer;\n   ..\n   47  \n   48    /* Check boot mode; if boot mode is 1 (UART download mode),\n   49:     we will not be able to reset into normal mode once update is done.\n   50      Fail early to avoid frustration.\n   51      https://github.com/esp8266/Arduino/issues/1017#issuecomment-200605576\n   ..\n   73    }\n   74  \n   75:   _reset();\n   76    clearError(); //  _error = 0\n   77  \n   ..\n  156  #endif\n  157  \n  158:     _reset();\n  159      return false;\n  160    }\n  ...\n  171      if(_target_md5 != _md5.toString()){\n  172        _setError(UPDATE_ERROR_MD5);\n  173:       _reset();\n  174        return false;\n  175      }\n  ...\n  180  \n  181    if(!_verifyEnd()) {\n  182:     _reset();\n  183      return false;\n  184    }\n  ...\n  200    }\n  201  \n  202:   _reset();\n  203    return true;\n  204  }\n  ...\n  357          printError(DEBUG_UPDATER);\n  358  #endif\n  359:         _reset();\n  360          return 0;\n  361      }\n  ...\n  369                  _currentAddress = (_startAddress + _size);\n  370                  _setError(UPDATE_ERROR_STREAM);\n  371:                 _reset();\n  372                  return written;\n  373              }\n  ...\n  415      out.println(F(\"Magic byte is wrong, not 0xE9\"));\n  416    } else if (_error == UPDATE_ERROR_BOOTSTRAP){\n  417:     out.println(F(\"Invalid bootstrapping state, reset ESP8266 before updating\"));\n  418    } else {\n  419      out.println(F(\"UNKNOWN\"));\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Updater.h:\n  143  \n  144    private:\n  145:     void _reset();\n  146      bool _writeBuffer();\n  147  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/ISSUE_TEMPLATE.md:\n   48  - Flash Size: \t\t[4MB/1MB]\n   49  - lwip Variant:   [v1.4|v2 Lower Memory|Higher Bandwidth]\n   50: - Reset Method:\t\t[ck|nodemcu]\n   51  - Flash Frequency:\t[40Mhz]\n   52  - CPU Frequency:\t\t[80Mhz|160MHz]\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/esp8266/examples/interactive/interactive.ino:\n   75      case '2': DO(WiFi.mode(WIFI_AP_STA));\n   76      case '3': DO(WiFi.mode(WIFI_STA));\n   77:     case 'R': DO(if (((GPI >> 16) & 0xf) == 1) ESP.reset() /* else must hard reset */);\n   78      case 'd': DO(WiFi.disconnect());\n   79      case 'b': DO(WiFi.begin());\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/esp8266/examples/TestEspApi/TestEspApi.ino:\n  175  \n  176  void print_system_info(Stream & consolePort) {\n  177:   const rst_info * resetInfo = system_get_rst_info();\n  178:   consolePort.print(F(\"system_get_rst_info() reset reason: \"));\n  179:   consolePort.println(RST_REASONS[resetInfo->reason]);\n  180  \n  181    consolePort.print(F(\"system_get_free_heap_size(): \"));\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/esp8266/keywords.txt:\n   26  rtcUserMemoryRead\tKEYWORD2\n   27  rtcUserMemoryWrite\tKEYWORD2\n   28: reset\tKEYWORD2\n   29  restart\tKEYWORD2\n   30  getVcc\tKEYWORD2\n   ..\n   53  getFreeSketchSpace\tKEYWORD2\n   54  updateSketch\tKEYWORD2\n   55: getResetReason\tKEYWORD2\n   56: getResetInfo\tKEYWORD2\n   57: getResetInfoPtr\tKEYWORD2\n   58  eraseConfig\tKEYWORD2\n   59  getCycleCount\tKEYWORD2\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266AVRISP/examples/Arduino_Wifi_AVRISP/Arduino_Wifi_AVRISP.ino:\n    8  const char* pass = \"**********\";\n    9  const uint16_t port = 328;\n   10: const uint8_t reset_pin = 5;\n   11  \n   12: ESP8266AVRISP avrprog(port, reset_pin);\n   13  \n   14  void setup() {\n   ..\n   16    Serial.println(\"\");\n   17    Serial.println(\"Arduino AVR-ISP over TCP\");\n   18:   avrprog.setReset(false); // let the AVR run\n   19  \n   20    WiFi.mode(WIFI_STA);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266AVRISP/README.rst:\n   29  | GPIO14    | SCK         |\n   30  +-----------+-------------+\n   31: | any\\*     | RESET       |\n   32  +-----------+-------------+\n   33  \n   34: For RESET use a GPIO other than 0, 2 and 15 (bootselect pins), and apply\n   35  an external pullup/down so that the target is normally running.\n   36  \n   ..\n   44  \n   45      // Create the programmer object\n   46:     ESP8266AVRISP avrprog(PORT, RESET_PIN)\n   47      // ... with custom SPI frequency\n   48:     ESP8266AVRISP avrprog(PORT, RESET_PIN, 4e6)\n   49  \n   50      // Check current connection state, but don't perform any actions\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266AVRISP/src/command.h:\n   36  #define Cmnd_STK_GET_SYNC          0x30  // ' '\n   37  #define Cmnd_STK_GET_SIGN_ON       0x31  // ' '\n   38: #define Cmnd_STK_RESET             0x32  // ' '\n   39  #define Cmnd_STK_SINGLE_CLOCK      0x33  // ' '\n   40  #define Cmnd_STK_STORE_PARAMETERS  0x34  // ' '\n   ..\n   82  #define Parm_STK_OSC_PSCALE        0x86  // ' ' - R/W\n   83  #define Parm_STK_OSC_CMATCH        0x87  // ' ' - R/W\n   84: #define Parm_STK_RESET_DURATION    0x88  // ' ' - R/W\n   85  #define Parm_STK_SCK_DURATION      0x89  // ' ' - R/W\n   86  \n   ..\n   99  #define Stat_STK_PROGMODE          0x02  // Programming mode,  '1' - PROGMODE\n  100  #define Stat_STK_STANDALONE        0x04  // Standalone mode,   '1' - SM mode\n  101: #define Stat_STK_RESET             0x08  // RESET button,      '1' - Pushed\n  102  #define Stat_STK_PROGRAM           0x10  // Program button, '   1' - Pushed\n  103  #define Stat_STK_LEDG              0x20  // Green LED status,  '1' - Lit\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266AVRISP/src/ESP8266AVRISP.cpp:\n   39  #define beget16(addr) (*addr * 256 + *(addr+1))\n   40  \n   41: ESP8266AVRISP::ESP8266AVRISP(uint16_t port, uint8_t reset_pin, uint32_t spi_freq, bool reset_state, bool reset_activehigh):\n   42      _spi_freq(spi_freq), _server(WiFiServer(port)), _state(AVRISP_STATE_IDLE),\n   43:     _reset_pin(reset_pin), _reset_state(reset_state), _reset_activehigh(reset_activehigh)\n   44  {\n   45:     pinMode(_reset_pin, OUTPUT);\n   46:     setReset(_reset_state);\n   47  }\n   48  \n   ..\n   58  }\n   59  \n   60: void ESP8266AVRISP::setReset(bool rst) {\n   61:     _reset_state = rst;\n   62:     digitalWrite(_reset_pin, _resetLevel(_reset_state));\n   63  }\n   64  \n   ..\n   89                      pmode = 0;\n   90                  }\n   91:                 setReset(_reset_state);\n   92                  _state = AVRISP_STATE_IDLE;\n   93              } else {\n   ..\n  218      // try to sync the bus\n  219      SPI.transfer(0x00);\n  220:     digitalWrite(_reset_pin, _resetLevel(false));\n  221      delayMicroseconds(50);\n  222:     digitalWrite(_reset_pin, _resetLevel(true));\n  223      delay(30);\n  224  \n  ...\n  229  void ESP8266AVRISP::end_pmode() {\n  230      SPI.end();\n  231:     setReset(_reset_state);\n  232      pmode = 0;\n  233  }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266AVRISP/src/ESP8266AVRISP.h:\n   15  #include <Arduino.h>\n   16  \n   17: // uncomment if you use an n-mos to level-shift the reset line\n   18: // #define AVRISP_ACTIVE_HIGH_RESET\n   19  \n   20  // SPI clock frequency in Hz\n   ..\n   48  class ESP8266AVRISP {\n   49  public:\n   50:     ESP8266AVRISP(uint16_t port, uint8_t reset_pin, uint32_t spi_freq=AVRISP_SPI_FREQ, bool reset_state=false, bool reset_activehigh=false);\n   51  \n   52      void begin();\n   ..\n   55      void setSpiFrequency(uint32_t);\n   56  \n   57:     // control the state of the RESET pin of the target\n   58:     // see AVRISP_ACTIVE_HIGH_RESET\n   59:     void setReset(bool);\n   60  \n   61      // check for pending clients if IDLE, check for disconnect otherwise\n   ..\n  101      void end_pmode(void);       // exit program mode\n  102  \n  103:     inline bool _resetLevel(bool reset_state) { return reset_state == _reset_activehigh; }\n  104  \n  105      uint32_t _spi_freq;\n  ...\n  107      WiFiClient _client;\n  108      AVRISPState_t _state;\n  109:     uint8_t _reset_pin;\n  110:     bool _reset_state;\n  111:     bool _reset_activehigh;\n  112  \n  113      // programmer settings, set by remote end\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266HTTPClient/src/ESP8266HTTPClient.cpp:\n  132  bool HTTPClient::begin(String url, String httpsFingerprint)\n  133  {\n  134:     _transportTraits.reset(nullptr);\n  135      _port = 443;\n  136      if (httpsFingerprint.length() == 0) {\n  ...\n  148  bool HTTPClient::begin(String url, const uint8_t httpsFingerprint[20])\n  149  {\n  150:     _transportTraits.reset(nullptr);\n  151      _port = 443;\n  152      if (!beginInternal(url, \"https\")) {\n  ...\n  169  bool HTTPClient::begin(String url)\n  170  {\n  171:     _transportTraits.reset(nullptr);\n  172      _port = 80;\n  173      if (!beginInternal(url, \"http\")) {\n  ...\n  558                          DEBUG_HTTPCLIENT(\"[HTTP-Client][sendRequest] stream write error %d\\n\", _tcp->getWriteError());\n  559  \n  560:                         //reset write error for retry\n  561                          _tcp->clearWriteError();\n  562                      }\n  ...\n 1126                          DEBUG_HTTPCLIENT(\"[HTTP-Client][writeToStreamDataBlock] stream write error %d\\n\", stream->getWriteError());\n 1127  \n 1128:                         //reset write error for retry\n 1129                          stream->clearWriteError();\n 1130                      }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266HTTPClient/src/ESP8266HTTPClient.h:\n   68      HTTP_CODE_NON_AUTHORITATIVE_INFORMATION = 203,\n   69      HTTP_CODE_NO_CONTENT = 204,\n   70:     HTTP_CODE_RESET_CONTENT = 205,\n   71      HTTP_CODE_PARTIAL_CONTENT = 206,\n   72      HTTP_CODE_MULTI_STATUS = 207,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WebServer/src/ESP8266WebServer.cpp:\n  326      _currentClient = WiFiClient();\n  327      _currentStatus = HC_NONE;\n  328:     _currentUpload.reset();\n  329    }\n  330  \n  ...\n  626      case 203: return F(\"Non-Authoritative Information\");\n  627      case 204: return F(\"No Content\");\n  628:     case 205: return F(\"Reset Content\");\n  629      case 206: return F(\"Partial Content\");\n  630      case 300: return F(\"Multiple Choices\");\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WebServer/src/ESP8266WebServerSecureAxTLS.cpp:\n  134      _currentClientSecure = WiFiClientSecure();\n  135      _currentStatus = HC_NONE;\n  136:     _currentUpload.reset();\n  137    }\n  138  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WebServer/src/ESP8266WebServerSecureBearSSL.cpp:\n  139      _currentClientSecure = BearSSL::WiFiClientSecure();\n  140      _currentStatus = HC_NONE;\n  141:     _currentUpload.reset();\n  142    }\n  143  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WebServer/src/Parsing.cpp:\n   72    String req = client.readStringUntil('\\r');\n   73    client.readStringUntil('\\n');\n   74:   //reset header value\n   75    for (int i = 0; i < _headerKeysCount; ++i) {\n   76      _currentHeaders[i].value =String();\n   ..\n  457              }\n  458            } else {\n  459:             _currentUpload.reset(new HTTPUpload());\n  460              _currentUpload->status = UPLOAD_FILE_START;\n  461              _currentUpload->name = argName;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WiFi/src/ESP8266WiFiAP.cpp:\n  170          if(ip.ip.addr == 0x00000000) {\n  171              // Invalid config\n  172:             DEBUG_WIFI(\"[AP] IP config Invalid resetting...\\n\");\n  173              //192.168.244.1 , 192.168.244.1 , 255.255.255.0\n  174              ret = softAPConfig(0x01F4A8C0, 0x01F4A8C0, 0x00FFFFFF);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WiFi/src/include/DataSource.h:\n   81                  memcpy(new_buffer, _buffer.get(), stream_read);\n   82              }\n   83:             _buffer.reset(new_buffer);\n   84              _bufferSize = min_buffer_size;\n   85          }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WiFi/src/WiFiClientSecureAxTLS.cpp:\n  127              /* Creating a new TLS session on top of a new TCP connection.\n  128                 ssl_free will want to send a close notify alert, but the old TCP connection\n  129:                is already gone at this point, so reset io_ctx. */\n  130              io_ctx = nullptr;\n  131              _ssl = nullptr;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WiFi/src/WiFiClientSecureBearSSL.cpp:\n  219    _iobuf_in = nullptr;\n  220    _iobuf_out = nullptr;\n  221:   // Reset non-allocated ptrs (pointing to bits potentially free'd above)\n  222    _recvapp_buf = nullptr;\n  223    _recvapp_len = 0;\n  ...\n  802    }\n  803  \n  804:   if (!br_ssl_client_reset(_sc.get(), hostName, 0)) {\n  805      _freeSSL();\n  806      return false;\n  ...\n  860      return false;\n  861    }\n  862:   if (!br_ssl_server_reset(_sc_svr.get())) {\n  863      _freeSSL();\n  864      return false;\n  ...\n  891      return false;\n  892    }\n  893:   if (!br_ssl_server_reset(_sc_svr.get())) {\n  894      _freeSSL();\n  895      return false;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WiFi/src/WiFiUdp.cpp:\n  125      if (!result) {\n  126          // yielding here will not make more data \"available\",\n  127:         // but it will prevent the system from going into WDT reset\n  128          optimistic_yield(1000);\n  129      }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/Ethernet/src/Dhcp.cpp:\n   21      // zero out _dhcpMacAddr\n   22      memset(_dhcpMacAddr, 0, 6); \n   23:     reset_DHCP_lease();\n   24  \n   25      memcpy((void*)_dhcpMacAddr, (void*)mac, 6);\n   ..\n   28  }\n   29  \n   30: void DhcpClass::reset_DHCP_lease(){\n   31      // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp\n   32      memset(_dhcpLocalIp, 0, 20);\n   ..\n  433              //this should basically restart completely\n  434              _dhcp_state = STATE_DHCP_START;\n  435:             reset_DHCP_lease();\n  436              rc = 3 + request_DHCP_lease();\n  437          }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/Ethernet/src/Dhcp.h:\n  159    \n  160    int request_DHCP_lease();\n  161:   void reset_DHCP_lease();\n  162    void presend_DHCP();\n  163    void send_DHCP_MESSAGE(uint8_t, uint16_t);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/Ethernet/src/utility/w5100.cpp:\n  143    SPI.transfer(_addr & 0xFF);\n  144    SPI.transfer(_data);\n  145:   resetSS();\n  146  #else\n  147    SPI.transfer(SPI_CS, 0xF0, SPI_CONTINUE);\n  ...\n  164      _addr++;\n  165      SPI.transfer(_buf[i]);\n  166:     resetSS();\n  167  #else\n  168  \tSPI.transfer(SPI_CS, 0xF0, SPI_CONTINUE);\n  ...\n  184    SPI.transfer(_addr & 0xFF);\n  185    uint8_t _data = SPI.transfer(0);\n  186:   resetSS();\n  187  #else\n  188    SPI.transfer(SPI_CS, 0x0F, SPI_CONTINUE);\n  ...\n  205      _addr++;\n  206      _buf[i] = SPI.transfer(0);\n  207:     resetSS();\n  208  #else\n  209  \tSPI.transfer(SPI_CS, 0x0F, SPI_CONTINUE);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/Ethernet/src/utility/w5100.h:\n  320  \n  321  private:\n  322:   static const uint8_t  RST = 7; // Reset BIT\n  323  \n  324    static const int SOCKETS = 4;\n  ...\n  337    inline static void initSS()    { DDRB  |=  _BV(4); };\n  338    inline static void setSS()     { PORTB &= ~_BV(4); };\n  339:   inline static void resetSS()   { PORTB |=  _BV(4); };\n  340  #elif defined(__AVR_ATmega32U4__)\n  341    inline static void initSS()    { DDRB  |=  _BV(6); };\n  342    inline static void setSS()     { PORTB &= ~_BV(6); };\n  343:   inline static void resetSS()   { PORTB |=  _BV(6); }; \n  344  #elif defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB162__)\n  345    inline static void initSS()    { DDRB  |=  _BV(0); };\n  346    inline static void setSS()     { PORTB &= ~_BV(0); };\n  347:   inline static void resetSS()   { PORTB |=  _BV(0); }; \n  348  #else\n  349    inline static void initSS()    { DDRB  |=  _BV(2); };\n  350    inline static void setSS()     { PORTB &= ~_BV(2); };\n  351:   inline static void resetSS()   { PORTB |=  _BV(2); };\n  352  #endif\n  353  #elif defined(ESP8266)\n  354    inline static void initSS()    { pinMode(SS, OUTPUT); };\n  355    inline static void setSS()     { GPOC = digitalPinToBitMask(SS); };\n  356:   inline static void resetSS()   { GPOS = digitalPinToBitMask(SS); };\n  357  #endif // ARDUINO_ARCH_AVR\n  358  };\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/GDBStub/README-lib.md:\n   38   * In your user_main.c, add an `#include <../gdbstub/gdbstub.h>` and call `gdbstub_init();` somewhere in user_main.\n   39   * Compile and flash your board.\n   40:  * Run gdb, depending on your configuration immediately after resetting the board or after it has run into\n   41  an exception. The easiest way to do it is to use the provided script: xtensa-lx106-elf-gdb -x gdbcmds -b 38400\n   42  Change the '38400' into the baud rate your code uses. You may need to change the gdbcmds script to fit the\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/GDBStub/src/internal/gdbstub-entry.S:\n  104  \trsr\t\ta2, ICOUNT\n  105  \tmovi\ta3, -1\n  106: \tbne\t\ta2, a3, noIcountReset\n  107  \tmovi\ta3, 0\n  108  \twsr\t\ta3, ICOUNT\n  109: noIcountReset:\n  110  \n  111  \trsr\ta2, ps\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/GDBStub/src/internal/gdbstub.c:\n  120  static int32_t singleStepPs=-1;\t\t\t//Stores ps when single-stepping instruction. -1 when not in use.\n  121  \n  122: //Small function to feed the hardware watchdog. Needed to stop the ESP from resetting\n  123  //due to a watchdog timeout while reading a command.\n  124  static void ATTR_GDBFN keepWDTalive() {\n  ...\n  146  }\n  147  \n  148: //Send the start of a packet; reset checksum calculation.\n  149  static void ATTR_GDBFN gdbPacketStart() {\n  150  \tchsum=0;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/GDBStub/src/xtensa/config/core-isa.h:\n   76  #define XCHAL_HAVE_S32C1I\t\t0\t/* S32C1I instruction */\n   77  #define XCHAL_HAVE_SPECULATION\t\t0\t/* speculation */\n   78: #define XCHAL_HAVE_FULL_RESET\t\t1\t/* all regs/state reset */\n   79  #define XCHAL_NUM_CONTEXTS\t\t1\t/* */\n   80  #define XCHAL_NUM_MISC_REGS\t\t0\t/* num of scratch regs (0..4) */\n   ..\n  388  #define XCHAL_HAVE_VECTOR_SELECT\t1\t/* relocatable vectors */\n  389  #define XCHAL_HAVE_VECBASE\t\t1\t/* relocatable vectors */\n  390: #define XCHAL_VECBASE_RESET_VADDR\t0x40000000  /* VECBASE reset value */\n  391: #define XCHAL_VECBASE_RESET_PADDR\t0x40000000\n  392: #define XCHAL_RESET_VECBASE_OVERLAP\t0\n  393  \n  394: #define XCHAL_RESET_VECTOR0_VADDR\t0x50000000\n  395: #define XCHAL_RESET_VECTOR0_PADDR\t0x50000000\n  396: #define XCHAL_RESET_VECTOR1_VADDR\t0x40000080\n  397: #define XCHAL_RESET_VECTOR1_PADDR\t0x40000080\n  398: #define XCHAL_RESET_VECTOR_VADDR\t0x50000000\n  399: #define XCHAL_RESET_VECTOR_PADDR\t0x50000000\n  400  #define XCHAL_USER_VECOFS\t\t0x00000050\n  401  #define XCHAL_USER_VECTOR_VADDR\t\t0x40000050\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/SPI/SPI.cpp:\n  294  uint8_t SPIClass::transfer(uint8_t data) {\n  295      while(SPI1CMD & SPIBUSY) {}\n  296:     // reset to 8Bit mode\n  297      setDataBits(8);\n  298      SPI1W0 = data;\n  ...\n  345  void SPIClass::write(uint8_t data) {\n  346      while(SPI1CMD & SPIBUSY) {}\n  347:     // reset to 8Bit mode\n  348      setDataBits(8);\n  349      SPI1W0 = data;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/SPISlave/examples/SPISlave_SafeMaster/SPISlave_SafeMaster.ino:\n   12      Note: If the ESP is booting at a moment when the SPI Master has the Select line HIGH (deselected)\n   13      the ESP8266 WILL FAIL to boot!\n   14:     This sketch tries to go around this issue by only pulsing the Slave Select line to reset the command\n   15      and keeping the line LOW all other time.\n   16  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/SPISlave/src/hspi_slave.c:\n   39          status = SPI1S;\n   40          SPI1S &= ~(0x3E0);//disable interrupts\n   41:         SPI1S |= SPISSRES;//reset\n   42          SPI1S &= ~(0x1F);//clear interrupts\n   43          SPI1S |= (0x3E0);//enable interrupts\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/Wire/Wire.cpp:\n  182    if (!result) {\n  183      // yielding here will not make more data \"available\",\n  184:     // but it will prevent the system from going into WDT reset\n  185      optimistic_yield(1000);\n  186    }\n  ...\n  244    //   return;\n  245    // }\n  246:   // // reset tx buffer iterator vars\n  247    // // !!! this will kill any pending pre-master sendTo() activity\n  248    // txBufferIndex = 0;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/platform.txt:\n  127  tools.esptool.upload.params.verbose=-vv\n  128  tools.esptool.upload.params.quiet=\n  129: tools.esptool.upload.pattern=\"{path}/{cmd}\" {upload.verbose} -cd {upload.resetmethod} -cb {upload.speed} -cp \"{serial.port}\" {upload.erase_cmd} -ca 0x00000 -cf \"{build.path}/{build.project_name}.bin\"\n  130  tools.esptool.upload.network_pattern=\"{network_cmd}\" \"{runtime.platform.path}/tools/espota.py\" -i \"{serial.port}\" -p \"{network.port}\" \"--auth={network.password}\" -f \"{build.path}/{build.project_name}.bin\"\n  131  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/device/libraries/BSTest/runner.py:\n   43          self.sp = spawn_obj\n   44          self.tests = []\n   45:         self.reset_timeout = 2\n   46          self.name = name\n   47          self.mocks = mocks\n   ..\n  149                              'Exception',\n  150                              'ets Jan  8 2013',\n  151:                             'wdt reset'])\n  152              if res == 0:\n  153                  continue\n  ...\n  160                          time.sleep(1.0)\n  161                          self.sp.expect([TIMEOUT,\n  162:                                         'wdt reset',\n  163                                          'Exception',\n  164                                          'Panic',\n  165                                          'Abort',\n  166                                          'Soft WDT',\n  167:                                         EOF], timeout=self.reset_timeout)\n  168                      return BSTestRunner.FAIL\n  169              elif res == 2 or res == 3:\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/device/Makefile:\n   11  BS_DIR ?= libraries/BSTest\n   12  DEBUG_LEVEL ?= DebugLevel=None____\n   13: FQBN ?= esp8266com:esp8266:generic:CpuFrequency=80,FlashFreq=40,FlashMode=dio,UploadSpeed=115200,FlashSize=4M1M,LwIPVariant=v2mss536,ResetMethod=none,Debug=Serial,$(DEBUG_LEVEL)\n   14  BUILD_TOOL := $(ARDUINO_IDE_PATH)/arduino-builder\n   15  TEST_CONFIG := test_env.cfg\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/host/common/Arduino.h:\n  110      // timer0 is a special CPU timer that has very high resolution but with\n  111      // limited control.\n  112:     // it uses CCOUNT (ESP.GetCycleCount()) as the non-resetable timer counter\n  113      // it does not support divide, type, or reload flags\n  114      // it is auto-disabled when the compare value matches CCOUNT\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/host/common/catch.hpp:\n  422                  m_p->release();\n  423          }\n  424:         void reset() {\n  425              if( m_p )\n  426                  m_p->release();\n  ...\n 2516  \n 2517          ~Option() {\n 2518:             reset();\n 2519          }\n 2520  \n 2521          Option& operator= ( Option const& _other ) {\n 2522              if( &_other != this ) {\n 2523:                 reset();\n 2524                  if( _other )\n 2525                      nullableValue = new( storage ) T( *_other );\n ....\n 2528          }\n 2529          Option& operator = ( T const& _value ) {\n 2530:             reset();\n 2531              nullableValue = new( storage ) T( _value );\n 2532              return *this;\n 2533          }\n 2534  \n 2535:         void reset() {\n 2536              if( nullableValue )\n 2537                  nullableValue->~T();\n ....\n 3938          {\n 3939              if( other.m_floatingArg.get() )\n 3940:                 m_floatingArg.reset( new Arg( *other.m_floatingArg ) );\n 3941          }\n 3942  \n ....\n 3966              if( m_floatingArg.get() )\n 3967                  throw std::logic_error( \"Only one unpositional argument can be added\" );\n 3968:             m_floatingArg.reset( new Arg() );\n 3969              ArgBuilder builder( m_floatingArg.get() );\n 3970              return builder;\n ....\n 4617              return *this;\n 4618          }\n 4619:         void reset() {\n 4620:             Option<T>::reset();\n 4621              used = false;\n 4622          }\n ....\n 5146  \n 5147      struct FatalConditionHandler {\n 5148: \t\tvoid reset() {}\n 5149  \t};\n 5150  \n ....\n 5182          }\n 5183          ~FatalConditionHandler() {\n 5184:             reset();\n 5185          }\n 5186:         void reset() {\n 5187              if( m_isSet ) {\n 5188                  for( std::size_t i = 0; i < sizeof(signalDefs)/sizeof(SignalDefs); ++i )\n ....\n 5297  \n 5298              m_activeTestCase = NULL;\n 5299:             m_testCaseTracker.reset();\n 5300  \n 5301              return deltaTotals;\n ....\n 5319                  m_messages.clear();\n 5320  \n 5321:             // Reset working state\n 5322              m_lastAssertionInfo = AssertionInfo( \"\", m_lastAssertionInfo.lineInfo, \"{Unknown expression after the reported line}\" , m_lastAssertionInfo.resultDisposition );\n 5323              m_lastResult = result;\n ....\n 5472              FatalConditionHandler fatalConditionHandler; // Handle signals\n 5473              m_activeTestCase->invoke();\n 5474:             fatalConditionHandler.reset();\n 5475          }\n 5476  \n ....\n 5688                  if( m_configData.showHelp )\n 5689                      showHelp( m_configData.processName );\n 5690:                 m_config.reset();\n 5691              }\n 5692              catch( std::exception& ex ) {\n ....\n 5705          void useConfigData( ConfigData const& _configData ) {\n 5706              m_configData = _configData;\n 5707:             m_config.reset();\n 5708          }\n 5709  \n ....\n 7655          }\n 7656          virtual void testCaseEnded( TestCaseStats const& /* _testCaseStats */ ) {\n 7657:             currentTestCaseInfo.reset();\n 7658          }\n 7659          virtual void testGroupEnded( TestGroupStats const& /* _testGroupStats */ ) {\n 7660:             currentGroupInfo.reset();\n 7661          }\n 7662          virtual void testRunEnded( TestRunStats const& /* _testRunStats */ ) {\n 7663:             currentTestCaseInfo.reset();\n 7664:             currentGroupInfo.reset();\n 7665:             currentTestRunInfo.reset();\n 7666          }\n 7667  \n ....\n 7781              node->children.push_back( m_rootSection );\n 7782              m_testCases.push_back( node );\n 7783:             m_rootSection.reset();\n 7784  \n 7785              assert( m_deepestSection );\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/host/common/spiffs_mock.cpp:\n   42      s_phys_block = static_cast<uint32_t>(fs_block);\n   43      s_phys_data  = m_fs.data();\n   44:     reset();\n   45  }\n   46  \n   47: void SpiffsMock::reset()\n   48  {\n   49      SPIFFS = FS(FSImplPtr(new SPIFFSImpl(0, s_phys_size, s_phys_page, s_phys_block, 5)));\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/host/common/spiffs_mock.h:\n   25  public:\n   26      SpiffsMock(size_t fs_size, size_t fs_block, size_t fs_page);\n   27:     void reset();\n   28      ~SpiffsMock();\n   29      \n   ..\n   33  \n   34  #define SPIFFS_MOCK_DECLARE(size_kb, block_kb, page_b) SpiffsMock spiffs_mock(size_kb * 1024, block_kb * 1024, page_b)\n   35: #define SPIFFS_MOCK_RESET() spiffs_mock.reset()\n   36  \n   37  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tests/host/fs/test_fs.cpp:\n   99  }\n  100  \n  101: TEST_CASE(\"Files persist after reset\", \"[fs]\")\n  102  {\n  103      SPIFFS_MOCK_DECLARE(64, 8, 512);\n  ...\n  105      createFile(\"config1.txt\", \"file 1\");\n  106  \n  107:     SPIFFS_MOCK_RESET();\n  108      REQUIRE(SPIFFS.begin());\n  109      REQUIRE(readFile(\"config1.txt\") == \"file 1\");\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/boards.txt.py:\n   22  #    macro:   common entries\n   23  #        unmodifiable parameters:\n   24: #            resetmethod_ck/_nodemcu/_none/_dtrset: fixed reset method\n   25  #            flashmode_qio/_dio/_qout/_dout:        fixed flash mode\n   26  #            flashfreq_40/_80:                      fixed flash frequency\n   27  #        selection menu:\n   28: #            resetmethod_menu            menus for reset method\n   29: #            resetmethod_menu_extra      menus for additional reset methods\n   30  #            crystalfreq/flashfreq_menu: menus for crystal/flash frequency selection\n   31  #            flashmode_menu:             menus for flashmode selection (dio/dout/qio/qout)\n   ..\n   63              },\n   64          'macro': [\n   65:             'resetmethod_menu',\n   66:             'resetmethod_menu_extra',\n   67              'crystalfreq_menu',\n   68              'flashfreq_menu',\n   ..\n   73          'desc': [ 'These modules come in different form factors and pinouts. See the page at ESP8266 community wiki for more info: `ESP8266 Module Family <http://www.esp8266.com/wiki/doku.php?id=esp8266-module-family>`__.',\n   74                    '',\n   75:                   'Usually these modules have no bootstapping resistors on board, insufficient decoupling capacitors, no voltage regulator, no reset circuit, and no USB-serial adapter. This makes using them somewhat tricky, compared to development boards which add these features.',\n   76                    '',\n   77                    'In order to use these modules, make sure to observe the following:',\n   ..\n  112                    '| GPIO0           | PullUp     | DTR              |',\n  113                    '+-----------------+------------+------------------+',\n  114:                   '| Reset\\*         | PullUp     | RTS              |',\n  115                    '+-----------------+------------+------------------+',\n  116                    '| GPIO15\\*        | PullDown   |                  |',\n  ...\n  121                    '-  Note',\n  122                    '-  GPIO15 is also named MTDO',\n  123:                   '-  Reset is also named RSBT or REST (adding PullUp improves the',\n  124                    '   stability of the module)',\n  125                    '-  GPIO2 is alternative TX for the boot loader mode',\n  ...\n  155                    '| GPIO0         |            | GND              |',\n  156                    '+---------------+------------+------------------+',\n  157:                   '| Reset         |            | RTS\\*            |',\n  158                    '+---------------+------------+------------------+',\n  159                    '| GPIO15        | PullDown   |                  |',\n  ...\n  233                    '| 1        | normal boot      |',\n  234                    '+----------+------------------+',\n  235:                   '| 2        | reset pin        |',\n  236                    '+----------+------------------+',\n  237:                   '| 3        | software reset   |',\n  238                    '+----------+------------------+',\n  239:                   '| 4        | watchdog reset   |',\n  240                    '+----------+------------------+',\n  241                    '',\n  ...\n  274              },\n  275          'macro': [\n  276:             'resetmethod_menu',\n  277:             'resetmethod_menu_extra',\n  278              'crystalfreq_menu',\n  279              'flashmode_dout',\n  ...\n  292              ( '.build.board', 'ESP8266_ESP13' ),\n  293              ( '.build.variant', 'ESPDuino' ),\n  294:             ( '.menu.ResetMethod.v2', 'ESPduino-V2' ),\n  295:             ( '.menu.ResetMethod.v2.upload.resetmethod', 'nodemcu' ),\n  296:             ( '.menu.ResetMethod.v1', 'ESPduino-V1' ),\n  297:             ( '.menu.ResetMethod.v1.upload.resetmethod', 'ck' ),\n  298              ( '.menu.UploadTool.esptool', 'Serial' ),\n  299              ( '.menu.UploadTool.esptool.upload.tool', 'esptool' ),\n  ...\n  316              },\n  317          'macro': [\n  318:             'resetmethod_nodemcu',\n  319              'flashmode_qio',\n  320              'flashfreq_40',\n  321              '4M',\n  322              ],\n  323:         'desc': [ 'The Adafruit Feather HUZZAH ESP8266 is an Arduino-compatible Wi-Fi development board powered by Ai-Thinker\\'s ESP-12S, clocked at 80 MHz at 3.3V logic. A high-quality SiLabs CP2104 USB-Serial chip is included so that you can upload code at a blistering 921600 baud for fast development time. It also has auto-reset so no noodling with pins and reset button pressings. A 3.7V Lithium polymer battery connector is included, making it ideal for portable projects. The Adafruit Feather HUZZAH ESP8266 will automatically recharge a connected battery when USB power is available.',\n  324                    '',\n  325                    'Product page: https://www.adafruit.com/product/2821'\n  ...\n  333              },\n  334          'macro': [\n  335:             'resetmethod_nodemcu',\n  336              'crystalfreq_menu',\n  337              'flashmode_qio',\n  ...\n  354              'flashfreq_40',\n  355              '4M',\n  356:             'resetmethod_menu',\n  357              ],\n  358:         'desc': [ 'ESPresso Lite 1.0 (beta version) is an Arduino-compatible Wi-Fi development board powered by Espressif System\\'s own ESP8266 WROOM-02 module. It has breadboard-friendly breakout pins with in-built LED, two reset/flash buttons and a user programmable button . The operating voltage is 3.3VDC, regulated with 800mA maximum current. Special distinctive features include on-board I2C pads that allow direct connection to OLED LCD and sensor boards.', ]\n  359      }),\n  360      ( 'espresso_lite_v2', {\n  ...\n  368              'flashfreq_40',\n  369              '4M',\n  370:             'resetmethod_menu',\n  371              ],\n  372:         'desc': [ 'ESPresso Lite 2.0 is an Arduino-compatible Wi-Fi development board based on an earlier V1 (beta version). Re-designed together with Cytron Technologies, the newly-revised ESPresso Lite V2.0 features the auto-load/auto-program function, eliminating the previous need to reset the board manually before flashing a new program. It also feature two user programmable side buttons and a reset button. The special distinctive features of on-board pads for I2C sensor and actuator is retained.', ]\n  373      }),\n  374      ( 'phoenix_v1', {\n  ...\n  382              'flashfreq_40',\n  383              '4M',\n  384:             'resetmethod_menu',\n  385              ],\n  386          'desc': [ 'Product page: http://www.espert.co', ],\n  ...\n  396              'flashfreq_40',\n  397              '4M',\n  398:             'resetmethod_menu',\n  399              ],\n  400          'desc': [ 'Product page: http://www.espert.co', ],\n  ...\n  407              },\n  408          'macro': [\n  409:             'resetmethod_nodemcu',\n  410              'flashmode_qio',\n  411              'flashfreq_40',\n  ...\n  441              },\n  442          'macro': [\n  443:             'resetmethod_nodemcu',\n  444              'flashmode_dio',\n  445              'flashfreq_40',\n  ...\n  450                    'It\\'s an open hardware design with an ESP-12E core and 4 MB of SPI flash.',\n  451                    '',\n  452:                   'According to the manufacturer, \"with a micro USB cable, you can connect NodeMCU devkit to your laptop and flash it without any trouble\". This is more or less true: the board comes with a CP2102 onboard USB to serial adapter which just works, well, the majority of the time. Sometimes flashing fails and you have to reset the board by holding down FLASH +',\n  453                    'RST, then releasing FLASH, then releasing RST. This forces the CP2102 device to power cycle and to be re-numbered by Linux.',\n  454                    '',\n  ...\n  466              },\n  467          'macro': [\n  468:             'resetmethod_ck',\n  469              'flashmode_qio',\n  470              'flashfreq_40',\n  ...\n  477                    'The board is shipped for FLASH operation mode, with jumpers TD0JP=0, IO0JP=1, IO2JP=1.',\n  478                    '',\n  479:                   'Since jumper IO0JP is tied to GPIO0, which is PIN 21, you\\'ll have to ground it before programming with a USB to serial adapter and reset the board by power cycling it.',\n  480                    '',\n  481                    'UART pins for programming and serial I/O are GPIO1 (TXD, pin 3) and GPIO3 (RXD, pin 4).',\n  ...\n  491              },\n  492          'macro': [\n  493:             'resetmethod_ck',\n  494              'flashmode_qio',\n  495              'flashfreq_40',\n  ...\n  505              },\n  506          'macro': [\n  507:             'resetmethod_nodemcu',\n  508              'flashmode_dio',\n  509              'flashfreq_40',\n  ...\n  518              },\n  519          'macro': [\n  520:             'resetmethod_ck',\n  521              'flashmode_qio',\n  522              'flashfreq_40',\n  ...\n  533              },\n  534          'macro': [\n  535:             'resetmethod_nodemcu',\n  536              'flashmode_dio',\n  537              'flashfreq_40',\n  ...\n  548              },\n  549          'macro': [\n  550:             'resetmethod_nodemcu',\n  551              'flashmode_dio',\n  552              'flashfreq_40',\n  ...\n  563              },\n  564          'macro': [\n  565:             'resetmethod_nodemcu',\n  566              'flashmode_dout',\n  567              'flashfreq_40',\n  ...\n  601              },\n  602          'macro': [\n  603:             'resetmethod_nodemcu',\n  604              'flashmode_dio',\n  605              'flashfreq_40',\n  ...\n  616              },\n  617          'macro': [\n  618:             'resetmethod_menu',\n  619              'flashmode_qio',\n  620              'flashfreq_40',\n  ...\n  635              },\n  636          'macro': [\n  637:             'resetmethod_nodemcu',\n  638              'flashmode_qio',\n  639              'flashfreq_40',\n  ...\n  676              },\n  677          'macro': [\n  678:             'resetmethod_nodemcu',\n  679              'flashmode_qio',\n  680              'flashfreq_menu',\n  681              '1M',\n  682              ],\n  683:         'desc': [ 'WifInfo integrates the ESP-12 or ESP-07+Ext antenna module with a 3.3v regulator and the hardware to be able to measure French telemetry issue from ERDF powering meter serial output. It has a USB connector for powering, an RGB WS2812 Led, 4 pins I2C connector to fit OLED or sensor, and two buttons + FTDI connector and auto reset feature.',\n  684                    '',\n  685                    'For more information, please see WifInfo related `blog <http://hallard.me/category/wifinfo/>`__ entries, `github <https://github.com/hallard/WifInfo>`__ and `community <https://community.hallard.me/category/16/wifinfo>`__ forum.',\n  ...\n  704              },\n  705          'macro': [\n  706:             'resetmethod_ck',\n  707              'flashmode_qio',\n  708              'flashfreq_40',\n  ...\n  719              },\n  720          'macro': [\n  721:             'resetmethod_nodemcu',\n  722              'flashmode_dio',\n  723              'flashfreq_80',\n  ...\n  743              },\n  744          'macro': [\n  745:             'resetmethod_none',\n  746              'flashmode_dio',\n  747              'flashfreq_40',\n  ...\n  763              },\n  764          'macro': [\n  765:             'resetmethod_nodemcu',\n  766              'flashmode_dio',\n  767              'flashfreq_40',\n  ...\n  778              },\n  779          'macro': [\n  780:             'resetmethod_nodemcu',\n  781              'flashfreq_menu',\n  782              'flashmode_menu',\n  ...\n  792              },\n  793          'macro': [\n  794:             'resetmethod_nodemcu',\n  795              'flashmode_qio',\n  796              'flashfreq_40',\n  ...\n  863          ]),\n  864  \n  865:     ####################### menu.resetmethod\n  866  \n  867:     'resetmethod_menu': collections.OrderedDict([\n  868:         ( '.menu.ResetMethod.ck', 'ck' ),\n  869:         ( '.menu.ResetMethod.ck.upload.resetmethod', 'ck' ),\n  870:         ( '.menu.ResetMethod.nodemcu', 'nodemcu' ),\n  871:         ( '.menu.ResetMethod.nodemcu.upload.resetmethod', 'nodemcu' ),\n  872          ]),\n  873  \n  874:     'resetmethod_menu_extra': collections.OrderedDict([\n  875:         ( '.menu.ResetMethod.none', 'none' ),\n  876:         ( '.menu.ResetMethod.none.upload.resetmethod', 'none' ),\n  877:         ( '.menu.ResetMethod.dtrset', 'dtrset' ),\n  878:         ( '.menu.ResetMethod.dtrset.upload.resetmethod', 'dtrset' ),\n  879          ]),\n  880  \n  881:     ####################### upload.resetmethod\n  882  \n  883:     'resetmethod_ck': collections.OrderedDict([\n  884:         ( '.upload.resetmethod', 'ck' ),\n  885          ]),\n  886  \n  887:     'resetmethod_nodemcu': collections.OrderedDict([\n  888:         ( '.upload.resetmethod', 'nodemcu' ),\n  889          ]),\n  890      \n  891:     'resetmethod_none': collections.OrderedDict([\n  892:         ( '.upload.resetmethod', 'none' ),\n  893          ]),\n  894  \n  895:     'resetmethod_dtrset': collections.OrderedDict([\n  896:         ( '.upload.resetmethod', 'dtrset' ),\n  897          ]),\n  898      \n  ...\n 1230      print 'menu.FlashMode=Flash Mode'\n 1231      print 'menu.FlashFreq=Flash Frequency'\n 1232:     print 'menu.ResetMethod=Reset Method'\n 1233      print 'menu.ESPModule=Module'\n 1234      print 'menu.Debug=Debug port'\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/build.py:\n   51              'UploadSpeed=921600,' \\\n   52              'FlashSize={flash_size},' \\\n   53:             'ResetMethod=nodemcu'.format(**vars(args))\n   54      if args.debug_port and args.debug_level:\n   55          cmd += 'Debug={debug_port},DebugLevel={debug_level}'.format(**vars(args))\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/bearssl/bearssl_aead.h:\n   83   *     indirectly.\n   84   *\n   85:  *   - `br_xxx_reset()`\n   86   *\n   87   *     Start a new AEAD computation. The nonce value is provided as\n   ..\n  144   * following:\n  145   *\n  146:  *   - `reset`\n  147   *\n  148:  *     Pointer to the reset function, that allows starting a new\n  149   *     computation.\n  150   *\n  ...\n  188  \n  189  \t/**\n  190: \t * \\brief Reset an AEAD context.\n  191  \t *\n  192: \t * This function resets an already initialised AEAD context for\n  193  \t * a new computation run. Implementations and keys are\n  194  \t * conserved. This function can be called at any time; it\n  ...\n  205  \t * \\param len   AEAD nonce length (in bytes).\n  206  \t */\n  207: \tvoid (*reset)(const br_aead_class **cc, const void *iv, size_t len);\n  208  \n  209  \t/**\n  ...\n  259  \t * on the AEAD algorithm; it is written in the provided `tag`\n  260  \t * buffer. This call terminates the AEAD run: no data may be\n  261: \t * processed with that AEAD context afterwards, until `reset()`\n  262  \t * is called to initiate a new AEAD run.\n  263  \t *\n  ...\n  378   * in the GCM context.\n  379   *\n  380:  * After this function has been called, the `br_gcm_reset()` function must\n  381   * be called, to provide the IV for GCM computation.\n  382   *\n  ...\n  389  \n  390  /**\n  391:  * \\brief Reset a GCM context.\n  392   *\n  393:  * This function resets an already initialised GCM context for a new\n  394   * computation run. Implementations and keys are conserved. This function\n  395   * can be called at any time; it cancels any ongoing GCM computation that\n  ...\n  405   * \\param len   GCM nonce length (in bytes).\n  406   */\n  407: void br_gcm_reset(br_gcm_context *ctx, const void *iv, size_t len);\n  408  \n  409  /**\n  ...\n  458   * is written in the provided `tag` buffer. This call terminates the\n  459   * GCM run: no data may be processed with that GCM context afterwards,\n  460:  * until `br_gcm_reset()` is called to initiate a new GCM run.\n  461   *\n  462   * The tag value must normally be sent along with the encrypted data.\n  ...\n  505   * The tag is written in the provided `tag` buffer. This call terminates\n  506   * the GCM run: no data may be processed with that GCM context\n  507:  * afterwards, until `br_gcm_reset()` is called to initiate a new GCM\n  508   * run.\n  509   *\n  ...\n  615   * the provided context. The parameters are linked in the EAX context.\n  616   *\n  617:  * After this function has been called, the `br_eax_reset()` function must\n  618   * be called, to provide the nonce for EAX computation.\n  619   *\n  ...\n  628   * This function precomputes key-dependent data, and stores it in the\n  629   * provided `st` structure. This structure should then be used with\n  630:  * `br_eax_reset_pre_aad()`, or updated with `br_eax_get_aad_mac()`\n  631:  * and then used with `br_eax_reset_post_aad()`.\n  632   *\n  633   * The EAX context structure is unmodified by this call.\n  ...\n  639  \n  640  /**\n  641:  * \\brief Reset an EAX context.\n  642   *\n  643:  * This function resets an already initialised EAX context for a new\n  644   * computation run. Implementations and keys are conserved. This function\n  645   * can be called at any time; it cancels any ongoing EAX computation that\n  ...\n  656   * \\param len     EAX nonce length (in bytes).\n  657   */\n  658: void br_eax_reset(br_eax_context *ctx, const void *nonce, size_t len);\n  659  \n  660  /**\n  661:  * \\brief Reset an EAX context with a pre-AAD captured state.\n  662   *\n  663:  * This function is an alternative to `br_eax_reset()`, that reuses a\n  664   * previously captured state structure for lower per-message overhead.\n  665   * The state should have been populated with `br_eax_capture_state()`\n  ...\n  673   * After injection of the AAD and call to `br_eax_flip()`, at least\n  674   * one message byte must be provided. Empty messages are not supported\n  675:  * with this reset mode.\n  676   *\n  677   * \\param ctx     EAX context structure.\n  ...\n  680   * \\param len     EAX nonce length (in bytes).\n  681   */\n  682: void br_eax_reset_pre_aad(br_eax_context *ctx, const br_eax_state *st,\n  683  \tconst void *nonce, size_t len);\n  684  \n  685  /**\n  686:  * \\brief Reset an EAX context with a post-AAD captured state.\n  687   *\n  688:  * This function is an alternative to `br_eax_reset()`, that reuses a\n  689   * previously captured state structure for lower per-message overhead.\n  690   * The state should have been populated with `br_eax_capture_state()`\n  ...\n  694   * `br_eax_flip()` function MUST NOT be called. At least one byte of\n  695   * message data MUST be provided with `br_eax_run()`; empty messages\n  696:  * are not supported with this reset mode.\n  697   *\n  698   * \\param ctx     EAX context structure.\n  ...\n  701   * \\param len     EAX nonce length (in bytes).\n  702   */\n  703: void br_eax_reset_post_aad(br_eax_context *ctx, const br_eax_state *st,\n  704  \tconst void *nonce, size_t len);\n  705  \n  ...\n  737   * on the secret key and the additional data itself, but not on the\n  738   * nonce. The updated state `st` is meant to be used as parameter for a\n  739:  * further `br_eax_reset_post_aad()` call.\n  740   *\n  741   * \\param ctx   EAX context structure.\n  ...\n  771   * is written in the provided `tag` buffer. This call terminates the\n  772   * EAX run: no data may be processed with that EAX context afterwards,\n  773:  * until `br_eax_reset()` is called to initiate a new EAX run.\n  774   *\n  775   * The tag value must normally be sent along with the encrypted data.\n  ...\n  818   * The tag is written in the provided `tag` buffer. This call terminates\n  819   * the EAX run: no data may be processed with that EAX context\n  820:  * afterwards, until `br_eax_reset()` is called to initiate a new EAX\n  821   * run.\n  822   *\n  ...\n  914   * the provided context. The parameters are linked in the CCM context.\n  915   *\n  916:  * After this function has been called, the `br_ccm_reset()` function must\n  917   * be called, to provide the nonce for CCM computation.\n  918   *\n  ...\n  923  \n  924  /**\n  925:  * \\brief Reset a CCM context.\n  926   *\n  927:  * This function resets an already initialised CCM context for a new\n  928   * computation run. Implementations and keys are conserved. This function\n  929   * can be called at any time; it cancels any ongoing CCM computation that\n  ...\n  963   * \\return  1 on success, 0 on error.\n  964   */\n  965: int br_ccm_reset(br_ccm_context *ctx, const void *nonce, size_t nonce_len,\n  966  \tuint64_t aad_len, uint64_t data_len, size_t tag_len);\n  967  \n  ...\n  973   * Additional data can be injected in several chunks of arbitrary length,\n  974   * but the total amount MUST exactly match the value which was provided\n  975:  * to `br_ccm_reset()`.\n  976   *\n  977   * \\param ctx    CCM context structure.\n  ...\n 1003   * Data may be provided in several chunks of arbitrary length, provided\n 1004   * that the total length exactly matches the length provided to the\n 1005:  * `br_ccm_reset()` call.\n 1006   *\n 1007   * \\param ctx       CCM context structure.\n ....\n 1018   * run: all data must have been injected with `br_ccm_run()` (in zero,\n 1019   * one or more successive calls). After this function has been called,\n 1020:  * no more data can br processed; a `br_ccm_reset()` call is required\n 1021   * to start a new message.\n 1022   *\n 1023   * The tag length was provided upon context initialisation (last call\n 1024:  * to `br_ccm_reset()`); it is returned by this function.\n 1025   *\n 1026   * The tag value must normally be sent along with the encrypted data.\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/bearssl/bearssl_hash.h:\n   81   *\n   82   *     Initialise the provided context. Previous contents of the structure\n   83:  *     are ignored. This calls resets the context to the start of a new\n   84   *     hash computation; it also sets the first field of the context\n   85   *     structure (called `vtable`) to a pointer to the statically\n   ..\n  402   * \\brief MD5 context initialisation.\n  403   *\n  404:  * This function initialises or resets a context for a new MD5\n  405   * computation. It also sets the vtable pointer.\n  406   *\n  ...\n  426   *\n  427   * The MD5 output for the concatenation of all bytes injected in the\n  428:  * provided context since the last initialisation or reset call, is\n  429   * computed and written in the buffer pointed to by `out`. The context\n  430   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  441   * The running state for MD5 (output of the last internal block\n  442   * processing) is written in the buffer pointed to by `out`. The\n  443:  * number of bytes injected since the last initialisation or reset\n  444   * call is returned. The context is not modified.\n  445   *\n  ...\n  497   * \\brief SHA-1 context initialisation.\n  498   *\n  499:  * This function initialises or resets a context for a new SHA-1\n  500   * computation. It also sets the vtable pointer.\n  501   *\n  ...\n  521   *\n  522   * The SHA-1 output for the concatenation of all bytes injected in the\n  523:  * provided context since the last initialisation or reset call, is\n  524   * computed and written in the buffer pointed to by `out`. The context\n  525   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  536   * The running state for SHA-1 (output of the last internal block\n  537   * processing) is written in the buffer pointed to by `out`. The\n  538:  * number of bytes injected since the last initialisation or reset\n  539   * call is returned. The context is not modified.\n  540   *\n  ...\n  592   * \\brief SHA-224 context initialisation.\n  593   *\n  594:  * This function initialises or resets a context for a new SHA-224\n  595   * computation. It also sets the vtable pointer.\n  596   *\n  ...\n  616   *\n  617   * The SHA-224 output for the concatenation of all bytes injected in the\n  618:  * provided context since the last initialisation or reset call, is\n  619   * computed and written in the buffer pointed to by `out`. The context\n  620   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  631   * The running state for SHA-224 (output of the last internal block\n  632   * processing) is written in the buffer pointed to by `out`. The\n  633:  * number of bytes injected since the last initialisation or reset\n  634   * call is returned. The context is not modified.\n  635   *\n  ...\n  687   * \\brief SHA-256 context initialisation.\n  688   *\n  689:  * This function initialises or resets a context for a new SHA-256\n  690   * computation. It also sets the vtable pointer.\n  691   *\n  ...\n  715   *\n  716   * The SHA-256 output for the concatenation of all bytes injected in the\n  717:  * provided context since the last initialisation or reset call, is\n  718   * computed and written in the buffer pointed to by `out`. The context\n  719   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  731   * The running state for SHA-256 (output of the last internal block\n  732   * processing) is written in the buffer pointed to by `out`. The\n  733:  * number of bytes injected since the last initialisation or reset\n  734   * call is returned. The context is not modified.\n  735   *\n  ...\n  795   * \\brief SHA-384 context initialisation.\n  796   *\n  797:  * This function initialises or resets a context for a new SHA-384\n  798   * computation. It also sets the vtable pointer.\n  799   *\n  ...\n  819   *\n  820   * The SHA-384 output for the concatenation of all bytes injected in the\n  821:  * provided context since the last initialisation or reset call, is\n  822   * computed and written in the buffer pointed to by `out`. The context\n  823   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  834   * The running state for SHA-384 (output of the last internal block\n  835   * processing) is written in the buffer pointed to by `out`. The\n  836:  * number of bytes injected since the last initialisation or reset\n  837   * call is returned. The context is not modified.\n  838   *\n  ...\n  890   * \\brief SHA-512 context initialisation.\n  891   *\n  892:  * This function initialises or resets a context for a new SHA-512\n  893   * computation. It also sets the vtable pointer.\n  894   *\n  ...\n  918   *\n  919   * The SHA-512 output for the concatenation of all bytes injected in the\n  920:  * provided context since the last initialisation or reset call, is\n  921   * computed and written in the buffer pointed to by `out`. The context\n  922   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  934   * The running state for SHA-512 (output of the last internal block\n  935   * processing) is written in the buffer pointed to by `out`. The\n  936:  * number of bytes injected since the last initialisation or reset\n  937   * call is returned. The context is not modified.\n  938   *\n  ...\n 1009   * \\brief MD5+SHA-1 context initialisation.\n 1010   *\n 1011:  * This function initialises or resets a context for a new SHA-512\n 1012   * computation. It also sets the vtable pointer.\n 1013   *\n ....\n 1033   *\n 1034   * The MD5+SHA-1 output for the concatenation of all bytes injected in the\n 1035:  * provided context since the last initialisation or reset call, is\n 1036   * computed and written in the buffer pointed to by `out`. The context\n 1037   * itself is not modified, so extra bytes may be injected afterwards\n ....\n 1048   * The running state for MD5+SHA-1 (output of the last internal block\n 1049   * processing) is written in the buffer pointed to by `out`. The\n 1050:  * number of bytes injected since the last initialisation or reset\n 1051   * call is returned. The context is not modified.\n 1052   *\n ....\n 1168  \n 1169  /**\n 1170:  * \\brief Reset a multi-hasher context.\n 1171   *\n 1172   * This function prepares the context for a new hashing computation,\n ....\n 1195   *\n 1196   * The hash output for the concatenation of all bytes injected in the\n 1197:  * provided context since the last initialisation or reset call, is\n 1198   * computed and written in the buffer pointed to by `dst`. The hash\n 1199   * function to use is identified by `id` and must be one of the standard\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/bearssl/bearssl_ssl.h:\n  743  \t/*\n  744  \t * The error code. When non-zero, then the state is \"failed\" and\n  745: \t * no I/O may occur until reset.\n  746  \t */\n  747  \tint err;\n  ...\n  940  \t/*\n  941  \t * Multi-hasher for the handshake messages. The handshake handler\n  942: \t * is responsible for resetting it when appropriate.\n  943  \t */\n  944  \tbr_multihash_context mhash;\n  ...\n 1628   * \\brief Set the I/O buffer for the SSL engine.\n 1629   *\n 1630:  * Once this call has been made, `br_ssl_client_reset()` or\n 1631:  * `br_ssl_server_reset()` MUST be called before using the context.\n 1632   *\n 1633   * The provided buffer will be used as long as the engine context is\n ....\n 1661   * \\brief Set the I/O buffers for the SSL engine.\n 1662   *\n 1663:  * Once this call has been made, `br_ssl_client_reset()` or\n 1664:  * `br_ssl_server_reset()` MUST be called before using the context.\n 1665   *\n 1666   * This function is similar to `br_ssl_engine_set_buffer()`, except\n ....\n 1706   * asymmetric private key that you also store on the system) AND a\n 1707   * non-repeating value (e.g. current time, provided that the local clock\n 1708:  * cannot be reset or altered by the attacker).\n 1709   *\n 1710   * \\param cc     SSL engine context.\n ....\n 1718   * \\brief Get the \"server name\" in this engine.\n 1719   *\n 1720:  * For clients, this is the name provided with `br_ssl_client_reset()`;\n 1721   * for servers, this is the name received from the client as part of the\n 1722   * ClientHello message. If there is no such name (e.g. the client did\n ....\n 1819   *   - `BR_SSL_CLOSED`\n 1820   *\n 1821:  *     Engine is finished, no more I/O (until next reset).\n 1822   *\n 1823   *   - `BR_SSL_SENDREC`\n ....\n 1871   *\n 1872   * The error indicator is `BR_ERR_OK` (0) if no error was encountered\n 1873:  * since the last call to `br_ssl_client_reset()` or\n 1874:  * `br_ssl_server_reset()`. Other status values are \"sticky\": they\n 1875   * remain set, and prevent all I/O activity, until cleared. Only the\n 1876:  * reset calls clear the error indicator.\n 1877   *\n 1878   * \\param cc   SSL engine context.\n ....\n 2663  \n 2664  /**\n 2665:  * \\brief Prepare or reset a client context for a new connection.\n 2666   *\n 2667   * The `server_name` parameter is used to fill the SNI extension; the\n ....\n 2692   * \\return  0 on failure, 1 on success.\n 2693   */\n 2694: int br_ssl_client_reset(br_ssl_client_context *cc,\n 2695  \tconst char *server_name, int resume_session);\n 2696  \n ....\n 3758  \n 3759  /**\n 3760:  * \\brief Prepare or reset a server context for handling an incoming client.\n 3761   *\n 3762   * \\param cc   server context.\n 3763   * \\return  1 on success, 0 on error.\n 3764   */\n 3765: int br_ssl_server_reset(br_ssl_server_context *cc);\n 3766  \n 3767  /* ===================================================================== */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/espconn.h:\n   46  \n   47  #define ESPCONN_ABRT       -8    /* Connection aborted.      */\n   48: #define ESPCONN_RST        -9    /* Connection reset.        */\n   49  #define ESPCONN_CLSD       -10   /* Connection closed.       */\n   50  #define ESPCONN_CONN       -11   /* Not connected.           */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/i2s_reg.h:\n   26  #define I2S_RECE_SLAVE_MOD (BIT(5))\n   27  #define I2S_TRANS_SLAVE_MOD (BIT(4))\n   28: #define I2S_I2S_RX_FIFO_RESET (BIT(3))\n   29: #define I2S_I2S_TX_FIFO_RESET (BIT(2))\n   30: #define I2S_I2S_RX_RESET (BIT(1))\n   31: #define I2S_I2S_TX_RESET (BIT(0))\n   32: #define I2S_I2S_RESET_MASK 0xf\n   33  \n   34  #define I2SINT_RAW (DR_REG_I2S_BASE + 0x000c)\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/json/jsontree.h:\n  127  void jsontree_setup(struct jsontree_context *js_ctx,\n  128                      struct jsontree_value *root, int (* putchar)(int));\n  129: void jsontree_reset(struct jsontree_context *js_ctx);\n  130  \n  131  const char *jsontree_path_name(const struct jsontree_context *js_ctx,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/simple_pair.h:\n   54  void simple_pair_deinit(void);\n   55  \n   56: int simple_pair_state_reset(void);\n   57  int simple_pair_ap_enter_announce_mode(void);\n   58  int simple_pair_sta_enter_scan_mode(void);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/user_interface.h:\n   49  enum rst_reason {\n   50      REASON_DEFAULT_RST      = 0,    /* normal startup by power on */\n   51:     REASON_WDT_RST          = 1,    /* hardware watch dog reset */\n   52:     REASON_EXCEPTION_RST    = 2,    /* exception reset, GPIO status won’t change */\n   53:     REASON_SOFT_WDT_RST     = 3,    /* software watch dog reset, GPIO status won’t change */\n   54      REASON_SOFT_RESTART     = 4,    /* software restart ,system_restart , GPIO status won’t change */\n   55      REASON_DEEP_SLEEP_AWAKE = 5,    /* wake up from deep-sleep */\n   56:     REASON_EXT_SYS_RST      = 6     /* external system reset */\n   57  };\n   58  \n   ..\n  382  uint32 wifi_softap_get_dhcps_lease_time(void);\n  383  bool wifi_softap_set_dhcps_lease_time(uint32 minute);\n  384: bool wifi_softap_reset_dhcps_lease_time(void);\n  385  \n  386  enum dhcp_status wifi_softap_dhcps_status(void);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ld/eagle.app.v6.common.ld.h:\n   20  EXTERN(_UserExceptionVector)\n   21  EXTERN(core_version)\n   22: PROVIDE(_memmap_vecbase_reset = 0x40000000);\n   23  /* Various memory-map dependent cache attribute settings: */\n   24  _memmap_cacheattr_wb_base = 0x00000110;\n   ..\n   37  _memmap_cacheattr_wt_allvalid = 0x22222112;\n   38  _memmap_cacheattr_bp_allvalid = 0x22222222;\n   39: PROVIDE(_memmap_cacheattr_reset = _memmap_cacheattr_wb_trapnull);\n   40  \n   41  SECTIONS\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ld/eagle.rom.addr.v6.ld:\n   46  PROVIDE ( _KernelExceptionVector = 0x40000030 );\n   47  PROVIDE ( _NMIExceptionVector = 0x40000020 );\n   48: PROVIDE ( _ResetHandler = 0x400000a4 );\n   49: PROVIDE ( _ResetVector = 0x40000080 );\n   50  PROVIDE ( _UserExceptionVector = 0x40000050 );\n   51  PROVIDE ( __adddf3 = 0x4000c538 );\n   ..\n  113  PROVIDE ( eprintf_to_host = 0x40001d48 );\n  114  PROVIDE ( est_get_printf_buf_remain_len = 0x40002494 );\n  115: PROVIDE ( est_reset_printf_buf_len = 0x4000249c );\n  116  PROVIDE ( ets_bzero = 0x40002ae8 );\n  117  PROVIDE ( ets_char2xdigit = 0x40002b74 );\n  ...\n  244  PROVIDE ( rom_pbus_xpd_tx_on = 0x40007740 );\n  245  PROVIDE ( rom_pbus_xpd_tx_on__low_gain = 0x400077a0 );\n  246: PROVIDE ( rom_phy_reset_req = 0x40007804 );\n  247  PROVIDE ( rom_restart_cal = 0x4000781c );\n  248  PROVIDE ( rom_rfcal_pwrctrl = 0x40007eb4 );\n  ...\n  253  PROVIDE ( rom_rfcal_txiq_cover = 0x400088b8 );\n  254  PROVIDE ( rom_rfcal_txiq_set_reg = 0x40008a70 );\n  255: PROVIDE ( rom_rfpll_reset = 0x40007868 );\n  256  PROVIDE ( rom_rfpll_set_freq = 0x40007968 );\n  257  PROVIDE ( rom_rxiq_cover_mg_mp = 0x40008b6c );\n  ...\n  275  PROVIDE ( roundup2 = 0x400031b4 );\n  276  PROVIDE ( rtc_enter_sleep = 0x40002870 );\n  277: PROVIDE ( rtc_get_reset_reason = 0x400025e0 );\n  278  PROVIDE ( rtc_intr_handler = 0x400029ec );\n  279  PROVIDE ( rtc_set_sleep_mode = 0x40002668 );\n  ...\n  310  PROVIDE ( slc_set_host_io_max_window = 0x40006068 );\n  311  PROVIDE ( slc_to_host_chain_recycle = 0x40005f10 );\n  312: PROVIDE ( software_reset = 0x4000264c );\n  313  PROVIDE ( spi_flash_attach = 0x40004644 );\n  314  PROVIDE ( srand = 0x400005f0 );\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lib/compare/sdk-compare-libs:\n   66  \tgit clone $sdk \"$tmp\" 1>&2\n   67  \tcd \"$tmp\"\n   68: \tgit reset --hard 1>&2\n   69  \n   70  \tcorelibs=$(cd \"$core/tools/sdk/lib\"; ls *.a)\n   ..\n   81  \n   82  \t\t\tfor i in $commits; do\n   83: \t\t\t\tgit reset --hard 1>&2\n   84  \t\t\t\tgit checkout $i 1>&2\n   85  \t\t\t\t\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/libc/xtensa-lx106-elf/include/spawn.h:\n   40  typedef struct __posix_spawn_file_actions\t*posix_spawn_file_actions_t;\n   41  \n   42: #define POSIX_SPAWN_RESETIDS\t\t0x01\n   43  #define POSIX_SPAWN_SETPGROUP\t\t0x02\n   44  #define POSIX_SPAWN_SETSCHEDPARAM\t0x04\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/libc/xtensa-lx106-elf/include/sys/errno.h:\n   71  #define\tEL2NSYNC 38\t/* Level 2 not synchronized */\n   72  #define\tEL3HLT 39\t/* Level 3 halted */\n   73: #define\tEL3RST 40\t/* Level 3 reset */\n   74  #define\tELNRNG 41\t/* Link number out of range */\n   75  #define\tEUNATCH 42\t/* Protocol driver not attached */\n   ..\n  131  #define EOPNOTSUPP 95\t/* Operation not supported on socket */\n  132  #define EPFNOSUPPORT 96 /* Protocol family not supported */\n  133: #define ECONNRESET 104  /* Connection reset by peer */\n  134  #define ENOBUFS 105\t/* No buffer space available */\n  135  #define EAFNOSUPPORT 106 /* Address family not supported by protocol family */\n  ...\n  157  #endif\n  158  #define EADDRNOTAVAIL 125\t/* Address not available */\n  159: #define ENETRESET 126\t\t/* Connection aborted by network */\n  160  #define EISCONN 127\t\t/* Socket is already connected */\n  161  #define ENOTCONN 128\t\t/* Socket is not connected */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/libc/xtensa-lx106-elf/include/sys/signal.h:\n  269  #define\tSIGINT\t2\t/* interrupt */\n  270  #define\tSIGQUIT\t3\t/* quit */\n  271: #define\tSIGILL\t4\t/* illegal instruction (not reset when caught) */\n  272: #define\tSIGTRAP\t5\t/* trace trap (not reset when caught) */\n  273  #define\tSIGIOT\t6\t/* IOT instruction */\n  274  #define\tSIGABRT 6\t/* used by abort, replace SIGIOT in the future */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/libc/xtensa-lx106-elf/include/sys/unistd.h:\n  205  extern int optind, opterr, optopt;\n  206  int\t getopt(int, char * const [], const char *);\n  207: extern int optreset;\t\t\t/* getopt(3) external variable */\n  208  #endif\n  209  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/libc/xtensa-lx106-elf/include/xtensa/config/core-isa.h:\n   76  #define XCHAL_HAVE_S32C1I\t\t0\t/* S32C1I instruction */\n   77  #define XCHAL_HAVE_SPECULATION\t\t0\t/* speculation */\n   78: #define XCHAL_HAVE_FULL_RESET\t\t1\t/* all regs/state reset */\n   79  #define XCHAL_NUM_CONTEXTS\t\t1\t/* */\n   80  #define XCHAL_NUM_MISC_REGS\t\t0\t/* num of scratch regs (0..4) */\n   ..\n  388  #define XCHAL_HAVE_VECTOR_SELECT\t1\t/* relocatable vectors */\n  389  #define XCHAL_HAVE_VECBASE\t\t1\t/* relocatable vectors */\n  390: #define XCHAL_VECBASE_RESET_VADDR\t0x40000000  /* VECBASE reset value */\n  391: #define XCHAL_VECBASE_RESET_PADDR\t0x40000000\n  392: #define XCHAL_RESET_VECBASE_OVERLAP\t0\n  393  \n  394: #define XCHAL_RESET_VECTOR0_VADDR\t0x50000000\n  395: #define XCHAL_RESET_VECTOR0_PADDR\t0x50000000\n  396: #define XCHAL_RESET_VECTOR1_VADDR\t0x40000080\n  397: #define XCHAL_RESET_VECTOR1_PADDR\t0x40000080\n  398: #define XCHAL_RESET_VECTOR_VADDR\t0x50000000\n  399: #define XCHAL_RESET_VECTOR_PADDR\t0x50000000\n  400  #define XCHAL_USER_VECOFS\t\t0x00000050\n  401  #define XCHAL_USER_VECTOR_VADDR\t\t0x40000050\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/app/espconn.h:\n   27  \n   28  #define ESPCONN_ABRT       -8    /* Connection aborted.      */\n   29: #define ESPCONN_RST        -9    /* Connection reset.        */\n   30  #define ESPCONN_CLSD       -10   /* Connection closed.       */\n   31  #define ESPCONN_CONN       -11   /* Not connected.           */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/app/espconn_buf.h:\n   30  size_t ringbuf_buffer_size(const struct ringbuf_t *rb);\n   31  \n   32: void ringbuf_reset(ringbuf_t rb);\n   33  \n   34  void ringbuf_free(ringbuf_t *rb);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/arch.h:\n  123  #define  EL2NSYNC     45  /* Level 2 not synchronized */\n  124  #define  EL3HLT       46  /* Level 3 halted */\n  125: #define  EL3RST       47  /* Level 3 reset */\n  126  #define  ELNRNG       48  /* Link number out of range */\n  127  #define  EUNATCH      49  /* Protocol driver not attached */\n  ...\n  180  #define  ENETDOWN       100  /* Network is down */\n  181  #define  ENETUNREACH    101  /* Network is unreachable */\n  182: #define  ENETRESET      102  /* Network dropped connection because of reset */\n  183  #define  ECONNABORTED   103  /* Software caused connection abort */\n  184: #define  ECONNRESET     104  /* Connection reset by peer */\n  185  #define  ENOBUFS        105  /* No buffer space available */\n  186  #define  EISCONN        106  /* Transport endpoint is already connected */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/err.h:\n   62  \n   63  #define ERR_ABRT       -8    /* Connection aborted.      */\n   64: #define ERR_RST        -9    /* Connection reset.        */\n   65  #define ERR_CLSD       -10   /* Connection closed.       */\n   66  #define ERR_CONN       -11   /* Not connected.           */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/snmp.h:\n  180  void snmp_inc_tcppassiveopens(void);\n  181  void snmp_inc_tcpattemptfails(void);\n  182: void snmp_inc_tcpestabresets(void);\n  183  void snmp_inc_tcpinsegs(void);\n  184  void snmp_inc_tcpoutsegs(void);\n  ...\n  312  #define snmp_inc_tcppassiveopens()\n  313  #define snmp_inc_tcpattemptfails()\n  314: #define snmp_inc_tcpestabresets()\n  315  #define snmp_inc_tcpinsegs()\n  316  #define snmp_inc_tcpoutsegs()\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/tcp.h:\n  107   * @param err Error code to indicate why the pcb has been closed\n  108   *            ERR_ABRT: aborted through tcp_abort or by a TCP timer\n  109:  *            ERR_RST: the connection was reset by the remote host\n  110   */\n  111  typedef void  (*tcp_err_fn)(void *arg, err_t err);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/include/lwip/tcp_impl.h:\n   66  /* Used within the TCP code only: */\n   67  struct tcp_pcb * tcp_alloc   (u8_t prio)ICACHE_FLASH_ATTR;\n   68: void             tcp_abandon (struct tcp_pcb *pcb, int reset)ICACHE_FLASH_ATTR;\n   69  err_t            tcp_send_empty_ack(struct tcp_pcb *pcb)ICACHE_FLASH_ATTR;\n   70  void             tcp_rexmit  (struct tcp_pcb *pcb)ICACHE_FLASH_ATTR;\n   ..\n  187  /** Flags used on input processing, not on pcb->flags\n  188  */\n  189: #define TF_RESET     (u8_t)0x08U   /* Connection was reset. */\n  190  #define TF_CLOSED    (u8_t)0x10U   /* Connection was sucessfully closed. */\n  191  #define TF_GOT_FIN   (u8_t)0x20U   /* Connection was closed by the remote end. */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/api/api_msg.c:\n  361    SYS_ARCH_UNPROTECT(lev);\n  362  \n  363:   /* reset conn->state now before waking up other threads */\n  364    old_state = conn->state;\n  365    conn->state = NETCONN_NONE;\n  ...\n  757      tcp_accept(conn->pcb.tcp, NULL);\n  758    } else {\n  759:     /* some callbacks have to be reset if tcp_close is not successful */\n  760      if (shut_rx) {\n  761        tcp_recv(conn->pcb.tcp, NULL);\n  ...\n  918  /**\n  919   * TCP callback function if a connection (opened by tcp_connect/do_connect) has\n  920:  * been established (or reset by the remote host).\n  921   *\n  922   * @see tcp.h (struct tcp_pcb.connected) for parameters and return values\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/api/err.c:\n   51             \"Operation would block.\", /* ERR_WOULDBLOCK -7  */\n   52             \"Connection aborted.\",    /* ERR_ABRT       -8  */\n   53:            \"Connection reset.\",      /* ERR_RST        -9  */\n   54             \"Connection closed.\",     /* ERR_CLSD       -10 */\n   55             \"Not connected.\",         /* ERR_CONN       -11 */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/api/sockets.c:\n  143    EWOULDBLOCK,   /* ERR_WOULDBLOCK -7      Operation would block.   */\n  144    ECONNABORTED,  /* ERR_ABRT       -8      Connection aborted.      */\n  145:   ECONNRESET,    /* ERR_RST        -9      Connection reset.        */\n  146    ESHUTDOWN,     /* ERR_CLSD       -10     Connection closed.       */\n  147    ENOTCONN,      /* ERR_CONN       -11     Not connected.           */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/app/dhcpserver.c:\n  968  }\n  969  \n  970: bool ICACHE_FLASH_ATTR wifi_softap_reset_dhcps_lease_time(void)\n  971  {\n  972      uint8 opmode = wifi_get_opmode();\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/app/espconn_buf.c:\n   30  \t\trb->buf = (uint8*)os_zalloc(rb->size);\n   31  \t\tif (rb->buf){\n   32: \t\t\tringbuf_reset(rb);\n   33  \t\t}else{\n   34  \t\t\tos_free(rb);\n   ..\n   44  }\n   45  \n   46: void ringbuf_reset(ringbuf_t rb)\n   47  {\n   48  \trb ->head = rb->tail = rb->buf;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/app/espconn_tcp.c:\n 1161   * FunctionName : espconn_server_poll\n 1162   * Description  : The poll function is called every 3nd second.\n 1163:  * If there has been no data sent (which resets the retries) in 3 seconds, close.\n 1164   * If the last portion of a file has not been sent in 3 seconds, close.\n 1165   *\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/dhcp.c:\n 1318   * Set the DHCP state of a DHCP client.\n 1319   *\n 1320:  * If the state changed, reset the number of tries.\n 1321   */\n 1322  static void ICACHE_FLASH_ATTR\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/netif.c:\n  142    LWIP_ASSERT(\"No init function given\", init != NULL);\n  143  \n  144:   /* reset new interface configuration state */\n  145    ip_addr_set_zero(&netif->ip_addr);\n  146    ip_addr_set_zero(&netif->netmask);\n  ...\n  272    /* this netif is default? */\n  273    if (netif_default == netif) {\n  274:     /* reset default netif */\n  275      netif_set_default(NULL);\n  276    }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/sntp.c:\n  282  \n  283  #if SNTP_RETRY_TIMEOUT_EXP\n  284: #define SNTP_RESET_RETRY_TIMEOUT() sntp_retry_timeout = SNTP_RETRY_TIMEOUT\n  285  /** Retry time, initialized with SNTP_RETRY_TIMEOUT and doubled with each retry. */\n  286  static u32_t sntp_retry_timeout;\n  287  #else /* SNTP_RETRY_TIMEOUT_EXP */\n  288: #define SNTP_RESET_RETRY_TIMEOUT()\n  289  #define sntp_retry_timeout SNTP_RETRY_TIMEOUT\n  290  #endif /* SNTP_RETRY_TIMEOUT_EXP */\n  ...\n  800        LWIP_DEBUGF(SNTP_DEBUG_STATE, (\"sntp_try_next_server: Sending request to server %\"U16_F\"\\n\",\n  801          (u16_t)sntp_current_server));\n  802:       /* new server: reset retry timeout */\n  803:       SNTP_RESET_RETRY_TIMEOUT();\n  804        /* instantly send a request to the next server */\n  805        sntp_request(NULL);\n  ...\n  881    pbuf_free(p);\n  882    if (err == ERR_OK) {\n  883:     /* Correct response, reset retry timeout */\n  884:     SNTP_RESET_RETRY_TIMEOUT();\n  885  \n  886      sntp_process(receive_timestamp);\n  ...\n 1017  \n 1018    if (sntp_pcb == NULL) {\n 1019:     SNTP_RESET_RETRY_TIMEOUT();\n 1020      sntp_pcb = udp_new();\n 1021      LWIP_ASSERT(\"Failed to allocate udp pcb for sntp client\", sntp_pcb != NULL);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/tcp.c:\n  218      err = tcp_send_fin(pcb);\n  219      if (err == ERR_OK) {\n  220:       snmp_inc_tcpestabresets();\n  221        pcb->state = FIN_WAIT_1;\n  222      }\n  ...\n  225      err = tcp_send_fin(pcb);\n  226      if (err == ERR_OK) {\n  227:       snmp_inc_tcpestabresets();\n  228        pcb->state = LAST_ACK;//����LAST_ACK�ȴ�ACK��ʱ\n  229      }\n  ...\n  336   *\n  337   * @param pcb the tcp_pcb to abort\n  338:  * @param reset boolean to indicate whether a reset should be sent\n  339   */\n  340  void\n  341: tcp_abandon(struct tcp_pcb *pcb, int reset)\n  342  {\n  343    u32_t seqno, ackno;\n  ...\n  381      }\n  382  #endif /* TCP_QUEUE_OOSEQ */\n  383:     if (reset) {\n  384        LWIP_DEBUGF(TCP_RST_DEBUG, (\"tcp_abandon: sending RST\\n\"));\n  385        tcp_rst(seqno, ackno, &local_ip, &remote_ip, local_port, remote_port);\n  ...\n  391  \n  392  /**\n  393:  * Aborts the connection by sending a RST (reset) segment to the remote\n  394   * host. The pcb is deallocated. This function never fails.\n  395   *\n  ...\n  779    u16_t eff_wnd;\n  780    u8_t pcb_remove;      /* flag if a PCB should be removed */\n  781:   u8_t pcb_reset;       /* flag if a RST should be sent when removing */\n  782    err_t err;\n  783  \n  ...\n  799  \n  800      pcb_remove = 0;\n  801:     pcb_reset = 0;\n  802  \n  803      if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {\n  ...\n  839            }\n  840  \n  841:           /* Reset the retransmission timer. */\n  842            pcb->rtime = 0;\n  843  \n  ...\n  886  \n  887          ++pcb_remove;\n  888:         ++pcb_reset;\n  889        }\n  890  #if LWIP_TCP_KEEPALIVE\n  ...\n  946        }\n  947  \n  948:       if (pcb_reset) {\n  949          tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,\n  950            pcb->local_port, pcb->remote_port);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/tcp_in.c:\n  342         and that the pcb has been freed. If so, we don't do anything. */\n  343      if (err != ERR_ABRT) {\n  344:       if (recv_flags & TF_RESET) {\n  345:         /* TF_RESET means that the connection was reset by the other\n  346             end. We then call the error callback to inform the\n  347             application that the connection is dead before we\n  ...\n  453    } else {\n  454  \n  455:     /* If no matching PCB was found, send a TCP RST (reset) to the\n  456         sender. */\n  457:     LWIP_DEBUGF(TCP_RST_DEBUG, (\"tcp_input: no PCB match found, resetting.\\n\"));\n  458      if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {\n  459        TCP_STATS_INC(tcp.proterr);//Э��������\n  ...\n  500      /* For incoming segments with the ACK flag set, respond with a\n  501         RST. */\n  502:     LWIP_DEBUGF(TCP_RST_DEBUG, (\"tcp_listen_input: ACK in LISTEN, sending reset\\n\"));\n  503      tcp_rst(ackno + 1, seqno + tcplen,\n  504        ip_current_dest_addr(), ip_current_src_addr(),\n  ...\n  643    /* Process incoming RST segments. */\n  644    if (flags & TCP_RST) {\n  645:     /* First, determine if the reset is acceptable. */\n  646      if (pcb->state == SYN_SENT) {\n  647        if (ackno == pcb->snd_nxt) {\n  ...\n  656  \n  657      if (acceptable) {\n  658:       LWIP_DEBUGF(TCP_INPUT_DEBUG, (\"tcp_process: Connection RESET\\n\"));\n  659        LWIP_ASSERT(\"tcp_input: pcb->state != CLOSED\", pcb->state != CLOSED);\n  660:       recv_flags |= TF_RESET;\n  661        pcb->flags &= ~TF_ACK_DELAY;\n  662        return ERR_RST;\n  663      } else {\n  664:       LWIP_DEBUGF(TCP_INPUT_DEBUG, (\"tcp_process: unacceptable reset seqno %\"U32_F\" rcv_nxt %\"U32_F\"\\n\",\n  665         seqno, pcb->rcv_nxt));\n  666:       LWIP_DEBUGF(TCP_DEBUG, (\"tcp_process: unacceptable reset seqno %\"U32_F\" rcv_nxt %\"U32_F\"\\n\",\n  667         seqno, pcb->rcv_nxt));\n  668        return ERR_OK;\n  ...\n  716  \n  717        /* If there's nothing left to acknowledge, stop the retransmit\n  718:          timer, otherwise reset it to start again */\n  719        if(pcb->unacked == NULL)\n  720          pcb->rtime = -1;\n  ...\n  970       * c) dupacks > 3: increase cwnd\n  971       *\n  972:      * If it only passes 1-3, should reset dupack counter (and add to\n  973       * stats, which we don't do in lwIP)\n  974       *\n  975:      * If it only passes 1, should reset dupack counter\n  976       *\n  977       */\n  ...\n 1005          }\n 1006        }\n 1007:       /* If Clause (1) or more is true, but not a duplicate ack, reset\n 1008         * count of consecutive duplicate acks */\n 1009        if (!found_dupack) {\n ....\n 1014  \n 1015        if (pcb->flags & TF_INFR) {\n 1016:         pcb->flags &= ~TF_INFR;// Reset the \"IN Fast Retransmit\" flag,since we are no longer in fast retransmit\n 1017:         pcb->cwnd = pcb->ssthresh;//Reset the congestion window to the  \"slow start threshold\".\n 1018        }\n 1019  \n 1020:       /* Reset the number of retransmissions. */\n 1021        pcb->nrtx = 0;\n 1022  \n 1023:       /* Reset the retransmission time-out. */\n 1024        pcb->rto = (pcb->sa >> 3) + pcb->sv;\n 1025  \n ....\n 1029        pcb->snd_buf += pcb->acked;\n 1030  \n 1031:       /* Reset the fast retransmit variables. */\n 1032        pcb->dupacks = 0;\n 1033        pcb->lastack = ackno;\n ....\n 1089  \n 1090        /* If there's nothing left to acknowledge, stop the retransmit\n 1091:          timer, otherwise reset it to start again */\n 1092        if(pcb->unacked == NULL)\t//����ݵȴ�ȷ��\n 1093          pcb->rtime = -1;\t\t\t//ֹͣ�ش���ʱ��\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/tcp_out.c:\n 1029  #if TCP_OVERSIZE\n 1030    if (pcb->unsent == NULL) {\n 1031:     /* last unsent has been removed, reset unsent_oversize */\n 1032      pcb->unsent_oversize = 0;\n 1033    }\n ....\n 1174  \n 1175  /**\n 1176:  * Send a TCP RESET packet (empty segment with RST flag set) either to\n 1177   * abort a connection or to show that there is no matching local connection\n 1178   * for a received segment.\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/core/udp.c:\n  884  udp_disconnect(struct udp_pcb *pcb)\n  885  {\n  886:   /* reset remote address association */\n  887    ip_addr_set_any(&pcb->remote_ip);\n  888    pcb->remote_port = 0;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip/src/netif/etharp.c:\n  233        }\n  234        else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {\n  235:         /* Reset state to stable, so that the next transmitted packet will\n  236             re-send an ARP request. */\n  237          arp_table[i].state = ETHARP_STATE_STABLE;\n  ...\n  496    /* update address */\n  497    ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);\n  498:   /* reset time stamp */\n  499    arp_table[i].ctime = 0;\n  500    /* this is where we will send out queued packets! */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-esp/lwip-esp.c:\n  390  {\n  391  \t// not implemented yet\n  392: \t// called at boot/reset\n  393  \t// annoying message to hide:\n  394  \t//STUB(espconn_init);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-lwip/esp-dhcpserver.c:\n  999  }\n 1000  \n 1001: bool ICACHE_FLASH_ATTR wifi_softap_reset_dhcps_lease_time(void)\n 1002  {\n 1003      uint8 opmode = wifi_get_opmode();\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-lwip/espconn_buf.c:\n   31  \t\trb->buf = (uint8*)os_zalloc(rb->size);\n   32  \t\tif (rb->buf){\n   33: \t\t\tringbuf_reset(rb);\n   34  \t\t}else{\n   35  \t\t\tos_free(rb);\n   ..\n   45  }\n   46  \n   47: void ringbuf_reset(ringbuf_t rb)\n   48  {\n   49  \trb ->head = rb->tail = rb->buf;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-lwip/espconn_tcp.c:\n 1167   * FunctionName : espconn_server_poll\n 1168   * Description  : The poll function is called every 3nd second.\n 1169:  * If there has been no data sent (which resets the retries) in 3 seconds, close.\n 1170   * If the last portion of a file has not been sent in 3 seconds, close.\n 1171   *\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-lwip/lwip-git.c:\n  299  static void netif_sta_status_callback (struct netif* netif)\n  300  {\n  301: \t// address can be set or reset/any (=0)\n  302  \n  303  \tuprint(DBG \"netif status callback:\\n\");\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-lwip/lwip/apps-esp/espconn.h:\n   27  \n   28  #define ESPCONN_ABRT       -8    /* Connection aborted.      */\n   29: #define ESPCONN_RST        -9    /* Connection reset.        */\n   30  #define ESPCONN_CLSD       -10   /* Connection closed.       */\n   31  #define ESPCONN_CONN       -11   /* Not connected.           */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/glue-lwip/lwip/apps-esp/espconn_buf.h:\n   30  size_t ringbuf_buffer_size(const struct ringbuf_t *rb);\n   31  \n   32: void ringbuf_reset(ringbuf_t rb);\n   33  \n   34  void ringbuf_free(ringbuf_t *rb);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/CHANGELOG:\n  549  \n  550    2016-03-16: Joel Cunningham\n  551:   * tcp_out.c: reset rto timer on fast retransmission\n  552  \n  553    2016-03-16: Deomid Ryabkov\n  ...\n 1159  \n 1160    2011-09-27: Simon Goldschmidt\n 1161:   * tcp_in.c, tcp_out.c: Reset pcb->unsent_oversize in 2 more places...\n 1162  \n 1163    2011-09-27: Simon Goldschmidt\n ....\n 1651  \n 1652    2010-06-12: Simon Goldschmidt\n 1653:   * dhcp.c: Fixed bug #30038: dhcp_network_changed doesn't reset AUTOIP coop\n 1654      state\n 1655  \n ....\n 1947  \n 1948    2009-12-02: Simon Goldschmidt\n 1949:   * tcp_in.c: Fixed bug #27904: TCP sends too many ACKs: delay resetting\n 1950      tcp_input_pcb until after calling the pcb's callbacks\n 1951  \n ....\n 2324    2009-03-26 Kieran Mansley\n 2325    * tcp.c, tcp_in.c, tcp.h: add tcp_abandon() to cope with dropping\n 2326:     connections where no reset required (bug #25622)\n 2327  \n 2328    * tcp_out.c: set TCP_ACK flag on keepalive and zero window probes \n ....\n 2353  \n 2354    2009-02-10 Simon Goldschmidt\n 2355:   * tcp.c: fixed bug #25467: Listen backlog is not reset on timeout in SYN_RCVD:\n 2356      Accepts_pending is decrease on a corresponding listen pcb when a connection\n 2357      in state SYN_RCVD is close.\n ....\n 2731  \n 2732    2007-08-26 Marc Boucher\n 2733:   * api_msg.c: do_close_internal(): Reset the callbacks and arg (conn) to NULL\n 2734      since they can under certain circumstances be called with an invalid conn\n 2735      pointer after the connection has been closed (and conn has been freed). \n ....\n 3072  \n 3073    2007-12-20 Kieran Mansley (based on patch from Oleg Tyshev)\n 3074:   * tcp_in.c: fix bug# 21535 (nrtx not reset correctly in SYN_SENT state)\n 3075  \n 3076    2007-12-20 Kieran Mansley (based on patch from Per-Henrik Lundbolm)\n ....\n 3171  \n 3172    2007-09-19 Simon Goldschmidt\n 3173:   * icmp.c: Fixed bug #21107 (didn't reset IP TTL in ICMP echo replies)\n 3174  \n 3175    2007-09-15 Mike Kleshov\n ....\n 3311    2007-06-13 Frédéric Bernon, Simon Goldschmidt\n 3312    * api_lib.c: change return expression in netconn_addr and netconn_peer, because\n 3313:     conn->err was reset to ERR_OK without any reasons (and error was lost)...\n 3314  \n 3315    2007-06-13 Frédéric Bernon, Matthias Weisser\n ....\n 3435  \n 3436    2007-04-12 Jonathan Larmour\n 3437:   * icmp.c: Reset IP header TTL in ICMP ECHO responses (bug #19580).\n 3438  \n 3439    2007-04-12 Kieran Mansley\n 3440    * tcp.c, tcp_in.c, tcp_out.c, tcp.h: Modify way the retransmission\n 3441:     timer is reset to fix bug#19434, with help from Oleg Tyshev.\n 3442  \n 3443    2007-04-11 Simon Goldschmidt\n ....\n 4155      and this has now been fixed. Delayed acknowledgements was broken\n 4156      in 0.4, has now been fixed. Binding to an address that is in use\n 4157:     now results in an error. Reset connections sometimes hung an\n 4158      application; this has been fixed.\n 4159  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/api/api_msg.c:\n  390    conn->pcb.tcp = NULL;\n  391  \n  392:   /* reset conn->state now before waking up other threads */\n  393    old_state = conn->state;\n  394    conn->state = NETCONN_NONE;\n  ...\n  865      tcp_accept(tpcb, NULL);\n  866    } else {\n  867:     /* some callbacks have to be reset if tcp_close is not successful */\n  868      if (shut_rx) {\n  869        tcp_recv(tpcb, NULL);\n  ...\n 1155  /**\n 1156   * TCP callback function if a connection (opened by tcp_connect/lwip_netconn_do_connect) has\n 1157:  * been established (or reset by the remote host).\n 1158   *\n 1159   * @see tcp.h (struct tcp_pcb.connected) for parameters and return values\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/api/err.c:\n   61    -1,            /* ERR_IF         -12     Low-level netif error    */\n   62    ECONNABORTED,  /* ERR_ABRT       -13     Connection aborted.      */\n   63:   ECONNRESET,    /* ERR_RST        -14     Connection reset.        */\n   64    ENOTCONN,      /* ERR_CLSD       -15     Connection closed.       */\n   65    EIO            /* ERR_ARG        -16     Illegal argument.        */\n   ..\n   93             \"Low-level netif error.\", /* ERR_IF         -12 */\n   94             \"Connection aborted.\",    /* ERR_ABRT       -13 */\n   95:            \"Connection reset.\",      /* ERR_RST        -14 */\n   96             \"Connection closed.\",     /* ERR_CLSD       -15 */\n   97             \"Illegal argument.\"       /* ERR_ARG        -16 */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/api/sockets.c:\n 2312          ip_set_option(sock->conn->pcb.ip, optname);\n 2313        } else {\n 2314:         ip_reset_option(sock->conn->pcb.ip, optname);\n 2315        }\n 2316        LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\\n\",\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/httpd/httpd.c:\n  574  /**\n  575   * The connection shall be actively closed (using RST to close from fault states).\n  576:  * Reset the sent- and recv-callbacks.\n  577   *\n  578:  * @param pcb the tcp pcb to reset callbacks\n  579   * @param hs connection state to free\n  580   */\n  ...\n  624  /**\n  625   * The connection shall be actively closed.\n  626:  * Reset the sent- and recv-callbacks.\n  627   *\n  628:  * @param pcb the tcp pcb to reset callbacks\n  629   * @param hs connection state to free\n  630   */\n  ...\n 2375  /**\n 2376   * The poll function is called every 2nd second.\n 2377:  * If there has been no data sent (which resets the retries) in 8 seconds, close.\n 2378   * If the last portion of a file has not been sent in 2 seconds, close.\n 2379   *\n ....\n 2462  #if LWIP_HTTPD_SUPPORT_POST\n 2463    if (hs->post_content_len_left > 0) {\n 2464:     /* reset idle counter when POST data is received */\n 2465      hs->retries = 0;\n 2466      /* this is data for a POST, pass the complete pbuf to the application */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/mqtt/mqtt.c:\n  655        LWIP_DEBUGF(MQTT_DEBUG_TRACE,(\"mqtt_message_received: Connect response code %d\\n\", res));\n  656        if (res == MQTT_CONNECT_ACCEPTED) {\n  657:         /* Reset cyclic_tick when changing to connected state */\n  658          client->cyclic_tick = 0;\n  659          client->conn_state = MQTT_CONNECTED;\n  ...\n  838          }\n  839          if (msg_rem_len == 0) {\n  840:           /* Reset parser state */\n  841            client->msg_idx = 0;\n  842            /* msg_tot_len = 0; */\n  ...\n  885      /* If keep alive functionality is used */\n  886      if (client->keep_alive != 0) {\n  887:       /* Reset server alive watchdog */\n  888        client->server_watchdog = 0;\n  889      }\n  ...\n  912      struct mqtt_request_t *r;\n  913  \n  914:     /* Reset keep-alive send timer and server watchdog */\n  915      client->cyclic_tick = 0;\n  916      client->server_watchdog = 0;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/snmp/snmp_mib2_tcp.c:\n   91      *uint_ptr = STATS_GET(mib2.tcpattemptfails);\n   92      return sizeof(*uint_ptr);\n   93:   case 8: /* tcpEstabResets */\n   94:     *uint_ptr = STATS_GET(mib2.tcpestabresets);\n   95      return sizeof(*uint_ptr);\n   96    case 9: /* tcpCurrEstab */\n   ..\n  506  static const struct snmp_scalar_node tcp_PassiveOpens  = SNMP_SCALAR_CREATE_NODE_READONLY(6, SNMP_ASN1_TYPE_COUNTER, tcp_get_value);\n  507  static const struct snmp_scalar_node tcp_AttemptFails  = SNMP_SCALAR_CREATE_NODE_READONLY(7, SNMP_ASN1_TYPE_COUNTER, tcp_get_value);\n  508: static const struct snmp_scalar_node tcp_EstabResets   = SNMP_SCALAR_CREATE_NODE_READONLY(8, SNMP_ASN1_TYPE_COUNTER, tcp_get_value);\n  509  static const struct snmp_scalar_node tcp_CurrEstab     = SNMP_SCALAR_CREATE_NODE_READONLY(9, SNMP_ASN1_TYPE_GAUGE, tcp_get_value);\n  510  static const struct snmp_scalar_node tcp_InSegs        = SNMP_SCALAR_CREATE_NODE_READONLY(10, SNMP_ASN1_TYPE_COUNTER, tcp_get_value);\n  ...\n  552  CREATE_LWIP_SYNC_NODE( 6, tcp_PassiveOpens)\n  553  CREATE_LWIP_SYNC_NODE( 7, tcp_AttemptFails)\n  554: CREATE_LWIP_SYNC_NODE( 8, tcp_EstabResets)\n  555  CREATE_LWIP_SYNC_NODE( 9, tcp_CurrEstab)\n  556  CREATE_LWIP_SYNC_NODE(10, tcp_InSegs)\n  ...\n  575    &SYNC_NODE_NAME(tcp_PassiveOpens).node.node,\n  576    &SYNC_NODE_NAME(tcp_AttemptFails).node.node,\n  577:   &SYNC_NODE_NAME(tcp_EstabResets).node.node,\n  578    &SYNC_NODE_NAME(tcp_CurrEstab).node.node,\n  579    &SYNC_NODE_NAME(tcp_InSegs).node.node,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/snmp/snmp_table.c:\n  148      }\n  149  \n  150:     row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */\n  151      column = next_col_def->index + 1;\n  152    } while (1);\n  ...\n  282      }\n  283  \n  284:     row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */\n  285      column = next_col_def->index + 1;\n  286    }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/snmp/snmpv3.c:\n   46  #define SNMP_MAX_TIME_BOOT 2147483647UL\n   47  \n   48: /** Call this if engine has been changed. Has to reset boots, see below */\n   49  void\n   50  snmpv3_engine_id_changed(void)\n   ..\n   73  /** RFC3414 2.2.2.\n   74   *\n   75:  * Once the timer reaches 2147483647 it gets reset to zero and the\n   76   * engine boot ups get incremented.\n   77   */\n   ..\n   80  {\n   81    if (snmpv3_get_engine_time() >= SNMP_MAX_TIME_BOOT) {\n   82:     snmpv3_reset_engine_time();\n   83  \n   84      if (snmpv3_get_engine_boots() < SNMP_MAX_TIME_BOOT - 1) {\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/snmp/snmpv3_dummy.c:\n  126  /**\n  127   * RFC3414 2.2.2.\n  128:  * Once the timer reaches 2147483647 it gets reset to zero and the\n  129   * engine boot ups get incremented.\n  130   */\n  ...\n  136  \n  137  /**\n  138:  * Reset current engine time to 0\n  139   */\n  140  void\n  141: snmpv3_reset_engine_time(void)\n  142  {\n  143  }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/apps/sntp/sntp.c:\n  185  \n  186  #if SNTP_RETRY_TIMEOUT_EXP\n  187: #define SNTP_RESET_RETRY_TIMEOUT() sntp_retry_timeout = SNTP_RETRY_TIMEOUT\n  188  /** Retry time, initialized with SNTP_RETRY_TIMEOUT and doubled with each retry. */\n  189  static u32_t sntp_retry_timeout;\n  190  #else /* SNTP_RETRY_TIMEOUT_EXP */\n  191: #define SNTP_RESET_RETRY_TIMEOUT()\n  192  #define sntp_retry_timeout SNTP_RETRY_TIMEOUT\n  193  #endif /* SNTP_RETRY_TIMEOUT_EXP */\n  ...\n  315        LWIP_DEBUGF(SNTP_DEBUG_STATE, (\"sntp_try_next_server: Sending request to server %\"U16_F\"\\n\",\n  316          (u16_t)sntp_current_server));\n  317:       /* new server: reset retry timeout */\n  318:       SNTP_RESET_RETRY_TIMEOUT();\n  319        /* instantly send a request to the next server */\n  320        sntp_request(NULL);\n  ...\n  408      /* Set up timeout for next request (only if poll response was received)*/\n  409      if (sntp_opmode == SNTP_OPMODE_POLL) {\n  410:       /* Correct response, reset retry timeout */\n  411:       SNTP_RESET_RETRY_TIMEOUT();\n  412  \n  413        sys_timeout((u32_t)SNTP_UPDATE_DELAY, sntp_request, NULL);\n  ...\n  551  \n  552        if (sntp_opmode == SNTP_OPMODE_POLL) {\n  553:         SNTP_RESET_RETRY_TIMEOUT();\n  554  #if SNTP_STARTUP_DELAY\n  555          sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/ipv4/dhcp.c:\n  756        dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */\n  757      }\n  758:     /* dhcp is cleared below, no need to reset flag*/\n  759    }\n  760  \n  ...\n 1025    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, (\"dhcp_bind(netif=%p) %c%c%\"U16_F\"\\n\", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));\n 1026  \n 1027:   /* reset time used of lease */\n 1028    dhcp->lease_used = 0;\n 1029  \n ....\n 1370   * Set the DHCP state of a DHCP client.\n 1371   *\n 1372:  * If the state changed, reset the number of tries.\n 1373   */\n 1374  static void\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/ipv4/etharp.c:\n  223          arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;\n  224        } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {\n  225:         /* Reset state to stable, so that the next transmitted packet will\n  226             re-send an ARP request. */\n  227          arp_table[i].state = ETHARP_STATE_STABLE;\n  ...\n  466    /* update address */\n  467    ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);\n  468:   /* reset time stamp */\n  469    arp_table[i].ctime = 0;\n  470    /* this is where we will send out queued packets! */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/ipv6/nd6.c:\n 1715    }\n 1716  \n 1717:   /* Reset this destination's age. */\n 1718    destination_cache[nd6_cached_destination_index].age = 0;\n 1719  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/netif.c:\n  251    LWIP_ASSERT(\"No init function given\", init != NULL);\n  252  \n  253:   /* reset new interface configuration state */\n  254  #if LWIP_IPV4\n  255    ip_addr_set_zero_ip4(&netif->ip_addr);\n  ...\n  434    /* this netif is default? */\n  435    if (netif_default == netif) {\n  436:     /* reset default netif */\n  437      netif_set_default(NULL);\n  438    }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/tcp.c:\n  345      err = tcp_send_fin(pcb);\n  346      if (err == ERR_OK) {\n  347:       MIB2_STATS_INC(mib2.tcpestabresets);\n  348        pcb->state = FIN_WAIT_1;\n  349      }\n  ...\n  352      err = tcp_send_fin(pcb);\n  353      if (err == ERR_OK) {\n  354:       MIB2_STATS_INC(mib2.tcpestabresets);\n  355        pcb->state = LAST_ACK;\n  356      }\n  ...\n  465   *\n  466   * @param pcb the tcp_pcb to abort\n  467:  * @param reset boolean to indicate whether a reset should be sent\n  468   */\n  469  void\n  470: tcp_abandon(struct tcp_pcb *pcb, int reset)\n  471  {\n  472    u32_t seqno, ackno;\n  ...\n  501        }\n  502      } else {\n  503:       send_rst = reset;\n  504        local_port = pcb->local_port;\n  505        TCP_PCB_REMOVE_ACTIVE(pcb);\n  ...\n  529  /**\n  530   * @ingroup tcp_raw\n  531:  * Aborts the connection by sending a RST (reset) segment to the remote\n  532   * host. The pcb is deallocated. This function never fails.\n  533   *\n  ...\n  989    tcpwnd_size_t eff_wnd;\n  990    u8_t pcb_remove;      /* flag if a PCB should be removed */\n  991:   u8_t pcb_reset;       /* flag if a RST should be sent when removing */\n  992    err_t err;\n  993  \n  ...\n 1017  \n 1018      pcb_remove = 0;\n 1019:     pcb_reset = 0;\n 1020  \n 1021      if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {\n ....\n 1061            }\n 1062  \n 1063:           /* Reset the retransmission timer. */\n 1064            pcb->rtime = 0;\n 1065  \n ....\n 1107  \n 1108          ++pcb_remove;\n 1109:         ++pcb_reset;\n 1110        } else if ((u32_t)(tcp_ticks - pcb->tmr) >\n 1111                  (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))\n ....\n 1167        }\n 1168  \n 1169:       if (pcb_reset) {\n 1170          tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,\n 1171                   pcb->local_port, pcb->remote_port);\n ....\n 1881  \n 1882    pcb->state = CLOSED;\n 1883:   /* reset the local port to prevent the pcb from being 'bound' */\n 1884    pcb->local_port = 0;\n 1885  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/tcp_in.c:\n  374         and that the pcb has been freed. If so, we don't do anything. */\n  375      if (err != ERR_ABRT) {\n  376:       if (recv_flags & TF_RESET) {\n  377:         /* TF_RESET means that the connection was reset by the other\n  378             end. We then call the error callback to inform the\n  379             application that the connection is dead before we\n  ...\n  507    } else {\n  508  \n  509:     /* If no matching PCB was found, send a TCP RST (reset) to the\n  510         sender. */\n  511:     LWIP_DEBUGF(TCP_RST_DEBUG, (\"tcp_input: no PCB match found, resetting.\\n\"));\n  512      if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {\n  513        TCP_STATS_INC(tcp.proterr);\n  ...\n  578      /* For incoming segments with the ACK flag set, respond with a\n  579         RST. */\n  580:     LWIP_DEBUGF(TCP_RST_DEBUG, (\"tcp_listen_input: ACK in LISTEN, sending reset\\n\"));\n  581      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),\n  582        ip_current_src_addr(), tcphdr->dest, tcphdr->src);\n  ...\n  676         should be sent in reply */\n  677      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {\n  678:       /* If the SYN is in the window it is an error, send a reset */\n  679        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),\n  680          ip_current_src_addr(), tcphdr->dest, tcphdr->src);\n  ...\n  717    /* Process incoming RST segments. */\n  718    if (flags & TCP_RST) {\n  719:     /* First, determine if the reset is acceptable. */\n  720      if (pcb->state == SYN_SENT) {\n  721        /* \"In the SYN-SENT state (a RST received in response to an initial SYN),\n  ...\n  725        }\n  726      } else {\n  727:       /* \"In all states except SYN-SENT, all reset (RST) segments are validated\n  728            by checking their SEQ-fields.\" */\n  729        if (seqno == pcb->rcv_nxt) {\n  ...\n  740  \n  741      if (acceptable) {\n  742:       LWIP_DEBUGF(TCP_INPUT_DEBUG, (\"tcp_process: Connection RESET\\n\"));\n  743        LWIP_ASSERT(\"tcp_input: pcb->state != CLOSED\", pcb->state != CLOSED);\n  744:       recv_flags |= TF_RESET;\n  745        pcb->flags &= ~TF_ACK_DELAY;\n  746        return ERR_RST;\n  747      } else {\n  748:       LWIP_DEBUGF(TCP_INPUT_DEBUG, (\"tcp_process: unacceptable reset seqno %\"U32_F\" rcv_nxt %\"U32_F\"\\n\",\n  749         seqno, pcb->rcv_nxt));\n  750:       LWIP_DEBUGF(TCP_DEBUG, (\"tcp_process: unacceptable reset seqno %\"U32_F\" rcv_nxt %\"U32_F\"\\n\",\n  751         seqno, pcb->rcv_nxt));\n  752        return ERR_OK;\n  ...\n  808  \n  809        /* If there's nothing left to acknowledge, stop the retransmit\n  810:          timer, otherwise reset it to start again */\n  811        if (pcb->unacked == NULL) {\n  812          pcb->rtime = -1;\n  ...\n 1082       * c) dupacks > 3: increase cwnd\n 1083       *\n 1084:      * If it only passes 1-3, should reset dupack counter (and add to\n 1085       * stats, which we don't do in lwIP)\n 1086       *\n 1087:      * If it only passes 1, should reset dupack counter\n 1088       *\n 1089       */\n ....\n 1117          }\n 1118        }\n 1119:       /* If Clause (1) or more is true, but not a duplicate ack, reset\n 1120         * count of consecutive duplicate acks */\n 1121        if (!found_dupack) {\n ....\n 1125        /* We come here when the ACK acknowledges new data. */\n 1126  \n 1127:       /* Reset the \"IN Fast Retransmit\" flag, since we are no longer\n 1128:          in fast retransmit. Also reset the congestion window to the\n 1129           slow start threshold. */\n 1130        if (pcb->flags & TF_INFR) {\n ....\n 1133        }\n 1134  \n 1135:       /* Reset the number of retransmissions. */\n 1136        pcb->nrtx = 0;\n 1137  \n 1138:       /* Reset the retransmission time-out. */\n 1139        pcb->rto = (pcb->sa >> 3) + pcb->sv;\n 1140  \n 1141:       /* Reset the fast retransmit variables. */\n 1142        pcb->dupacks = 0;\n 1143        pcb->lastack = ackno;\n ....\n 1194  \n 1195        /* If there's nothing left to acknowledge, stop the retransmit\n 1196:          timer, otherwise reset it to start again */\n 1197        if (pcb->unacked == NULL) {\n 1198          pcb->rtime = -1;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/tcp_out.c:\n 1170  #if TCP_OVERSIZE\n 1171    if (pcb->unsent == NULL) {\n 1172:     /* last unsent has been removed, reset unsent_oversize */\n 1173      pcb->unsent_oversize = 0;\n 1174    }\n ....\n 1322  \n 1323  /**\n 1324:  * Send a TCP RESET packet (empty segment with RST flag set) either to\n 1325   * abort a connection or to show that there is no matching local connection\n 1326   * for a received segment.\n ....\n 1463  #if TCP_OVERSIZE\n 1464    if (seg->next == NULL) {\n 1465:     /* the retransmitted segment is last in unsent, so reset unsent_oversize */\n 1466      pcb->unsent_oversize = 0;\n 1467    }\n ....\n 1515      pcb->flags |= TF_INFR;\n 1516  \n 1517:     /* Reset the retransmission timer to prevent immediate rto retransmissions */\n 1518      pcb->rtime = 0;\n 1519    }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/core/udp.c:\n 1025  udp_disconnect(struct udp_pcb *pcb)\n 1026  {\n 1027:   /* reset remote address association */\n 1028  #if LWIP_IPV4 && LWIP_IPV6\n 1029    if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/apps/httpd_opts.h:\n  135  /** Maximum retries before the connection is aborted/closed.\n  136   * - number of times pcb->poll is called -> default is 4*500ms = 2s;\n  137:  * - reset when pcb->sent is called\n  138   */\n  139  #if !defined HTTPD_MAX_RETRIES || defined __DOXYGEN__\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/apps/snmpv3.h:\n   64  \n   65  u32_t snmpv3_get_engine_time(void);\n   66: void snmpv3_reset_engine_time(void);\n   67  \n   68  err_t snmpv3_get_user(const char* username, u8_t *auth_algo, u8_t *auth_key, u8_t *priv_algo, u8_t *priv_key);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/err.h:\n   89  /** Connection aborted.      */\n   90    ERR_ABRT       = -13,\n   91: /** Connection reset.        */\n   92    ERR_RST        = -14,\n   93  /** Connection closed.       */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/errno.h:\n   92  #define  EL2NSYNC        45  /* Level 2 not synchronized */\n   93  #define  EL3HLT          46  /* Level 3 halted */\n   94: #define  EL3RST          47  /* Level 3 reset */\n   95  #define  ELNRNG          48  /* Link number out of range */\n   96  #define  EUNATCH         49  /* Protocol driver not attached */\n   ..\n  149  #define  ENETDOWN       100  /* Network is down */\n  150  #define  ENETUNREACH    101  /* Network is unreachable */\n  151: #define  ENETRESET      102  /* Network dropped connection because of reset */\n  152  #define  ECONNABORTED   103  /* Software caused connection abort */\n  153: #define  ECONNRESET     104  /* Connection reset by peer */\n  154  #define  ENOBUFS        105  /* No buffer space available */\n  155  #define  EISCONN        106  /* Transport endpoint is already connected */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/ip.h:\n  216  /** Sets an IP pcb option (SOF_* flags) */\n  217  #define ip_set_option(pcb, opt)   ((pcb)->so_options |= (opt))\n  218: /** Resets an IP pcb option (SOF_* flags) */\n  219: #define ip_reset_option(pcb, opt) ((pcb)->so_options &= ~(opt))\n  220  \n  221  #if LWIP_IPV4 && LWIP_IPV6\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/priv/tcp_priv.h:\n   78  /* Used within the TCP code only: */\n   79  struct tcp_pcb * tcp_alloc   (u8_t prio);\n   80: void             tcp_abandon (struct tcp_pcb *pcb, int reset);\n   81  err_t            tcp_send_empty_ack(struct tcp_pcb *pcb);\n   82  void             tcp_rexmit  (struct tcp_pcb *pcb);\n   ..\n  154  /** Flags used on input processing, not on pcb->flags\n  155  */\n  156: #define TF_RESET     (u8_t)0x08U   /* Connection was reset. */\n  157  #define TF_CLOSED    (u8_t)0x10U   /* Connection was successfully closed. */\n  158  #define TF_GOT_FIN   (u8_t)0x20U   /* Connection was closed by the remote end. */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/stats.h:\n  145    u32_t tcppassiveopens;\n  146    u32_t tcpattemptfails;\n  147:   u32_t tcpestabresets;\n  148    u32_t tcpoutsegs;\n  149    u32_t tcpretranssegs;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/lwip/tcp.h:\n  114   * @param err Error code to indicate why the pcb has been closed\n  115   *            ERR_ABRT: aborted through tcp_abort or by a TCP timer\n  116:  *            ERR_RST: the connection was reset by the remote host\n  117   */\n  118  typedef void  (*tcp_err_fn)(void *arg, err_t err);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/netif/ppp/ccp.h:\n   45  #define CCP_TERMREQ\t5\n   46  #define CCP_TERMACK\t6\n   47: #define CCP_RESETREQ\t14\n   48: #define CCP_RESETACK\t15\n   49  \n   50  /*\n   ..\n  151  extern const struct protent ccp_protent;\n  152  \n  153: void ccp_resetrequest(ppp_pcb *pcb);  /* Issue a reset-request. */\n  154  \n  155  #endif /* CCP_H */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/netif/ppp/fsm.h:\n   93  \n   94  typedef struct fsm_callbacks {\n   95:     void (*resetci)\t\t/* Reset our Configuration Information */\n   96  \t\t(fsm *);\n   97      int  (*cilen)\t\t/* Length of our Configuration Information */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/netif/ppp/mppe.h:\n  165  void mppe_set_key(ppp_pcb *pcb, ppp_mppe_state *state, u8_t *key);\n  166  void mppe_init(ppp_pcb *pcb, ppp_mppe_state *state, u8_t options);\n  167: void mppe_comp_reset(ppp_pcb *pcb, ppp_mppe_state *state);\n  168  err_t mppe_compress(ppp_pcb *pcb, ppp_mppe_state *state, struct pbuf **pb, u16_t protocol);\n  169: void mppe_decomp_reset(ppp_pcb *pcb, ppp_mppe_state *state);\n  170  err_t mppe_decompress(ppp_pcb *pcb, ppp_mppe_state *state, struct pbuf **pb);\n  171  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/netif/ppp/ppp.h:\n  394    ccp_options ccp_allowoptions;  /* what we'll agree to do */\n  395    ccp_options ccp_hisoptions;    /* what we agreed to do */\n  396:   u8_t ccp_localstate;           /* Local state (mainly for handling reset-reqs and reset-acks). */\n  397    u8_t ccp_receive_method;       /* Method chosen on receive path */\n  398    u8_t ccp_transmit_method;      /* Method chosen on transmit path */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/include/netif/ppp/ppp_impl.h:\n  464  #endif /* unused */\n  465  void ccp_set(ppp_pcb *pcb, u8_t isopen, u8_t isup, u8_t receive_method, u8_t transmit_method);\n  466: void ccp_reset_comp(ppp_pcb *pcb);\n  467: void ccp_reset_decomp(ppp_pcb *pcb);\n  468  #if 0 /* unused */\n  469  int ccp_fatal_error(ppp_pcb *pcb);\n  ...\n  487  #if PPP_STATS_SUPPORT\n  488  void print_link_stats(void); /* Print stats, if available */\n  489: void reset_link_stats(int u); /* Reset (init) stats when link goes up */\n  490  void update_link_stats(int u); /* Get stats at link termination */\n  491  #endif /* PPP_STATS_SUPPORT */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/auth.c:\n  431      euid = geteuid();\n  432      if (seteuid(getuid()) == -1) {\n  433: \toption_error(\"unable to reset uid before opening %s: %m\", fname);\n  434  \treturn 0;\n  435      }\n  ...\n 1504  #if 0 /* UNUSED */\n 1505  /*\n 1506:  * auth_reset - called when LCP is starting negotiations to recheck\n 1507   * authentication options, i.e. whether we have appropriate secrets\n 1508   * to use for authenticating ourselves and/or the peer.\n 1509   */\n 1510  void\n 1511: auth_reset(unit)\n 1512      int unit;\n 1513  {\n ....\n 1663  \n 1664      } else {\n 1665: \tattempts = 0;\t\t\t/* Reset count */\n 1666  \tif (**msg == 0)\n 1667  \t    *msg = \"Login ok\";\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/ccp.c:\n  122        \"don't allow MPPE encryption\", OPT_ALIAS | OPT_PRIO },\n  123  \n  124:     /* We use ccp_allowoptions[0].mppe as a junk var ... it is reset later */\n  125      { \"require-mppe-40\", o_bool, &ccp_allowoptions[0].mppe,\n  126        \"require MPPE 40-bit encryption\", OPT_PRIO | OPT_A2OR | MPPE_OPT_40,\n  ...\n  212   * Callbacks for fsm code.\n  213   */\n  214: static void ccp_resetci (fsm *);\n  215  static int  ccp_cilen (fsm *);\n  216  static void ccp_addci (fsm *, u_char *, int *);\n  ...\n  226  \n  227  static const fsm_callbacks ccp_callbacks = {\n  228:     ccp_resetci,\n  229      ccp_cilen,\n  230      ccp_addci,\n  ...\n  264  \n  265  /*\n  266:  * Local state (mainly for handling reset-reqs and reset-acks).\n  267   */\n  268: #define RACK_PENDING\t1\t/* waiting for reset-ack */\n  269: #define RREQ_REPEAT\t2\t/* send another reset-req if no reset-ack */\n  270  \n  271  #define RACKTIMEOUT\t1\t/* second */\n  ...\n  418       * deciding whether to open in silent mode.\n  419       */\n  420:     ccp_resetci(f);\n  421      if (!ccp_anycompress(go))\n  422  \tf->flags |= OPT_SILENT;\n  ...\n  491  \n  492      switch (code) {\n  493:     case CCP_RESETREQ:\n  494  \tif (f->state != PPP_FSM_OPENED)\n  495  \t    break;\n  496: \tccp_reset_comp(pcb);\n  497: \t/* send a reset-ack, which the transmitter will see and\n  498: \t   reset its compression state. */\n  499: \tfsm_sdata(f, CCP_RESETACK, id, NULL, 0);\n  500  \tbreak;\n  501  \n  502:     case CCP_RESETACK:\n  503  \tif ((pcb->ccp_localstate & RACK_PENDING) && id == f->reqid) {\n  504  \t    pcb->ccp_localstate &= ~(RACK_PENDING | RREQ_REPEAT);\n  505  \t    UNTIMEOUT(ccp_rack_timeout, f);\n  506: \t    ccp_reset_decomp(pcb);\n  507  \t}\n  508  \tbreak;\n  ...\n  537  \n  538  /*\n  539:  * ccp_resetci - initialize at start of negotiation.\n  540   */\n  541: static void ccp_resetci(fsm *f) {\n  542      ppp_pcb *pcb = f->pcb;\n  543      ccp_options *go = &pcb->ccp_gotoptions;\n  ...\n 1517      \"TermReq\", \"TermAck\", \"CodeRej\",\n 1518      NULL, NULL, NULL, NULL, NULL, NULL,\n 1519:     \"ResetReq\", \"ResetAck\",\n 1520  };\n 1521  \n ....\n 1648  /*\n 1649   * We have received a packet that the decompressor failed to\n 1650:  * decompress.  Here we would expect to issue a reset-request, but\n 1651:  * Motorola has a patent on resetting the compressor as a result of\n 1652   * detecting an error in the decompressed data after decompression.\n 1653   * (See US patent 5,130,993; international patent publication number\n ....\n 1656   * So we ask the kernel whether the error was detected after\n 1657   * decompression; if it was, we take CCP down, thus disabling\n 1658:  * compression :-(, otherwise we issue the reset-request.\n 1659   */\n 1660  static void ccp_datainput(ppp_pcb *pcb, u_char *pkt, int len) {\n ....\n 1685  \t} else {\n 1686  \t    /*\n 1687: \t     * Send a reset-request to reset the peer's compressor.\n 1688  \t     * We don't do that if we are still waiting for an\n 1689: \t     * acknowledgement to a previous reset-request.\n 1690  \t     */\n 1691  \t    if (!(pcb->ccp_localstate & RACK_PENDING)) {\n 1692: \t\tfsm_sdata(f, CCP_RESETREQ, f->reqid = ++f->id, NULL, 0);\n 1693  \t\tTIMEOUT(ccp_rack_timeout, f, RACKTIMEOUT);\n 1694  \t\tpcb->ccp_localstate |= RACK_PENDING;\n ....\n 1702  /*\n 1703   * We have received a packet that the decompressor failed to\n 1704:  * decompress. Issue a reset-request.\n 1705   */\n 1706: void ccp_resetrequest(ppp_pcb *pcb) {\n 1707      fsm *f = &pcb->ccp_fsm;\n 1708  \n ....\n 1711  \n 1712      /*\n 1713:      * Send a reset-request to reset the peer's compressor.\n 1714       * We don't do that if we are still waiting for an\n 1715:      * acknowledgement to a previous reset-request.\n 1716       */\n 1717      if (!(pcb->ccp_localstate & RACK_PENDING)) {\n 1718: \tfsm_sdata(f, CCP_RESETREQ, f->reqid = ++f->id, NULL, 0);\n 1719  \tTIMEOUT(ccp_rack_timeout, f, RACKTIMEOUT);\n 1720  \tpcb->ccp_localstate |= RACK_PENDING;\n ....\n 1724  \n 1725  /*\n 1726:  * Timeout waiting for reset-ack.\n 1727   */\n 1728  static void ccp_rack_timeout(void *arg) {\n ....\n 1731  \n 1732      if (f->state == PPP_FSM_OPENED && (pcb->ccp_localstate & RREQ_REPEAT)) {\n 1733: \tfsm_sdata(f, CCP_RESETREQ, f->reqid, NULL, 0);\n 1734  \tTIMEOUT(ccp_rack_timeout, f, RACKTIMEOUT);\n 1735  \tpcb->ccp_localstate &= ~RREQ_REPEAT;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/chap-new.c:\n  120  \n  121  /*\n  122:  * chap_init - reset to initial state.\n  123   */\n  124  static void chap_init(ppp_pcb *pcb) {\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/ecp.c:\n  136  \n  137  static const fsm_callbacks ecp_callbacks = {\n  138:     NULL, /* ecp_resetci, */\n  139      NULL, /* ecp_cilen, */\n  140      NULL, /* ecp_addci, */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/fsm.c:\n  711  \n  712      if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){\n  713: \t/* Not currently negotiating - reset options */\n  714: \tif( f->callbacks->resetci )\n  715: \t    (*f->callbacks->resetci)(f);\n  716  \tf->nakloops = 0;\n  717  \tf->rnakloops = 0;\n  ...\n  719  \n  720      if( !retransmit ){\n  721: \t/* New request - reset retransmission counter, use new ID */\n  722  \tf->retransmits = pcb->settings.fsm_max_conf_req_transmits;\n  723  \tf->reqid = ++f->id;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/ipcp.c:\n  111   * Callbacks for fsm code.  (CI = Configuration Information)\n  112   */\n  113: static void ipcp_resetci(fsm *f);\t/* Reset our CI */\n  114  static int  ipcp_cilen(fsm *f);\t        /* Return length of our CI */\n  115  static void ipcp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI */\n  ...\n  123  \n  124  static const fsm_callbacks ipcp_callbacks = { /* IPCP callback routines */\n  125:     ipcp_resetci,\t\t/* Reset our Configuration Information */\n  126      ipcp_cilen,\t\t\t/* Length of our Configuration Information */\n  127      ipcp_addci,\t\t\t/* Add our Configuration Information */\n  ...\n  707  \n  708  /*\n  709:  * ipcp_resetci - Reset our CI.\n  710   * Called by fsm_sconfreq, Send Configure Request.\n  711   */\n  712: static void ipcp_resetci(fsm *f) {\n  713      ppp_pcb *pcb = f->pcb;\n  714      ipcp_options *wo = &pcb->ipcp_wantoptions;\n  ...\n 1528  \n 1529      /*\n 1530:      * Reset all his options.\n 1531       */\n 1532      BZERO(ho, sizeof(*ho));\n ....\n 1781  \tif (rc == CONFACK) {\n 1782  \t    rc = CONFNAK;\n 1783: \t    ucp = inp;\t\t\t/* reset pointer */\n 1784  \t    wo->req_addr = 0;\t\t/* don't ask again */\n 1785  \t}\n ....\n 2094  \n 2095  #if PPP_STATS_SUPPORT\n 2096:     reset_link_stats(f->unit);\n 2097  #endif /* PPP_STATS_SUPPORT */\n 2098  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/ipv6cp.c:\n  177   * Callbacks for fsm code.  (CI = Configuration Information)\n  178   */\n  179: static void ipv6cp_resetci(fsm *f); /* Reset our CI */\n  180  static int  ipv6cp_cilen(fsm *f); /* Return length of our CI */\n  181  static void ipv6cp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI */\n  ...\n  189  \n  190  static const fsm_callbacks ipv6cp_callbacks = { /* IPV6CP callback routines */\n  191:     ipv6cp_resetci,\t\t/* Reset our Configuration Information */\n  192      ipv6cp_cilen,\t\t/* Length of our Configuration Information */\n  193      ipv6cp_addci,\t\t/* Add our Configuration Information */\n  ...\n  505  \n  506  /*\n  507:  * ipv6cp_resetci - Reset our CI.\n  508   */\n  509: static void ipv6cp_resetci(fsm *f) {\n  510      ppp_pcb *pcb = f->pcb;\n  511      ipv6cp_options *wo = &pcb->ipv6cp_wantoptions;\n  ...\n  904  \n  905      /*\n  906:      * Reset all his options.\n  907       */\n  908      BZERO(ho, sizeof(*ho));\n  ...\n 1048  \tif (rc == CONFACK) {\n 1049  \t    rc = CONFNAK;\n 1050: \t    ucp = inp;\t\t\t\t/* reset pointer */\n 1051  \t    wo->req_ifaceid = 0;\t\t/* don't ask again */\n 1052  \t}\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/lcp.c:\n  216   * Callbacks for fsm code.  (CI = Configuration Information)\n  217   */\n  218: static void lcp_resetci(fsm *f);\t/* Reset our CI */\n  219  static int  lcp_cilen(fsm *f);\t\t/* Return length of our CI */\n  220  static void lcp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI to pkt */\n  ...\n  243  \n  244  static const fsm_callbacks lcp_callbacks = {\t/* LCP callback routines */\n  245:     lcp_resetci,\t\t/* Reset our Configuration Information */\n  246      lcp_cilen,\t\t\t/* Length of our Configuration Information */\n  247      lcp_addci,\t\t\t/* Add our Configuration Information */\n  ...\n  647  \n  648  /*\n  649:  * lcp_resetci - Reset our CI.\n  650   */\n  651: static void lcp_resetci(fsm *f) {\n  652      ppp_pcb *pcb = f->pcb;\n  653      lcp_options *wo = &pcb->lcp_wantoptions;\n  ...\n  760      pcb->peer_mru = PPP_MRU;\n  761  #if 0 /* UNUSED */\n  762:     auth_reset(pcb);\n  763  #endif /* UNUSED */\n  764  }\n  ...\n 1836  \n 1837      /*\n 1838:      * Reset all his options.\n 1839       */\n 1840      BZERO(ho, sizeof(*ho));\n ....\n 2702      }\n 2703  \n 2704:     /* Reset the number of outstanding echo frames */\n 2705      pcb->lcp_echos_pending = 0;\n 2706  }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/mppe.c:\n  171  \n  172  /*\n  173:  * We received a CCP Reset-Request (actually, we are sending a Reset-Ack),\n  174   * tell the compressor to rekey.  Note that we MUST NOT rekey for\n  175:  * every CCP Reset-Request; we only rekey on the next xmit packet.\n  176:  * We might get multiple CCP Reset-Requests if our CCP Reset-Ack is lost.\n  177:  * So, rekeying for every CCP Reset-Request is broken as the peer will not\n  178   * know how many times we've rekeyed.  (If we rekey and THEN get another\n  179:  * CCP Reset-Request, we must rekey again.)\n  180   */\n  181: void mppe_comp_reset(ppp_pcb *pcb, ppp_mppe_state *state)\n  182  {\n  183  \tLWIP_UNUSED_ARG(pcb);\n  ...\n  229  \tif (!state->stateful ||\t/* stateless mode     */\n  230  \t    ((state->ccount & 0xff) == 0xff) ||\t/* \"flag\" packet      */\n  231: \t    (state->bits & MPPE_BIT_FLUSHED)) {\t/* CCP Reset-Request  */\n  232  \t\t/* We must rekey */\n  233  \t\tif (state->stateful) {\n  ...\n  238  \t}\n  239  \tpl[0] |= state->bits;\n  240: \tstate->bits &= ~MPPE_BIT_FLUSHED;\t/* reset for next xmit */\n  241  \tpl += MPPE_OVHD;\n  242  \n  ...\n  264  \n  265  /*\n  266:  * We received a CCP Reset-Ack.  Just ignore it.\n  267   */\n  268: void mppe_decomp_reset(ppp_pcb *pcb, ppp_mppe_state *state)\n  269  {\n  270  \tLWIP_UNUSED_ARG(pcb);\n  ...\n  345  \t\t\t\t * (ccount > state->ccount)\n  346  \t\t\t\t * Packet loss detected, enter the discard state.\n  347: \t\t\t\t * Signal the peer to rekey (by sending a CCP Reset-Request).\n  348  \t\t\t\t */\n  349  \t\t\t\tstate->discard = 1;\n  350: \t\t\t\tccp_resetrequest(pcb);\n  351  \t\t\t\treturn ERR_BUF;\n  352  \t\t\t}\n  ...\n  354  \t\t\t/* discard state */\n  355  \t\t\tif (!flushed) {\n  356: \t\t\t\t/* ccp.c will be silent (no additional CCP Reset-Requests). */\n  357  \t\t\t\treturn ERR_BUF;\n  358  \t\t\t} else {\n  ...\n  366  \t\t\t\t}\n  367  \n  368: \t\t\t\t/* reset */\n  369  \t\t\t\tstate->discard = 0;\n  370  \t\t\t\tstate->ccount = ccount;\n  371  \t\t\t\t/*\n  372  \t\t\t\t * Another problem with RFC 3078 here.  It implies that the\n  373: \t\t\t\t * peer need not send a Reset-Ack packet.  But RFC 1962\n  374: \t\t\t\t * requires it.  Hopefully, M$ does send a Reset-Ack; even\n  375  \t\t\t\t * though it isn't required for MPPE synchronization, it is\n  376: \t\t\t\t * required to reset CCP state.\n  377  \t\t\t\t */\n  378  \t\t\t}\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/ppp.c:\n  937           * interface limitation between Linux kernel and pppd. For MPPE, which uses\n  938           * CCP to negotiate although it is not really a (de)compressor, we added\n  939:          * ccp_resetrequest() in CCP and MPPE input data flow is calling either\n  940:          * ccp_resetrequest() or lcp_close() if the issue is, respectively, non-fatal\n  941           * or fatal, this is what ccp_datainput() really do.\n  942           */\n  ...\n 1377  \n 1378  void\n 1379: ccp_reset_comp(ppp_pcb *pcb)\n 1380  {\n 1381    switch (pcb->ccp_transmit_method) {\n 1382  #if MPPE_SUPPORT\n 1383    case CI_MPPE:\n 1384:     mppe_comp_reset(pcb, &pcb->mppe_comp);\n 1385      break;\n 1386  #endif /* MPPE_SUPPORT */\n ....\n 1391  \n 1392  void\n 1393: ccp_reset_decomp(ppp_pcb *pcb)\n 1394  {\n 1395    switch (pcb->ccp_receive_method) {\n 1396  #if MPPE_SUPPORT\n 1397    case CI_MPPE:\n 1398:     mppe_decomp_reset(pcb, &pcb->mppe_decomp);\n 1399      break;\n 1400  #endif /* MPPE_SUPPORT */\n ....\n 1604  \n 1605  /*\n 1606:  * reset_link_stats - \"reset\" stats when link goes up.\n 1607   */\n 1608: void reset_link_stats(int u) {\n 1609    if (!get_ppp_stats(u, &old_link_stats)) {\n 1610      return;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/PPPD_FOLLOWUP:\n   58  \n   59  \n   60: 2010-08-23 - set and reset options to control environment variables\n   61               for scripts.\n   62    2b6310fd24dba8e0fca8999916a162f0a1842a84\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/src/netif/ppp/pppos.c:\n  310  #endif /* PPP_INPROC_IRQ_SAFE */\n  311  \n  312:   /* reset PPPoS control block to its initial state */\n  313    memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));\n  314  \n  ...\n  342  #endif /* PPP_INPROC_IRQ_SAFE */\n  343  \n  344:   /* reset PPPoS control block to its initial state */\n  345    memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));\n  346  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/builder/lwip2-src/test/unit/tcp/test_tcp.c:\n   19  static u8_t test_tcp_timer;\n   20  \n   21: /* our own version of tcp_tmr so we can reset fast/slow timer state */\n   22  static void\n   23  test_tcp_tmr(void)\n   ..\n   34  tcp_setup(void)\n   35  {\n   36:   /* reset iss to default (6510) */\n   37    tcp_ticks = 0;\n   38    tcp_ticks = 0 - (tcp_next_iss(NULL) - 6510);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/apps/httpd_opts.h:\n  135  /** Maximum retries before the connection is aborted/closed.\n  136   * - number of times pcb->poll is called -> default is 4*500ms = 2s;\n  137:  * - reset when pcb->sent is called\n  138   */\n  139  #if !defined HTTPD_MAX_RETRIES || defined __DOXYGEN__\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/apps/snmpv3.h:\n   64  \n   65  u32_t snmpv3_get_engine_time(void);\n   66: void snmpv3_reset_engine_time(void);\n   67  \n   68  err_t snmpv3_get_user(const char* username, u8_t *auth_algo, u8_t *auth_key, u8_t *priv_algo, u8_t *priv_key);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/err.h:\n   89  /** Connection aborted.      */\n   90    ERR_ABRT       = -13,\n   91: /** Connection reset.        */\n   92    ERR_RST        = -14,\n   93  /** Connection closed.       */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/errno.h:\n   92  #define  EL2NSYNC        45  /* Level 2 not synchronized */\n   93  #define  EL3HLT          46  /* Level 3 halted */\n   94: #define  EL3RST          47  /* Level 3 reset */\n   95  #define  ELNRNG          48  /* Link number out of range */\n   96  #define  EUNATCH         49  /* Protocol driver not attached */\n   ..\n  149  #define  ENETDOWN       100  /* Network is down */\n  150  #define  ENETUNREACH    101  /* Network is unreachable */\n  151: #define  ENETRESET      102  /* Network dropped connection because of reset */\n  152  #define  ECONNABORTED   103  /* Software caused connection abort */\n  153: #define  ECONNRESET     104  /* Connection reset by peer */\n  154  #define  ENOBUFS        105  /* No buffer space available */\n  155  #define  EISCONN        106  /* Transport endpoint is already connected */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/ip.h:\n  216  /** Sets an IP pcb option (SOF_* flags) */\n  217  #define ip_set_option(pcb, opt)   ((pcb)->so_options |= (opt))\n  218: /** Resets an IP pcb option (SOF_* flags) */\n  219: #define ip_reset_option(pcb, opt) ((pcb)->so_options &= ~(opt))\n  220  \n  221  #if LWIP_IPV4 && LWIP_IPV6\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/priv/tcp_priv.h:\n   78  /* Used within the TCP code only: */\n   79  struct tcp_pcb * tcp_alloc   (u8_t prio);\n   80: void             tcp_abandon (struct tcp_pcb *pcb, int reset);\n   81  err_t            tcp_send_empty_ack(struct tcp_pcb *pcb);\n   82  void             tcp_rexmit  (struct tcp_pcb *pcb);\n   ..\n  154  /** Flags used on input processing, not on pcb->flags\n  155  */\n  156: #define TF_RESET     (u8_t)0x08U   /* Connection was reset. */\n  157  #define TF_CLOSED    (u8_t)0x10U   /* Connection was successfully closed. */\n  158  #define TF_GOT_FIN   (u8_t)0x20U   /* Connection was closed by the remote end. */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/stats.h:\n  145    u32_t tcppassiveopens;\n  146    u32_t tcpattemptfails;\n  147:   u32_t tcpestabresets;\n  148    u32_t tcpoutsegs;\n  149    u32_t tcpretranssegs;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/lwip/tcp.h:\n  114   * @param err Error code to indicate why the pcb has been closed\n  115   *            ERR_ABRT: aborted through tcp_abort or by a TCP timer\n  116:  *            ERR_RST: the connection was reset by the remote host\n  117   */\n  118  typedef void  (*tcp_err_fn)(void *arg, err_t err);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/netif/ppp/ccp.h:\n   45  #define CCP_TERMREQ\t5\n   46  #define CCP_TERMACK\t6\n   47: #define CCP_RESETREQ\t14\n   48: #define CCP_RESETACK\t15\n   49  \n   50  /*\n   ..\n  151  extern const struct protent ccp_protent;\n  152  \n  153: void ccp_resetrequest(ppp_pcb *pcb);  /* Issue a reset-request. */\n  154  \n  155  #endif /* CCP_H */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/netif/ppp/fsm.h:\n   93  \n   94  typedef struct fsm_callbacks {\n   95:     void (*resetci)\t\t/* Reset our Configuration Information */\n   96  \t\t(fsm *);\n   97      int  (*cilen)\t\t/* Length of our Configuration Information */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/netif/ppp/mppe.h:\n  165  void mppe_set_key(ppp_pcb *pcb, ppp_mppe_state *state, u8_t *key);\n  166  void mppe_init(ppp_pcb *pcb, ppp_mppe_state *state, u8_t options);\n  167: void mppe_comp_reset(ppp_pcb *pcb, ppp_mppe_state *state);\n  168  err_t mppe_compress(ppp_pcb *pcb, ppp_mppe_state *state, struct pbuf **pb, u16_t protocol);\n  169: void mppe_decomp_reset(ppp_pcb *pcb, ppp_mppe_state *state);\n  170  err_t mppe_decompress(ppp_pcb *pcb, ppp_mppe_state *state, struct pbuf **pb);\n  171  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/netif/ppp/ppp.h:\n  394    ccp_options ccp_allowoptions;  /* what we'll agree to do */\n  395    ccp_options ccp_hisoptions;    /* what we agreed to do */\n  396:   u8_t ccp_localstate;           /* Local state (mainly for handling reset-reqs and reset-acks). */\n  397    u8_t ccp_receive_method;       /* Method chosen on receive path */\n  398    u8_t ccp_transmit_method;      /* Method chosen on transmit path */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/lwip2/include/netif/ppp/ppp_impl.h:\n  464  #endif /* unused */\n  465  void ccp_set(ppp_pcb *pcb, u8_t isopen, u8_t isup, u8_t receive_method, u8_t transmit_method);\n  466: void ccp_reset_comp(ppp_pcb *pcb);\n  467: void ccp_reset_decomp(ppp_pcb *pcb);\n  468  #if 0 /* unused */\n  469  int ccp_fatal_error(ppp_pcb *pcb);\n  ...\n  487  #if PPP_STATS_SUPPORT\n  488  void print_link_stats(void); /* Print stats, if available */\n  489: void reset_link_stats(int u); /* Reset (init) stats when link goes up */\n  490  void update_link_stats(int u); /* Get stats at link termination */\n  491  #endif /* PPP_STATS_SUPPORT */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/inc/bearssl_aead.h:\n   83   *     indirectly.\n   84   *\n   85:  *   - `br_xxx_reset()`\n   86   *\n   87   *     Start a new AEAD computation. The nonce value is provided as\n   ..\n  144   * following:\n  145   *\n  146:  *   - `reset`\n  147   *\n  148:  *     Pointer to the reset function, that allows starting a new\n  149   *     computation.\n  150   *\n  ...\n  188  \n  189  \t/**\n  190: \t * \\brief Reset an AEAD context.\n  191  \t *\n  192: \t * This function resets an already initialised AEAD context for\n  193  \t * a new computation run. Implementations and keys are\n  194  \t * conserved. This function can be called at any time; it\n  ...\n  205  \t * \\param len   AEAD nonce length (in bytes).\n  206  \t */\n  207: \tvoid (*reset)(const br_aead_class **cc, const void *iv, size_t len);\n  208  \n  209  \t/**\n  ...\n  259  \t * on the AEAD algorithm; it is written in the provided `tag`\n  260  \t * buffer. This call terminates the AEAD run: no data may be\n  261: \t * processed with that AEAD context afterwards, until `reset()`\n  262  \t * is called to initiate a new AEAD run.\n  263  \t *\n  ...\n  378   * in the GCM context.\n  379   *\n  380:  * After this function has been called, the `br_gcm_reset()` function must\n  381   * be called, to provide the IV for GCM computation.\n  382   *\n  ...\n  389  \n  390  /**\n  391:  * \\brief Reset a GCM context.\n  392   *\n  393:  * This function resets an already initialised GCM context for a new\n  394   * computation run. Implementations and keys are conserved. This function\n  395   * can be called at any time; it cancels any ongoing GCM computation that\n  ...\n  405   * \\param len   GCM nonce length (in bytes).\n  406   */\n  407: void br_gcm_reset(br_gcm_context *ctx, const void *iv, size_t len);\n  408  \n  409  /**\n  ...\n  458   * is written in the provided `tag` buffer. This call terminates the\n  459   * GCM run: no data may be processed with that GCM context afterwards,\n  460:  * until `br_gcm_reset()` is called to initiate a new GCM run.\n  461   *\n  462   * The tag value must normally be sent along with the encrypted data.\n  ...\n  505   * The tag is written in the provided `tag` buffer. This call terminates\n  506   * the GCM run: no data may be processed with that GCM context\n  507:  * afterwards, until `br_gcm_reset()` is called to initiate a new GCM\n  508   * run.\n  509   *\n  ...\n  615   * the provided context. The parameters are linked in the EAX context.\n  616   *\n  617:  * After this function has been called, the `br_eax_reset()` function must\n  618   * be called, to provide the nonce for EAX computation.\n  619   *\n  ...\n  628   * This function precomputes key-dependent data, and stores it in the\n  629   * provided `st` structure. This structure should then be used with\n  630:  * `br_eax_reset_pre_aad()`, or updated with `br_eax_get_aad_mac()`\n  631:  * and then used with `br_eax_reset_post_aad()`.\n  632   *\n  633   * The EAX context structure is unmodified by this call.\n  ...\n  639  \n  640  /**\n  641:  * \\brief Reset an EAX context.\n  642   *\n  643:  * This function resets an already initialised EAX context for a new\n  644   * computation run. Implementations and keys are conserved. This function\n  645   * can be called at any time; it cancels any ongoing EAX computation that\n  ...\n  656   * \\param len     EAX nonce length (in bytes).\n  657   */\n  658: void br_eax_reset(br_eax_context *ctx, const void *nonce, size_t len);\n  659  \n  660  /**\n  661:  * \\brief Reset an EAX context with a pre-AAD captured state.\n  662   *\n  663:  * This function is an alternative to `br_eax_reset()`, that reuses a\n  664   * previously captured state structure for lower per-message overhead.\n  665   * The state should have been populated with `br_eax_capture_state()`\n  ...\n  673   * After injection of the AAD and call to `br_eax_flip()`, at least\n  674   * one message byte must be provided. Empty messages are not supported\n  675:  * with this reset mode.\n  676   *\n  677   * \\param ctx     EAX context structure.\n  ...\n  680   * \\param len     EAX nonce length (in bytes).\n  681   */\n  682: void br_eax_reset_pre_aad(br_eax_context *ctx, const br_eax_state *st,\n  683  \tconst void *nonce, size_t len);\n  684  \n  685  /**\n  686:  * \\brief Reset an EAX context with a post-AAD captured state.\n  687   *\n  688:  * This function is an alternative to `br_eax_reset()`, that reuses a\n  689   * previously captured state structure for lower per-message overhead.\n  690   * The state should have been populated with `br_eax_capture_state()`\n  ...\n  694   * `br_eax_flip()` function MUST NOT be called. At least one byte of\n  695   * message data MUST be provided with `br_eax_run()`; empty messages\n  696:  * are not supported with this reset mode.\n  697   *\n  698   * \\param ctx     EAX context structure.\n  ...\n  701   * \\param len     EAX nonce length (in bytes).\n  702   */\n  703: void br_eax_reset_post_aad(br_eax_context *ctx, const br_eax_state *st,\n  704  \tconst void *nonce, size_t len);\n  705  \n  ...\n  737   * on the secret key and the additional data itself, but not on the\n  738   * nonce. The updated state `st` is meant to be used as parameter for a\n  739:  * further `br_eax_reset_post_aad()` call.\n  740   *\n  741   * \\param ctx   EAX context structure.\n  ...\n  771   * is written in the provided `tag` buffer. This call terminates the\n  772   * EAX run: no data may be processed with that EAX context afterwards,\n  773:  * until `br_eax_reset()` is called to initiate a new EAX run.\n  774   *\n  775   * The tag value must normally be sent along with the encrypted data.\n  ...\n  818   * The tag is written in the provided `tag` buffer. This call terminates\n  819   * the EAX run: no data may be processed with that EAX context\n  820:  * afterwards, until `br_eax_reset()` is called to initiate a new EAX\n  821   * run.\n  822   *\n  ...\n  914   * the provided context. The parameters are linked in the CCM context.\n  915   *\n  916:  * After this function has been called, the `br_ccm_reset()` function must\n  917   * be called, to provide the nonce for CCM computation.\n  918   *\n  ...\n  923  \n  924  /**\n  925:  * \\brief Reset a CCM context.\n  926   *\n  927:  * This function resets an already initialised CCM context for a new\n  928   * computation run. Implementations and keys are conserved. This function\n  929   * can be called at any time; it cancels any ongoing CCM computation that\n  ...\n  963   * \\return  1 on success, 0 on error.\n  964   */\n  965: int br_ccm_reset(br_ccm_context *ctx, const void *nonce, size_t nonce_len,\n  966  \tuint64_t aad_len, uint64_t data_len, size_t tag_len);\n  967  \n  ...\n  973   * Additional data can be injected in several chunks of arbitrary length,\n  974   * but the total amount MUST exactly match the value which was provided\n  975:  * to `br_ccm_reset()`.\n  976   *\n  977   * \\param ctx    CCM context structure.\n  ...\n 1003   * Data may be provided in several chunks of arbitrary length, provided\n 1004   * that the total length exactly matches the length provided to the\n 1005:  * `br_ccm_reset()` call.\n 1006   *\n 1007   * \\param ctx       CCM context structure.\n ....\n 1018   * run: all data must have been injected with `br_ccm_run()` (in zero,\n 1019   * one or more successive calls). After this function has been called,\n 1020:  * no more data can br processed; a `br_ccm_reset()` call is required\n 1021   * to start a new message.\n 1022   *\n 1023   * The tag length was provided upon context initialisation (last call\n 1024:  * to `br_ccm_reset()`); it is returned by this function.\n 1025   *\n 1026   * The tag value must normally be sent along with the encrypted data.\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/inc/bearssl_hash.h:\n   81   *\n   82   *     Initialise the provided context. Previous contents of the structure\n   83:  *     are ignored. This calls resets the context to the start of a new\n   84   *     hash computation; it also sets the first field of the context\n   85   *     structure (called `vtable`) to a pointer to the statically\n   ..\n  402   * \\brief MD5 context initialisation.\n  403   *\n  404:  * This function initialises or resets a context for a new MD5\n  405   * computation. It also sets the vtable pointer.\n  406   *\n  ...\n  426   *\n  427   * The MD5 output for the concatenation of all bytes injected in the\n  428:  * provided context since the last initialisation or reset call, is\n  429   * computed and written in the buffer pointed to by `out`. The context\n  430   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  441   * The running state for MD5 (output of the last internal block\n  442   * processing) is written in the buffer pointed to by `out`. The\n  443:  * number of bytes injected since the last initialisation or reset\n  444   * call is returned. The context is not modified.\n  445   *\n  ...\n  497   * \\brief SHA-1 context initialisation.\n  498   *\n  499:  * This function initialises or resets a context for a new SHA-1\n  500   * computation. It also sets the vtable pointer.\n  501   *\n  ...\n  521   *\n  522   * The SHA-1 output for the concatenation of all bytes injected in the\n  523:  * provided context since the last initialisation or reset call, is\n  524   * computed and written in the buffer pointed to by `out`. The context\n  525   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  536   * The running state for SHA-1 (output of the last internal block\n  537   * processing) is written in the buffer pointed to by `out`. The\n  538:  * number of bytes injected since the last initialisation or reset\n  539   * call is returned. The context is not modified.\n  540   *\n  ...\n  592   * \\brief SHA-224 context initialisation.\n  593   *\n  594:  * This function initialises or resets a context for a new SHA-224\n  595   * computation. It also sets the vtable pointer.\n  596   *\n  ...\n  616   *\n  617   * The SHA-224 output for the concatenation of all bytes injected in the\n  618:  * provided context since the last initialisation or reset call, is\n  619   * computed and written in the buffer pointed to by `out`. The context\n  620   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  631   * The running state for SHA-224 (output of the last internal block\n  632   * processing) is written in the buffer pointed to by `out`. The\n  633:  * number of bytes injected since the last initialisation or reset\n  634   * call is returned. The context is not modified.\n  635   *\n  ...\n  687   * \\brief SHA-256 context initialisation.\n  688   *\n  689:  * This function initialises or resets a context for a new SHA-256\n  690   * computation. It also sets the vtable pointer.\n  691   *\n  ...\n  715   *\n  716   * The SHA-256 output for the concatenation of all bytes injected in the\n  717:  * provided context since the last initialisation or reset call, is\n  718   * computed and written in the buffer pointed to by `out`. The context\n  719   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  731   * The running state for SHA-256 (output of the last internal block\n  732   * processing) is written in the buffer pointed to by `out`. The\n  733:  * number of bytes injected since the last initialisation or reset\n  734   * call is returned. The context is not modified.\n  735   *\n  ...\n  795   * \\brief SHA-384 context initialisation.\n  796   *\n  797:  * This function initialises or resets a context for a new SHA-384\n  798   * computation. It also sets the vtable pointer.\n  799   *\n  ...\n  819   *\n  820   * The SHA-384 output for the concatenation of all bytes injected in the\n  821:  * provided context since the last initialisation or reset call, is\n  822   * computed and written in the buffer pointed to by `out`. The context\n  823   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  834   * The running state for SHA-384 (output of the last internal block\n  835   * processing) is written in the buffer pointed to by `out`. The\n  836:  * number of bytes injected since the last initialisation or reset\n  837   * call is returned. The context is not modified.\n  838   *\n  ...\n  890   * \\brief SHA-512 context initialisation.\n  891   *\n  892:  * This function initialises or resets a context for a new SHA-512\n  893   * computation. It also sets the vtable pointer.\n  894   *\n  ...\n  918   *\n  919   * The SHA-512 output for the concatenation of all bytes injected in the\n  920:  * provided context since the last initialisation or reset call, is\n  921   * computed and written in the buffer pointed to by `out`. The context\n  922   * itself is not modified, so extra bytes may be injected afterwards\n  ...\n  934   * The running state for SHA-512 (output of the last internal block\n  935   * processing) is written in the buffer pointed to by `out`. The\n  936:  * number of bytes injected since the last initialisation or reset\n  937   * call is returned. The context is not modified.\n  938   *\n  ...\n 1009   * \\brief MD5+SHA-1 context initialisation.\n 1010   *\n 1011:  * This function initialises or resets a context for a new SHA-512\n 1012   * computation. It also sets the vtable pointer.\n 1013   *\n ....\n 1033   *\n 1034   * The MD5+SHA-1 output for the concatenation of all bytes injected in the\n 1035:  * provided context since the last initialisation or reset call, is\n 1036   * computed and written in the buffer pointed to by `out`. The context\n 1037   * itself is not modified, so extra bytes may be injected afterwards\n ....\n 1048   * The running state for MD5+SHA-1 (output of the last internal block\n 1049   * processing) is written in the buffer pointed to by `out`. The\n 1050:  * number of bytes injected since the last initialisation or reset\n 1051   * call is returned. The context is not modified.\n 1052   *\n ....\n 1168  \n 1169  /**\n 1170:  * \\brief Reset a multi-hasher context.\n 1171   *\n 1172   * This function prepares the context for a new hashing computation,\n ....\n 1195   *\n 1196   * The hash output for the concatenation of all bytes injected in the\n 1197:  * provided context since the last initialisation or reset call, is\n 1198   * computed and written in the buffer pointed to by `dst`. The hash\n 1199   * function to use is identified by `id` and must be one of the standard\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/inc/bearssl_ssl.h:\n  743  \t/*\n  744  \t * The error code. When non-zero, then the state is \"failed\" and\n  745: \t * no I/O may occur until reset.\n  746  \t */\n  747  \tint err;\n  ...\n  940  \t/*\n  941  \t * Multi-hasher for the handshake messages. The handshake handler\n  942: \t * is responsible for resetting it when appropriate.\n  943  \t */\n  944  \tbr_multihash_context mhash;\n  ...\n 1628   * \\brief Set the I/O buffer for the SSL engine.\n 1629   *\n 1630:  * Once this call has been made, `br_ssl_client_reset()` or\n 1631:  * `br_ssl_server_reset()` MUST be called before using the context.\n 1632   *\n 1633   * The provided buffer will be used as long as the engine context is\n ....\n 1661   * \\brief Set the I/O buffers for the SSL engine.\n 1662   *\n 1663:  * Once this call has been made, `br_ssl_client_reset()` or\n 1664:  * `br_ssl_server_reset()` MUST be called before using the context.\n 1665   *\n 1666   * This function is similar to `br_ssl_engine_set_buffer()`, except\n ....\n 1706   * asymmetric private key that you also store on the system) AND a\n 1707   * non-repeating value (e.g. current time, provided that the local clock\n 1708:  * cannot be reset or altered by the attacker).\n 1709   *\n 1710   * \\param cc     SSL engine context.\n ....\n 1718   * \\brief Get the \"server name\" in this engine.\n 1719   *\n 1720:  * For clients, this is the name provided with `br_ssl_client_reset()`;\n 1721   * for servers, this is the name received from the client as part of the\n 1722   * ClientHello message. If there is no such name (e.g. the client did\n ....\n 1819   *   - `BR_SSL_CLOSED`\n 1820   *\n 1821:  *     Engine is finished, no more I/O (until next reset).\n 1822   *\n 1823   *   - `BR_SSL_SENDREC`\n ....\n 1871   *\n 1872   * The error indicator is `BR_ERR_OK` (0) if no error was encountered\n 1873:  * since the last call to `br_ssl_client_reset()` or\n 1874:  * `br_ssl_server_reset()`. Other status values are \"sticky\": they\n 1875   * remain set, and prevent all I/O activity, until cleared. Only the\n 1876:  * reset calls clear the error indicator.\n 1877   *\n 1878   * \\param cc   SSL engine context.\n ....\n 2663  \n 2664  /**\n 2665:  * \\brief Prepare or reset a client context for a new connection.\n 2666   *\n 2667   * The `server_name` parameter is used to fill the SNI extension; the\n ....\n 2692   * \\return  0 on failure, 1 on success.\n 2693   */\n 2694: int br_ssl_client_reset(br_ssl_client_context *cc,\n 2695  \tconst char *server_name, int resume_session);\n 2696  \n ....\n 3758  \n 3759  /**\n 3760:  * \\brief Prepare or reset a server context for handling an incoming client.\n 3761   *\n 3762   * \\param cc   server context.\n 3763   * \\return  1 on success, 0 on error.\n 3764   */\n 3765: int br_ssl_server_reset(br_ssl_server_context *cc);\n 3766  \n 3767  /* ===================================================================== */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/samples/client_basic.c:\n  293  \n  294  \t/*\n  295: \t * Reset the client context, for a new handshake. We provide the\n  296  \t * target host name: it will be used for the SNI extension. The\n  297  \t * last parameter is 0: we are not trying to resume a session.\n  298  \t */\n  299: \tbr_ssl_client_reset(&sc, host, 0);\n  300  \n  301  \t/*\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/samples/server_basic.c:\n  387  \n  388  \t\t/*\n  389: \t\t * Reset the server context, for a new handshake.\n  390  \t\t */\n  391: \t\tbr_ssl_server_reset(&sc);\n  392  \n  393  \t\t/*\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/aead/ccm.c:\n   56  /* see bearssl_block.h */\n   57  int\n   58: br_ccm_reset(br_ccm_context *ctx, const void *nonce, size_t nonce_len,\n   59  \tuint64_t aad_len, uint64_t data_len, size_t tag_len)\n   60  {\n   ..\n  192  \n  193  \t/*\n  194: \t * Counter was already set by br_ccm_reset().\n  195  \t */\n  196  }\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/aead/eax.c:\n  191  /* see bearssl_aead.h */\n  192  void\n  193: br_eax_reset(br_eax_context *ctx, const void *nonce, size_t len)\n  194  {\n  195  \t/*\n  ...\n  208  \t/*\n  209  \t * We use ctx->head[0] as temporary flag to mark that we are\n  210: \t * using a \"normal\" reset().\n  211  \t */\n  212  \tctx->head[0] = 0;\n  ...\n  215  /* see bearssl_aead.h */\n  216  void\n  217: br_eax_reset_pre_aad(br_eax_context *ctx, const br_eax_state *st,\n  218  \tconst void *nonce, size_t len)\n  219  {\n  ...\n  243  /* see bearssl_aead.h */\n  244  void\n  245: br_eax_reset_post_aad(br_eax_context *ctx, const br_eax_state *st,\n  246  \tconst void *nonce, size_t len)\n  247  {\n  ...\n  302  \n  303  \t/*\n  304: \t * ctx->head[0] may be non-zero if the context was reset with\n  305  \t * a pre-AAD captured state. In that case, ctx->ctr[] contains\n  306  \t * the state for OMAC^2 _after_ processing the first block.\n  ...\n  508  \t16,\n  509  \t(void (*)(const br_aead_class **, const void *, size_t))\n  510: \t\t&br_eax_reset,\n  511  \t(void (*)(const br_aead_class **, const void *, size_t))\n  512  \t\t&br_eax_aad_inject,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/aead/gcm.c:\n   74  /* see bearssl_aead.h */\n   75  void\n   76: br_gcm_reset(br_gcm_context *ctx, const void *iv, size_t len)\n   77  {\n   78  \t/*\n   ..\n  301  \t16,\n  302  \t(void (*)(const br_aead_class **, const void *, size_t))\n  303: \t\t&br_gcm_reset,\n  304  \t(void (*)(const br_aead_class **, const void *, size_t))\n  305  \t\t&br_gcm_aad_inject,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/inner.h:\n 2073  \n 2074  /*\n 2075:  * Reset the handshake-related parts of the engine.\n 2076   */\n 2077: void br_ssl_engine_hs_reset(br_ssl_engine_context *cc,\n 2078  \tvoid (*hsinit)(void *), void (*hsrun)(void *));\n 2079  \n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_client.c:\n   40  /* see bearssl_ssl.h */\n   41  int\n   42: br_ssl_client_reset(br_ssl_client_context *cc,\n   43  \tconst char *server_name, int resume_session)\n   44  {\n   ..\n   73  \t}\n   74  \n   75: \tbr_ssl_engine_hs_reset(&cc->eng,\n   76  \t\tbr_ssl_hs_client_init_main, br_ssl_hs_client_run);\n   77  \treturn br_ssl_engine_last_error(&cc->eng) == BR_ERR_OK;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_client_full.c:\n  105  \n  106  \t/*\n  107: \t * Reset client context and set supported versions from TLS-1.0\n  108  \t * to TLS-1.2 (inclusive).\n  109  \t */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_engine.c:\n  135   * I/O failed for some reason (invalid received data, not enough room\n  136   * for the next record...). No I/O may ever occur again for this context,\n  137:  * until an explicit reset is performed. This mode, and the error code,\n  138   * are also used for protocol errors, especially handshake errors.\n  139   *\n  ...\n 1295  /* see inner.h */\n 1296  void\n 1297: br_ssl_engine_hs_reset(br_ssl_engine_context *cc,\n 1298  \tvoid (*hsinit)(void *), void (*hsrun)(void *))\n 1299  {\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server.c:\n   40  /* see bearssl_ssl.h */\n   41  int\n   42: br_ssl_server_reset(br_ssl_server_context *cc)\n   43  {\n   44  \tbr_ssl_engine_set_buffer(&cc->eng, NULL, 0, 0);\n   ..\n   47  \t}\n   48  \tcc->eng.reneg = 0;\n   49: \tbr_ssl_engine_hs_reset(&cc->eng,\n   50  \t\tbr_ssl_hs_server_init_main, br_ssl_hs_server_run);\n   51  \treturn br_ssl_engine_last_error(&cc->eng) == BR_ERR_OK;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_full_ec.c:\n   89  \n   90  \t/*\n   91: \t * Reset server context and set supported versions from TLS-1.0\n   92  \t * to TLS-1.2 (inclusive).\n   93  \t */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_full_rsa.c:\n   79  \n   80  \t/*\n   81: \t * Reset server context and set supported versions from TLS-1.0\n   82  \t * to TLS-1.2 (inclusive).\n   83  \t */\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_mine2c.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_mine2g.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_minf2c.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_minf2g.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_minr2g.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_minu2g.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/ssl/ssl_server_minv2g.c:\n   36  \n   37  \t/*\n   38: \t * Reset server context and set supported versions to TLS-1.2 (only).\n   39  \t */\n   40  \tbr_ssl_server_zero(cc);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/x509/x509_minimal.c:\n  126   *  \"interesting points\":\n  127   *\n  128:  *     -- Start of the TBS: the multihash engine is reset and activated.\n  129   *\n  130   *     -- Start of the issuer DN: the secondary hash engine is started,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/src/x509/x509_minimal.t0:\n   60   *  \"interesting points\":\n   61   *\n   62:  *     -- Start of the TBS: the multihash engine is reset and activated.\n   63   *\n   64   *     -- Start of the issuer DN: the secondary hash engine is started,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/test/test_crypto.c:\n 6194  \t\t */\n 6195  \t\tmemcpy(tmp, plain, plain_len);\n 6196: \t\tbr_gcm_reset(&gc, iv, iv_len);\n 6197  \t\tbr_gcm_aad_inject(&gc, aad, aad_len);\n 6198  \t\tbr_gcm_flip(&gc);\n ....\n 6202  \t\tcheck_equals(\"KAT GCM 2\", out, tag, 16);\n 6203  \n 6204: \t\tbr_gcm_reset(&gc, iv, iv_len);\n 6205  \t\tbr_gcm_aad_inject(&gc, aad, aad_len);\n 6206  \t\tbr_gcm_flip(&gc);\n ....\n 6222  \t\t * Byte-by-byte injection.\n 6223  \t\t */\n 6224: \t\tbr_gcm_reset(&gc, iv, iv_len);\n 6225  \t\tfor (v = 0; v < aad_len; v ++) {\n 6226  \t\t\tbr_gcm_aad_inject(&gc, aad + v, 1);\n ....\n 6236  \t\t}\n 6237  \n 6238: \t\tbr_gcm_reset(&gc, iv, iv_len);\n 6239  \t\tfor (v = 0; v < aad_len; v ++) {\n 6240  \t\t\tbr_gcm_aad_inject(&gc, aad + v, 1);\n ....\n 6253  \t\tfor (v = 0; v < aad_len; v ++) {\n 6254  \t\t\tmemcpy(tmp, cipher, plain_len);\n 6255: \t\t\tbr_gcm_reset(&gc, iv, iv_len);\n 6256  \t\t\taad[v] ^= 0x04;\n 6257  \t\t\tbr_gcm_aad_inject(&gc, aad, aad_len);\n ....\n 6272  \t\t\tmemset(out, 0x54, sizeof out);\n 6273  \t\t\tmemcpy(tmp, plain, plain_len);\n 6274: \t\t\tbr_gcm_reset(&gc, iv, iv_len);\n 6275  \t\t\tbr_gcm_aad_inject(&gc, aad, aad_len);\n 6276  \t\t\tbr_gcm_flip(&gc);\n ....\n 6286  \n 6287  \t\t\tmemcpy(tmp, plain, plain_len);\n 6288: \t\t\tbr_gcm_reset(&gc, iv, iv_len);\n 6289  \t\t\tbr_gcm_aad_inject(&gc, aad, aad_len);\n 6290  \t\t\tbr_gcm_flip(&gc);\n ....\n 6427  \t\t */\n 6428  \t\tmemcpy(tmp, plain, plain_len);\n 6429: \t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6430  \t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6431  \t\tbr_eax_flip(&ec);\n ....\n 6435  \t\tcheck_equals(\"KAT EAX 2\", out, tag, 16);\n 6436  \n 6437: \t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6438  \t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6439  \t\tbr_eax_flip(&ec);\n ....\n 6455  \t\t * Byte-by-byte injection.\n 6456  \t\t */\n 6457: \t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6458  \t\tfor (v = 0; v < aad_len; v ++) {\n 6459  \t\t\tbr_eax_aad_inject(&ec, aad + v, 1);\n ....\n 6469  \t\t}\n 6470  \n 6471: \t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6472  \t\tfor (v = 0; v < aad_len; v ++) {\n 6473  \t\t\tbr_eax_aad_inject(&ec, aad + v, 1);\n ....\n 6486  \t\tfor (v = 0; v < aad_len; v ++) {\n 6487  \t\t\tmemcpy(tmp, cipher, plain_len);\n 6488: \t\t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6489  \t\t\taad[v] ^= 0x04;\n 6490  \t\t\tbr_eax_aad_inject(&ec, aad, aad_len);\n ....\n 6505  \t\t\tmemset(out, 0x54, sizeof out);\n 6506  \t\t\tmemcpy(tmp, plain, plain_len);\n 6507: \t\t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6508  \t\t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6509  \t\t\tbr_eax_flip(&ec);\n ....\n 6519  \n 6520  \t\t\tmemcpy(tmp, plain, plain_len);\n 6521: \t\t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6522  \t\t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6523  \t\t\tbr_eax_flip(&ec);\n ....\n 6546  \n 6547  \t\tif (aad_len > 0) {\n 6548: \t\t\tbr_eax_reset_pre_aad(&ec, &st, nonce, nonce_len);\n 6549  \t\t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6550  \t\t\tbr_eax_flip(&ec);\n ....\n 6555  \t\t\tcheck_equals(\"KAT EAX 10\", out, tag, 16);\n 6556  \n 6557: \t\t\tbr_eax_reset_pre_aad(&ec, &st, nonce, nonce_len);\n 6558  \t\t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6559  \t\t\tbr_eax_flip(&ec);\n ....\n 6568  \t\t * be non-empty.\n 6569  \t\t */\n 6570: \t\tbr_eax_reset(&ec, nonce, nonce_len);\n 6571  \t\tbr_eax_aad_inject(&ec, aad, aad_len);\n 6572  \t\tbr_eax_flip(&ec);\n 6573  \t\tbr_eax_get_aad_mac(&ec, &st);\n 6574  \n 6575: \t\tbr_eax_reset_post_aad(&ec, &st, nonce, nonce_len);\n 6576  \t\tmemcpy(tmp, plain, plain_len);\n 6577  \t\tbr_eax_run(&ec, 1, tmp, plain_len);\n ....\n 6580  \t\tcheck_equals(\"KAT EAX 14\", out, tag, 16);\n 6581  \n 6582: \t\tbr_eax_reset_post_aad(&ec, &st, nonce, nonce_len);\n 6583  \t\tbr_eax_run(&ec, 0, tmp, plain_len);\n 6584  \t\tbr_eax_get_tag(&ec, out);\n ....\n 6702  \t\t */\n 6703  \t\tmemcpy(tmp, plain, plain_len);\n 6704: \t\tif (!br_ccm_reset(&ec, nonce, nonce_len,\n 6705  \t\t\taad_len, plain_len, tag_len))\n 6706  \t\t{\n 6707: \t\t\tfprintf(stderr, \"CCM reset failed\\n\");\n 6708  \t\t\texit(EXIT_FAILURE);\n 6709  \t\t}\n ....\n 6718  \t\tcheck_equals(\"KAT CCM 2\", out, tag, tag_len);\n 6719  \n 6720: \t\tbr_ccm_reset(&ec, nonce, nonce_len,\n 6721  \t\t\taad_len, plain_len, tag_len);\n 6722  \t\tbr_ccm_aad_inject(&ec, aad, aad_len);\n ....\n 6739  \t\t * Byte-by-byte injection.\n 6740  \t\t */\n 6741: \t\tbr_ccm_reset(&ec, nonce, nonce_len,\n 6742  \t\t\taad_len, plain_len, tag_len);\n 6743  \t\tfor (v = 0; v < aad_len; v ++) {\n ....\n 6754  \t\t}\n 6755  \n 6756: \t\tbr_ccm_reset(&ec, nonce, nonce_len,\n 6757  \t\t\taad_len, plain_len, tag_len);\n 6758  \t\tfor (v = 0; v < aad_len; v ++) {\n ....\n 6772  \t\tfor (v = 0; v < aad_len; v ++) {\n 6773  \t\t\tmemcpy(tmp, cipher, plain_len);\n 6774: \t\t\tbr_ccm_reset(&ec, nonce, nonce_len,\n 6775  \t\t\t\taad_len, plain_len, tag_len);\n 6776  \t\t\taad[v] ^= 0x04;\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/test/test_speed.c:\n  470  \t\tvt->init(&ac.vtable, key, key_len);\n  471  \t\tbr_eax_init(&ec, &ac.vtable);\n  472: \t\tbr_eax_reset(&ec, nonce, sizeof nonce);\n  473  \t\tbr_eax_aad_inject(&ec, aad, sizeof aad);\n  474  \t\tbr_eax_flip(&ec);\n  ...\n  486  \t\t\tvt->init(&ac.vtable, key, key_len);\n  487  \t\t\tbr_eax_init(&ec, &ac.vtable);\n  488: \t\t\tbr_eax_reset(&ec, nonce, sizeof nonce);\n  489  \t\t\tbr_eax_aad_inject(&ec, aad, sizeof aad);\n  490  \t\t\tbr_eax_flip(&ec);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/test/test_x509.c:\n  179  \n  180  static void\n  181: SB_reset(string_builder *sb)\n  182  {\n  183  \tSB_set_length(sb, 0);\n  ...\n  698  \t\tint lcwb;\n  699  \n  700: \t\tSB_reset(line_builder);\n  701  \n  702  \t\t/*\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/tools/client.c:\n 1053  \n 1054  \tbr_ssl_engine_set_buffer(&cc.eng, iobuf, iobuf_len, bidi);\n 1055: \tbr_ssl_client_reset(&cc, sni, 0);\n 1056  \n 1057  \t/*\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/tools/server.c:\n 1184  \t\t\tgoto server_exit_error;\n 1185  \t\t}\n 1186: \t\tbr_ssl_server_reset(&cc);\n 1187  \t\trun_flags = (verbose ? RUN_ENGINE_VERBOSE : 0)\n 1188  \t\t\t| (trace ? RUN_ENGINE_TRACE : 0);\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/ssl/bearssl/tools/twrch.c:\n  894  \t */\n  895  \tif (is_client) {\n  896: \t\tbr_ssl_client_reset(&cc.cnt, sni, 0);\n  897  \t}\n  898  \tif (is_server) {\n  899: \t\tbr_ssl_server_reset(&cc.srv);\n  900  \t}\n  901  \n  ...\n  940  \t\t\t\t\t}\n  941  \t\t\t\t\tif (is_client) {\n  942: \t\t\t\t\t\tbr_ssl_client_reset(\n  943  \t\t\t\t\t\t\t&cc.cnt, sni, 1);\n  944  \t\t\t\t\t}\n  945  \t\t\t\t\tif (is_server) {\n  946: \t\t\t\t\t\tbr_ssl_server_reset(&cc.srv);\n  947  \t\t\t\t\t}\n  948  \t\t\t\t\tbr_sslio_init(&ioc, &cc.eng,\n  ...\n  972  \t\t\t\t}\n  973  \t\t\t\tif (is_client) {\n  974: \t\t\t\t\tbr_ssl_client_reset(&cc.cnt, sni, 1);\n  975  \t\t\t\t}\n  976  \t\t\t\tif (is_server) {\n  977: \t\t\t\t\tbr_ssl_server_reset(&cc.srv);\n  978  \t\t\t\t}\n  979  \t\t\t\tbr_sslio_init(&ioc, &cc.eng,\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/variants/wifi_slot/analogRead.cpp:\n   38  \n   39  void initVariant() {\n   40:   // we need to reset analog mux. When ANALOG_INPUT_SELECTOR_PIN is high\n   41    // on ~0.4 ms, mux channel is becoming 0.\n   42    // Mux channel is swithing on back \\_ front. But there is no switching\n   43:   // - rc reset is still high when ANALOG_INPUT_SELECTOR_PIN became low\n   44:   uint16_t resetDelay = 777;\n   45    pinMode(ANALOG_INPUT_SELECTOR_PIN, OUTPUT);\n   46    digitalWrite(ANALOG_INPUT_SELECTOR_PIN, HIGH);\n   47:   delayMicroseconds(resetDelay);\n   48    digitalWrite(ANALOG_INPUT_SELECTOR_PIN, LOW);\n   49:   delayMicroseconds(resetDelay);\n   50  }\n   51  \n\n1027 matches across 196 files\n\n\nSearching 1742 files for \"Hardware Watchdog\"\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp:\n   97  {\n   98      /// Please don't stop software watchdog too long (less than 6 seconds),\n   99:     /// otherwise it will trigger hardware watchdog reset.\n  100      system_soft_wdt_stop();\n  101  }\n  ...\n  375        strcpy_P(buff, PSTR(\"Power on\"));\n  376      } else if (resetInfo.reason == REASON_WDT_RST) { // hardware watch dog reset\n  377:       strcpy_P(buff, PSTR(\"Hardware Watchdog\"));\n  378      } else if (resetInfo.reason == REASON_EXCEPTION_RST) { // exception reset, GPIO status won’t change\n  379        strcpy_P(buff, PSTR(\"Exception\"));\n\n/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/GDBStub/src/internal/gdbstub.c:\n  120  static int32_t singleStepPs=-1;\t\t\t//Stores ps when single-stepping instruction. -1 when not in use.\n  121  \n  122: //Small function to feed the hardware watchdog. Needed to stop the ESP from resetting\n  123  //due to a watchdog timeout while reading a command.\n  124  static void ATTR_GDBFN keepWDTalive() {\n\n3 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 196398,
				"line_ending": "Unix",
				"name": "Find Results",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp",
			"settings":
			{
				"buffer_size": 14824,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Platformio.sublime-build",
					""
				],
				[
					"Packages/User/Platformio.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Platformio.sublime-build",
					"Upload"
				]
			],
			[
				"Packages/User/Platformio.sublime-build",
				"Upload"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Indentation: Reindent Lines"
			],
			[
				"uni",
				"Build With: Platformio - Clean"
			],
			[
				"comp",
				"Deviot: Compile"
			],
			[
				"set de",
				"Set Syntax: Deviot"
			],
			[
				"c",
				"Deviot: Compile"
			],
			[
				"se thml",
				"Set Syntax: HTML"
			],
			[
				"set js",
				"Set Syntax: JavaScript"
			],
			[
				"set hm",
				"Set Syntax: HTML"
			],
			[
				"set ht",
				"Set Syntax: HTML (Tcl)"
			],
			[
				"set sy de",
				"Set Syntax: Deviot"
			],
			[
				"se d",
				"Set Syntax: Deviot"
			],
			[
				"se de",
				"Set Syntax: Deviot"
			],
			[
				"de",
				"Deviot: Examples"
			],
			[
				"set html",
				"Set Syntax: HTML"
			],
			[
				"se ja",
				"Set Syntax: JavaScript"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"set d",
				"Set Syntax: Deviot"
			],
			[
				"macro",
				"Snippet: E MACRO"
			],
			[
				"macr",
				"Snippet: sE MACRO"
			],
			[
				"set jav",
				"Set Syntax: JavaScript"
			],
			[
				"set j",
				"Set Syntax: Java"
			],
			[
				"se",
				"Snippet: E MACRO"
			],
			[
				"se m",
				"Snippet: cE MACRO"
			],
			[
				"ce",
				"Snippet: cE MACRO"
			],
			[
				"E ma",
				"Snippet: E MACRO"
			],
			[
				"sE",
				"Snippet: sE MACRO"
			],
			[
				"cE",
				"Snippet: cE MACRO"
			],
			[
				"E",
				"Snippet: E MACRO"
			],
			[
				"E MA",
				"Snippet: E MACRO"
			],
			[
				"undef",
				"Snippet: Jindra Macro undef"
			],
			[
				"\tdefine",
				"Snippet: Deviot Macro define"
			],
			[
				"snipp",
				"Snippet: Deviot abs()"
			],
			[
				"com",
				"Deviot: Compile"
			],
			[
				"can",
				"Build: Cancel"
			],
			[
				"s dev",
				"Set Syntax: Deviot"
			],
			[
				"d ser",
				"Deviot: Serial Port(s)"
			],
			[
				"s de",
				"Set Syntax: Deviot"
			],
			[
				"upl",
				"Deviot: Upload"
			],
			[
				"a dev",
				"Set Syntax: Deviot"
			],
			[
				"moni",
				"Deviot: Start/Stop Monitor"
			],
			[
				"serial",
				"Deviot: Serial Port(s)"
			],
			[
				"mon",
				"Deviot: Start/Stop Monitor"
			],
			[
				"up",
				"Deviot: Upload"
			],
			[
				"uplo",
				"Deviot: Upload"
			],
			[
				"Deviot: u",
				"Deviot: Upload"
			],
			[
				"setde",
				"Set Syntax: Deviot"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"html",
				"HTMLPrettify"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa ins",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Preferences: Package Control Settings – Default"
			],
			[
				"htm",
				"Set Syntax: HTML"
			],
			[
				"got",
				"Go To Definition"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"DEV",
				"Set Syntax: Deviot IoT"
			],
			[
				"dev",
				"Set Syntax: Deviot IoT"
			],
			[
				"packeremo",
				"Package Control: Remove Package"
			],
			[
				"jav",
				"Set Syntax: JavaScript"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"glue",
				"Glue - Launch"
			],
			[
				"DEVI",
				"Set Syntax: Deviot IoT"
			],
			[
				"package u",
				"Package Control: Upgrade Package"
			],
			[
				"d",
				"Set Syntax: Deviot IoT"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"packat",
				"Package Control: List Packages"
			],
			[
				"synta",
				"Set Syntax: Java"
			],
			[
				"syn",
				"Set Syntax: NAnt Build File"
			],
			[
				"devi",
				"Set Syntax: Deviot IoT"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"devio",
				"Set Syntax: Deviot IoT"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"setc",
				"Set Syntax: C++"
			],
			[
				"build",
				"Build: Cancel"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"remove",
				"Package Control: Remove Channel"
			],
			[
				"syntade",
				"Set Syntax: Deviot IoT"
			],
			[
				"syntc",
				"Set Syntax: Objective-C++"
			],
			[
				"synde",
				"Set Syntax: Deviot IoT"
			],
			[
				"git",
				"git: branch"
			],
			[
				"stat",
				"git: status"
			],
			[
				"gitb",
				"git: branch"
			],
			[
				"push",
				"git: push"
			],
			[
				"stage",
				"git: commit including unstaged files"
			],
			[
				"gitP",
				"git: push"
			],
			[
				"g",
				"git: commit"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"glue telnet 192.168.0.12",
			"hi",
			"platformio platform update --only-check",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266"
	],
	"file_history":
	[
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/WString.h",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/pgmspace.h",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/tools/sdk/include/c_types.h",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/time.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/internet_comunication.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/HTTPSRedirect.h",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/RemoteDebug/RemoteDebug.cpp",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/RemoteDebug/RemoteDebug.h",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/DisplayingData.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/wifi.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/responseProcesing.ino",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/Bojler/platformio.ini",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/SPIFFS.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/dataLoging.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/curentMetter.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/OTA.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/debugging.ino",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/1532023978/src/1532023978.ino",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/1532022115/src/1532022115.ino",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/1532021601/src/1532021601.ino",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/testingUploadScetch/platformio.ini",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/1531918702/src/1531918702.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/Bojler.sublime-project",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/HeatingControl.ino",
		"/Users/jindra/Documents/Platform.IO Projects/PlatformioBuilds/1531867214/src/1531867214.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/symbolsDefine.h",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/WaterFlowMetter.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/settings.ino",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/define.h",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/Bojler.ino.cpp",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/Bojler.sublime-workspace",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/BojlerTesting.sublime-workspace",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/BojlerTesting.sublime-project",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting",
		"/Users/jindra/Documents/Platform.IO Projects/Bojler/BojlerTesting.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/temperatureModule.ino",
		"/Users/jindra/Documents/Platform.IO Projects/TwoPRograms/TwoPRograms.ino",
		"/Users/jindra/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/exception",
		"/Users/jindra/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/bits/cpp_type_traits.h",
		"/Users/jindra/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/bits/functexcept.h",
		"/Users/jindra/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/xtensa-lx106-elf/bits/c++config.h",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266WiFi/src/ESP8266WiFi.h",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/ESP8266httpUpdate/src/ESP8266httpUpdate.h",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Udp.h",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/IPAddress.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/HeatingControl.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/curentMetter.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/WaterFlowMetter.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/DisplayingData.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/internet_comunication.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/HTTPSRedirect.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/wifi.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/define.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/settings.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/DisplayMenu.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/responseProcesing.ino",
		"/Users/jindra/Downloads/IOT-Appstore-master/IotAppStoreLoaderV1/IotAppStoreLoaderV1.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/symbolsDefine.h",
		"/Users/jindra/Documents/Arduino/libraries/EspSaveCrash-masterArduino/src/EspSaveCrash.cpp",
		"/Users/jindra/.platformio/packages/framework-arduinoespressif8266/libraries/SPI/SPI.h",
		"/Users/jindra/Documents/Arduino/libraries/LiquidCrystal-I2C-library-master/LiquidCrystal_I2C.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/debugging.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/TaskerModified.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/BojlerTesting.ino",
		"/Users/jindra/Documents/Arduino/libraries/Time_ID44/TimeLib.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/time.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/BojlerTesting.ino.cpp",
		"/tmp/Deviot/BojlerTesting/platformio.ini",
		"/tmp/Deviot/1529931966/src/1529931966.ino",
		"/Users/jindra/Documents/Arduino/Sketchbooks/dBi scanner/dBi scanner.ino",
		"/Users/jindra/Documents/Arduino/Sketchbooks/WiFi SCan/WiFi SCan.ino",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/dataLoging.ino",
		"/tmp/Deviot/1524999277/src/1524999277.ino",
		"/private/tmp/Deviot/1524999277/src/1524999277.ino",
		"/Users/jindra/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/string.h",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/OTA.ino",
		"/Users/jindra/Downloads/blank_1MB.bin",
		"/Users/jindra/Documents/Platform.IO Projects/BojlerTesting/SPIFFS.ino",
		"/tmp/Deviot/1524852365/src/1524852365.ino",
		"/private/tmp/Deviot/1524819769/src/1524819769.ino",
		"/tmp/Deviot/1524819769/src/1524819769.ino",
		"/Users/jindra/Documents/Arduino/libraries/RemoteDebug/RemoteDebug.cpp",
		"/Users/jindra/Documents/Arduino/libraries/RemoteDebug/RemoteDebug.h",
		"/tmp/Deviot/1524768565/src/1524768565.ino",
		"/private/tmp/Deviot/1524768565/src/1524768565.ino",
		"/private/tmp/Deviot/1524767832/src/1524767832.ino",
		"/tmp/Deviot/1524767832/src/1524767832.ino",
		"/tmp/Deviot/1524343729/src/1524343729.ino",
		"/private/tmp/Deviot/1524343729/src/1524343729.ino",
		"/private/var/folders/2d/ty0jy3q97fv5vyyyk5mtq7f80000gn/T/beb8f691-7198-495d-b64d-8e428376dbcf/www/wp-config.php",
		"/private/tmp/Deviot/1522838300/src/1522838300.ino",
		"/tmp/Deviot/1522838300/src/1522838300.ino",
		"/Users/jindra/Desktop/Strojové učení/Start.html",
		"/Users/jindra/Desktop/Strojové učení/script.html",
		"/Users/jindra/Downloads/aresdata.js.txt",
		"/tmp/Deviot/1521767237/src/1521767237.ino",
		"/private/tmp/Deviot/1521767237/src/1521767237.ino",
		"/tmp/Deviot/1521302616/src/1521302616.ino",
		"/private/tmp/Deviot/1521302616/src/1521302616.ino",
		"/tmp/Deviot/temperatureModule/platformio.ini",
		"/tmp/Deviot/1521085275/src/1521085275.ino",
		"/private/tmp/Deviot/1521085275/src/1521085275.ino",
		"/tmp/Deviot/1521080997/src/1521080997.ino",
		"/private/tmp/Deviot/1521080997/src/1521080997.ino",
		"/tmp/Deviot/1521080324/src/1521080324.ino",
		"/private/tmp/Deviot/1521080324/src/1521080324.ino",
		"/private/tmp/Deviot/1521080187/src/1521080187.ino",
		"/tmp/Deviot/1521080187/src/1521080187.ino",
		"/tmp/Deviot/1521074707/src/1521074707.ino",
		"/private/tmp/Deviot/1521074707/src/1521074707.ino",
		"/private/tmp/Deviot/1521074261/src/1521074261.ino",
		"/tmp/Deviot/1521074261/src/1521074261.ino",
		"/tmp/Deviot/1521073771/src/1521073771.ino",
		"/private/tmp/Deviot/1521073771/src/1521073771.ino",
		"/tmp/Deviot/1521073351/src/1521073351.ino",
		"/private/tmp/Deviot/1521073351/src/1521073351.ino",
		"/tmp/Deviot/1521071242/src/1521071242.ino",
		"/private/tmp/Deviot/1521071242/src/1521071242.ino",
		"/private/tmp/Deviot/1521067363/src/1521067363.ino",
		"/tmp/Deviot/1521067363/src/1521067363.ino",
		"/tmp/Deviot/1521066021/src/1521066021.ino",
		"/private/tmp/Deviot/1521066021/src/1521066021.ino",
		"/private/tmp/Deviot/1521065646/src/1521065646.ino",
		"/tmp/Deviot/1521065646/src/1521065646.ino",
		"/tmp/Deviot/1521062280/src/1521062280.ino",
		"/private/tmp/Deviot/1521062280/src/1521062280.ino",
		"/private/tmp/Deviot/1521053387/src/1521053387.ino"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"/Users/jindra/.platformio/packages/framework-arduinoespressif8266"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"c_str",
			"(String)",
			"Hardware Watchdog",
			"IRAM",
			"reset",
			"\");",
			"print(\"",
			"print",
			"Software/System",
			"\n    ",
			"Software/System restart",
			"memcpy_P",
			"pgm_read",
			"define PSTR",
			"define",
			"define F(",
			"Searching",
			"define F",
			"ICACHE_RODATA_ATTR"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"IRAM",
			"reset",
			"Software/System",
			"\n    ",
			"memcpy_P",
			"define",
			"Searching",
			"ICACHE_RODATA_ATTR"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 196398,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										242,
										250
									],
									[
										457,
										465
									],
									[
										617,
										625
									],
									[
										792,
										800
									],
									[
										925,
										933
									],
									[
										1090,
										1098
									],
									[
										1304,
										1312
									],
									[
										1469,
										1477
									],
									[
										1655,
										1663
									],
									[
										1812,
										1820
									],
									[
										1953,
										1961
									],
									[
										2156,
										2164
									],
									[
										2401,
										2409
									],
									[
										2691,
										2699
									],
									[
										2997,
										3005
									],
									[
										3078,
										3086
									],
									[
										3192,
										3200
									],
									[
										3273,
										3281
									],
									[
										3351,
										3359
									],
									[
										3442,
										3450
									],
									[
										3468,
										3476
									],
									[
										3503,
										3511
									],
									[
										3529,
										3537
									],
									[
										3564,
										3572
									],
									[
										3591,
										3599
									],
									[
										3627,
										3635
									],
									[
										3653,
										3661
									],
									[
										3689,
										3697
									],
									[
										3714,
										3722
									],
									[
										3748,
										3756
									],
									[
										3773,
										3781
									],
									[
										3808,
										3816
									],
									[
										3833,
										3841
									],
									[
										3868,
										3876
									],
									[
										3894,
										3902
									],
									[
										3930,
										3938
									],
									[
										3956,
										3964
									],
									[
										3992,
										4000
									],
									[
										4016,
										4024
									],
									[
										4240,
										4248
									],
									[
										4525,
										4533
									],
									[
										4874,
										4882
									],
									[
										5097,
										5105
									],
									[
										5425,
										5433
									],
									[
										5911,
										5934
									],
									[
										6462,
										6477
									],
									[
										6856,
										6861
									],
									[
										6868,
										6873
									],
									[
										7071,
										7076
									],
									[
										7109,
										7114
									],
									[
										7131,
										7136
									],
									[
										7166,
										7171
									],
									[
										7214,
										7219
									],
									[
										7241,
										7246
									],
									[
										7281,
										7286
									],
									[
										7323,
										7328
									],
									[
										7347,
										7352
									],
									[
										7384,
										7389
									],
									[
										7430,
										7435
									],
									[
										7456,
										7461
									],
									[
										7691,
										7696
									],
									[
										7729,
										7734
									],
									[
										7751,
										7756
									],
									[
										7786,
										7791
									],
									[
										7834,
										7839
									],
									[
										7861,
										7866
									],
									[
										7901,
										7906
									],
									[
										7943,
										7948
									],
									[
										7967,
										7972
									],
									[
										8004,
										8009
									],
									[
										8050,
										8055
									],
									[
										8076,
										8081
									],
									[
										8287,
										8292
									],
									[
										8335,
										8340
									],
									[
										8357,
										8362
									],
									[
										8398,
										8403
									],
									[
										8446,
										8451
									],
									[
										8468,
										8473
									],
									[
										8721,
										8726
									],
									[
										8935,
										8940
									],
									[
										9210,
										9215
									],
									[
										9257,
										9262
									],
									[
										9279,
										9284
									],
									[
										9323,
										9328
									],
									[
										9380,
										9385
									],
									[
										9407,
										9412
									],
									[
										9753,
										9758
									],
									[
										9800,
										9805
									],
									[
										9822,
										9827
									],
									[
										9866,
										9871
									],
									[
										9923,
										9928
									],
									[
										9950,
										9955
									],
									[
										10278,
										10283
									],
									[
										10319,
										10324
									],
									[
										10341,
										10346
									],
									[
										10379,
										10384
									],
									[
										10430,
										10435
									],
									[
										10457,
										10462
									],
									[
										10773,
										10778
									],
									[
										10814,
										10819
									],
									[
										10836,
										10841
									],
									[
										10874,
										10879
									],
									[
										10925,
										10930
									],
									[
										10952,
										10957
									],
									[
										11243,
										11248
									],
									[
										11474,
										11479
									],
									[
										11703,
										11708
									],
									[
										11917,
										11922
									],
									[
										12136,
										12141
									],
									[
										12360,
										12365
									],
									[
										12578,
										12583
									],
									[
										12815,
										12820
									],
									[
										13063,
										13068
									],
									[
										13284,
										13289
									],
									[
										13494,
										13499
									],
									[
										13531,
										13536
									],
									[
										13553,
										13558
									],
									[
										13587,
										13592
									],
									[
										13634,
										13639
									],
									[
										13661,
										13666
									],
									[
										13890,
										13895
									],
									[
										14119,
										14124
									],
									[
										14372,
										14377
									],
									[
										14608,
										14613
									],
									[
										14821,
										14826
									],
									[
										15041,
										15046
									],
									[
										15276,
										15281
									],
									[
										15526,
										15531
									],
									[
										15798,
										15803
									],
									[
										16075,
										16080
									],
									[
										16359,
										16364
									],
									[
										16406,
										16411
									],
									[
										16669,
										16674
									],
									[
										16943,
										16948
									],
									[
										17212,
										17217
									],
									[
										17462,
										17467
									],
									[
										17744,
										17749
									],
									[
										18111,
										18116
									],
									[
										18437,
										18442
									],
									[
										18678,
										18683
									],
									[
										18858,
										18863
									],
									[
										18945,
										18950
									],
									[
										19184,
										19189
									],
									[
										19401,
										19406
									],
									[
										19442,
										19447
									],
									[
										19743,
										19748
									],
									[
										19938,
										19943
									],
									[
										20123,
										20128
									],
									[
										20264,
										20269
									],
									[
										20377,
										20382
									],
									[
										20438,
										20443
									],
									[
										20579,
										20584
									],
									[
										20639,
										20644
									],
									[
										20723,
										20728
									],
									[
										20780,
										20785
									],
									[
										20882,
										20887
									],
									[
										20947,
										20952
									],
									[
										21057,
										21062
									],
									[
										21232,
										21237
									],
									[
										21382,
										21387
									],
									[
										21443,
										21448
									],
									[
										21566,
										21571
									],
									[
										21598,
										21603
									],
									[
										21805,
										21810
									],
									[
										21825,
										21830
									],
									[
										21844,
										21849
									],
									[
										21880,
										21885
									],
									[
										21912,
										21917
									],
									[
										21950,
										21955
									],
									[
										21987,
										21992
									],
									[
										22028,
										22033
									],
									[
										22073,
										22078
									],
									[
										22121,
										22126
									],
									[
										22137,
										22142
									],
									[
										22153,
										22158
									],
									[
										22169,
										22174
									],
									[
										22189,
										22194
									],
									[
										22316,
										22321
									],
									[
										22356,
										22361
									],
									[
										22598,
										22603
									],
									[
										22821,
										22826
									],
									[
										23027,
										23032
									],
									[
										23067,
										23072
									],
									[
										23116,
										23121
									],
									[
										23377,
										23382
									],
									[
										23419,
										23424
									],
									[
										23613,
										23618
									],
									[
										23629,
										23634
									],
									[
										23947,
										23952
									],
									[
										24004,
										24009
									],
									[
										24056,
										24061
									],
									[
										24108,
										24113
									],
									[
										24157,
										24162
									],
									[
										24348,
										24353
									],
									[
										24495,
										24500
									],
									[
										24835,
										24840
									],
									[
										25252,
										25257
									],
									[
										25539,
										25544
									],
									[
										26010,
										26015
									],
									[
										26362,
										26367
									],
									[
										26852,
										26857
									],
									[
										26912,
										26917
									],
									[
										26973,
										26978
									],
									[
										27204,
										27209
									],
									[
										27429,
										27434
									],
									[
										27607,
										27612
									],
									[
										27811,
										27816
									],
									[
										27906,
										27911
									],
									[
										28060,
										28065
									],
									[
										28164,
										28169
									],
									[
										28244,
										28249
									],
									[
										28362,
										28367
									],
									[
										28560,
										28565
									],
									[
										28805,
										28810
									],
									[
										29030,
										29035
									],
									[
										29272,
										29277
									],
									[
										29650,
										29655
									],
									[
										29676,
										29681
									],
									[
										29979,
										29984
									],
									[
										30066,
										30071
									],
									[
										30126,
										30131
									],
									[
										30394,
										30399
									],
									[
										30536,
										30541
									],
									[
										30567,
										30572
									],
									[
										30596,
										30601
									],
									[
										30916,
										30921
									],
									[
										30974,
										30979
									],
									[
										31124,
										31129
									],
									[
										31389,
										31394
									],
									[
										31457,
										31462
									],
									[
										31701,
										31706
									],
									[
										31795,
										31800
									],
									[
										32135,
										32140
									],
									[
										32428,
										32433
									],
									[
										32733,
										32738
									],
									[
										32760,
										32765
									],
									[
										33191,
										33196
									],
									[
										33226,
										33231
									],
									[
										33244,
										33249
									],
									[
										33361,
										33366
									],
									[
										33371,
										33376
									],
									[
										33384,
										33389
									],
									[
										33396,
										33401
									],
									[
										33411,
										33416
									],
									[
										33428,
										33433
									],
									[
										33475,
										33480
									],
									[
										33509,
										33514
									],
									[
										33516,
										33521
									],
									[
										33600,
										33605
									],
									[
										33630,
										33635
									],
									[
										33674,
										33679
									],
									[
										33686,
										33691
									],
									[
										33698,
										33703
									],
									[
										33825,
										33830
									],
									[
										33832,
										33837
									],
									[
										34021,
										34026
									],
									[
										34033,
										34038
									],
									[
										34112,
										34117
									],
									[
										34124,
										34129
									],
									[
										34256,
										34261
									],
									[
										34263,
										34268
									],
									[
										34515,
										34520
									],
									[
										34563,
										34568
									],
									[
										34711,
										34716
									],
									[
										34762,
										34767
									],
									[
										34786,
										34791
									],
									[
										34940,
										34945
									],
									[
										35001,
										35006
									],
									[
										35026,
										35031
									],
									[
										35225,
										35230
									],
									[
										35241,
										35246
									],
									[
										35263,
										35268
									],
									[
										35279,
										35284
									],
									[
										35428,
										35433
									],
									[
										35456,
										35461
									],
									[
										35486,
										35491
									],
									[
										35791,
										35796
									],
									[
										36001,
										36006
									],
									[
										36173,
										36178
									],
									[
										36431,
										36436
									],
									[
										36730,
										36735
									],
									[
										37083,
										37088
									],
									[
										37414,
										37419
									],
									[
										37588,
										37593
									],
									[
										37954,
										37959
									],
									[
										38241,
										38246
									],
									[
										38482,
										38487
									],
									[
										38689,
										38694
									],
									[
										39077,
										39082
									],
									[
										39471,
										39476
									],
									[
										39912,
										39917
									],
									[
										40196,
										40201
									],
									[
										40378,
										40383
									],
									[
										40529,
										40534
									],
									[
										40671,
										40676
									],
									[
										41013,
										41018
									],
									[
										41258,
										41263
									],
									[
										41387,
										41392
									],
									[
										41691,
										41696
									],
									[
										41935,
										41940
									],
									[
										42222,
										42227
									],
									[
										42368,
										42373
									],
									[
										42536,
										42541
									],
									[
										42686,
										42691
									],
									[
										42934,
										42939
									],
									[
										43151,
										43156
									],
									[
										43381,
										43386
									],
									[
										43675,
										43680
									],
									[
										43878,
										43883
									],
									[
										44128,
										44133
									],
									[
										44553,
										44558
									],
									[
										45018,
										45023
									],
									[
										45082,
										45087
									],
									[
										45423,
										45428
									],
									[
										45600,
										45605
									],
									[
										45960,
										45965
									],
									[
										45987,
										45992
									],
									[
										46276,
										46281
									],
									[
										46311,
										46316
									],
									[
										46355,
										46360
									],
									[
										46399,
										46404
									],
									[
										46452,
										46457
									],
									[
										46504,
										46509
									],
									[
										46556,
										46561
									],
									[
										46608,
										46613
									],
									[
										46660,
										46665
									],
									[
										46711,
										46716
									],
									[
										47030,
										47035
									],
									[
										47205,
										47210
									],
									[
										47662,
										47667
									],
									[
										47964,
										47969
									],
									[
										48319,
										48324
									],
									[
										48428,
										48433
									],
									[
										48814,
										48819
									],
									[
										49355,
										49360
									],
									[
										49587,
										49592
									],
									[
										49821,
										49826
									],
									[
										50126,
										50131
									],
									[
										50545,
										50550
									],
									[
										50954,
										50959
									],
									[
										51286,
										51291
									],
									[
										51424,
										51429
									],
									[
										51584,
										51589
									],
									[
										51799,
										51804
									],
									[
										51949,
										51954
									],
									[
										52153,
										52158
									],
									[
										52400,
										52405
									],
									[
										52593,
										52598
									],
									[
										52633,
										52638
									],
									[
										52762,
										52767
									],
									[
										52876,
										52881
									],
									[
										52922,
										52927
									],
									[
										53158,
										53163
									],
									[
										53293,
										53298
									],
									[
										53711,
										53716
									],
									[
										53899,
										53904
									],
									[
										54128,
										54133
									],
									[
										54313,
										54318
									],
									[
										54467,
										54472
									],
									[
										54618,
										54623
									],
									[
										54663,
										54668
									],
									[
										54710,
										54715
									],
									[
										54895,
										54900
									],
									[
										55170,
										55175
									],
									[
										55220,
										55225
									],
									[
										55537,
										55542
									],
									[
										55751,
										55756
									],
									[
										55771,
										55776
									],
									[
										55944,
										55949
									],
									[
										56098,
										56103
									],
									[
										56385,
										56390
									],
									[
										56430,
										56435
									],
									[
										56652,
										56657
									],
									[
										56690,
										56695
									],
									[
										56723,
										56728
									],
									[
										56772,
										56777
									],
									[
										57050,
										57055
									],
									[
										57089,
										57094
									],
									[
										57606,
										57611
									],
									[
										58064,
										58069
									],
									[
										58404,
										58409
									],
									[
										58793,
										58798
									],
									[
										59164,
										59169
									],
									[
										59293,
										59298
									],
									[
										59413,
										59418
									],
									[
										59588,
										59593
									],
									[
										59627,
										59632
									],
									[
										59871,
										59876
									],
									[
										59933,
										59938
									],
									[
										59955,
										59960
									],
									[
										60010,
										60015
									],
									[
										60072,
										60077
									],
									[
										60094,
										60099
									],
									[
										60325,
										60330
									],
									[
										60800,
										60805
									],
									[
										60835,
										60840
									],
									[
										61249,
										61254
									],
									[
										61432,
										61437
									],
									[
										61705,
										61710
									],
									[
										62084,
										62089
									],
									[
										62420,
										62425
									],
									[
										62533,
										62538
									],
									[
										62772,
										62777
									],
									[
										62965,
										62970
									],
									[
										63146,
										63151
									],
									[
										63313,
										63318
									],
									[
										63884,
										63889
									],
									[
										64181,
										64186
									],
									[
										64577,
										64582
									],
									[
										64835,
										64840
									],
									[
										64997,
										65002
									],
									[
										65164,
										65169
									],
									[
										65326,
										65331
									],
									[
										65493,
										65498
									],
									[
										65660,
										65665
									],
									[
										65828,
										65833
									],
									[
										65995,
										66000
									],
									[
										66159,
										66164
									],
									[
										66326,
										66331
									],
									[
										66819,
										66824
									],
									[
										67196,
										67201
									],
									[
										67358,
										67363
									],
									[
										67525,
										67530
									],
									[
										67689,
										67694
									],
									[
										67856,
										67861
									],
									[
										68026,
										68031
									],
									[
										68192,
										68197
									],
									[
										68224,
										68229
									],
									[
										68293,
										68298
									],
									[
										68342,
										68347
									],
									[
										68364,
										68369
									],
									[
										68410,
										68415
									],
									[
										68469,
										68474
									],
									[
										68496,
										68501
									],
									[
										68562,
										68567
									],
									[
										68637,
										68642
									],
									[
										68690,
										68695
									],
									[
										68714,
										68719
									],
									[
										68762,
										68767
									],
									[
										68819,
										68824
									],
									[
										68845,
										68850
									],
									[
										68940,
										68945
									],
									[
										68972,
										68977
									],
									[
										69041,
										69046
									],
									[
										69102,
										69107
									],
									[
										69176,
										69181
									],
									[
										69246,
										69251
									],
									[
										69317,
										69322
									],
									[
										69380,
										69385
									],
									[
										69453,
										69458
									],
									[
										69634,
										69639
									],
									[
										69646,
										69651
									],
									[
										69935,
										69940
									],
									[
										70285,
										70290
									],
									[
										70431,
										70436
									],
									[
										70477,
										70482
									],
									[
										70601,
										70606
									],
									[
										70660,
										70665
									],
									[
										70923,
										70928
									],
									[
										71213,
										71218
									],
									[
										71387,
										71392
									],
									[
										71522,
										71527
									],
									[
										71577,
										71582
									],
									[
										71879,
										71884
									],
									[
										72138,
										72143
									],
									[
										72463,
										72468
									],
									[
										72682,
										72687
									],
									[
										72954,
										72959
									],
									[
										73048,
										73053
									],
									[
										73183,
										73188
									],
									[
										73239,
										73244
									],
									[
										73543,
										73548
									],
									[
										73638,
										73643
									],
									[
										73753,
										73758
									],
									[
										74111,
										74116
									],
									[
										74271,
										74276
									],
									[
										74406,
										74411
									],
									[
										74522,
										74527
									],
									[
										74897,
										74902
									],
									[
										75057,
										75062
									],
									[
										75351,
										75356
									],
									[
										75615,
										75620
									],
									[
										75940,
										75945
									],
									[
										76159,
										76164
									],
									[
										76297,
										76302
									],
									[
										76352,
										76357
									],
									[
										76646,
										76651
									],
									[
										76967,
										76972
									],
									[
										77212,
										77217
									],
									[
										77500,
										77505
									],
									[
										77668,
										77673
									],
									[
										78038,
										78043
									],
									[
										78328,
										78333
									],
									[
										78577,
										78582
									],
									[
										78963,
										78968
									],
									[
										79138,
										79143
									],
									[
										79391,
										79396
									],
									[
										79779,
										79784
									],
									[
										79956,
										79961
									],
									[
										80213,
										80218
									],
									[
										80603,
										80608
									],
									[
										80780,
										80785
									],
									[
										81037,
										81042
									],
									[
										81427,
										81432
									],
									[
										81604,
										81609
									],
									[
										81861,
										81866
									],
									[
										82251,
										82256
									],
									[
										82428,
										82433
									],
									[
										82685,
										82690
									],
									[
										83075,
										83080
									],
									[
										83254,
										83259
									],
									[
										83513,
										83518
									],
									[
										83905,
										83910
									],
									[
										84020,
										84025
									],
									[
										84289,
										84294
									],
									[
										84685,
										84690
									],
									[
										84842,
										84847
									],
									[
										85048,
										85053
									],
									[
										85085,
										85090
									],
									[
										85349,
										85354
									],
									[
										85386,
										85391
									],
									[
										85701,
										85706
									],
									[
										85930,
										85935
									],
									[
										86201,
										86206
									],
									[
										86391,
										86396
									],
									[
										86428,
										86433
									],
									[
										86563,
										86568
									],
									[
										86707,
										86712
									],
									[
										86928,
										86933
									],
									[
										87076,
										87081
									],
									[
										87261,
										87266
									],
									[
										87615,
										87620
									],
									[
										87988,
										87993
									],
									[
										88034,
										88039
									],
									[
										88075,
										88080
									],
									[
										88116,
										88121
									],
									[
										88154,
										88159
									],
									[
										88492,
										88497
									],
									[
										88792,
										88797
									],
									[
										89177,
										89182
									],
									[
										89242,
										89247
									],
									[
										89342,
										89347
									],
									[
										89621,
										89626
									],
									[
										89793,
										89798
									],
									[
										90088,
										90093
									],
									[
										90365,
										90370
									],
									[
										90658,
										90663
									],
									[
										90705,
										90710
									],
									[
										90968,
										90973
									],
									[
										91242,
										91247
									],
									[
										91511,
										91516
									],
									[
										91761,
										91766
									],
									[
										92043,
										92048
									],
									[
										92326,
										92331
									],
									[
										92466,
										92471
									],
									[
										92757,
										92762
									],
									[
										93121,
										93126
									],
									[
										93409,
										93414
									],
									[
										93434,
										93439
									],
									[
										93696,
										93701
									],
									[
										94113,
										94118
									],
									[
										94179,
										94184
									],
									[
										94562,
										94567
									],
									[
										94911,
										94916
									],
									[
										94938,
										94943
									],
									[
										95227,
										95232
									],
									[
										95262,
										95267
									],
									[
										95306,
										95311
									],
									[
										95350,
										95355
									],
									[
										95403,
										95408
									],
									[
										95455,
										95460
									],
									[
										95507,
										95512
									],
									[
										95559,
										95564
									],
									[
										95611,
										95616
									],
									[
										95662,
										95667
									],
									[
										96031,
										96036
									],
									[
										96395,
										96400
									],
									[
										96730,
										96735
									],
									[
										97020,
										97025
									],
									[
										97077,
										97082
									],
									[
										97182,
										97187
									],
									[
										97211,
										97216
									],
									[
										97605,
										97610
									],
									[
										97976,
										97981
									],
									[
										98189,
										98194
									],
									[
										98569,
										98574
									],
									[
										98942,
										98947
									],
									[
										99220,
										99225
									],
									[
										99262,
										99267
									],
									[
										99599,
										99604
									],
									[
										99834,
										99839
									],
									[
										100079,
										100084
									],
									[
										100462,
										100467
									],
									[
										100910,
										100915
									],
									[
										100957,
										100962
									],
									[
										101293,
										101298
									],
									[
										101570,
										101575
									],
									[
										101663,
										101668
									],
									[
										102001,
										102006
									],
									[
										102319,
										102324
									],
									[
										102576,
										102581
									],
									[
										102804,
										102809
									],
									[
										103035,
										103040
									],
									[
										103290,
										103295
									],
									[
										103593,
										103598
									],
									[
										103634,
										103639
									],
									[
										103844,
										103849
									],
									[
										103883,
										103888
									],
									[
										104021,
										104026
									],
									[
										104361,
										104366
									],
									[
										104526,
										104531
									],
									[
										104683,
										104688
									],
									[
										104719,
										104724
									],
									[
										104807,
										104812
									],
									[
										104922,
										104927
									],
									[
										105163,
										105168
									],
									[
										105386,
										105391
									],
									[
										105532,
										105537
									],
									[
										105675,
										105680
									],
									[
										105815,
										105820
									],
									[
										105917,
										105922
									],
									[
										106310,
										106315
									],
									[
										106340,
										106345
									],
									[
										106376,
										106381
									],
									[
										106624,
										106629
									],
									[
										106734,
										106739
									],
									[
										107036,
										107041
									],
									[
										107276,
										107281
									],
									[
										107494,
										107499
									],
									[
										107619,
										107624
									],
									[
										107787,
										107792
									],
									[
										107930,
										107935
									],
									[
										108160,
										108165
									],
									[
										108365,
										108370
									],
									[
										108502,
										108507
									],
									[
										108662,
										108667
									],
									[
										108853,
										108858
									],
									[
										108974,
										108979
									],
									[
										109073,
										109078
									],
									[
										109165,
										109170
									],
									[
										109332,
										109337
									],
									[
										109561,
										109566
									],
									[
										109892,
										109897
									],
									[
										110011,
										110016
									],
									[
										110347,
										110352
									],
									[
										110672,
										110677
									],
									[
										110943,
										110948
									],
									[
										111236,
										111241
									],
									[
										111487,
										111492
									],
									[
										111775,
										111780
									],
									[
										111868,
										111873
									],
									[
										112217,
										112222
									],
									[
										112569,
										112574
									],
									[
										112899,
										112904
									],
									[
										113279,
										113284
									],
									[
										113528,
										113533
									],
									[
										113696,
										113701
									],
									[
										113909,
										113914
									],
									[
										114075,
										114080
									],
									[
										114306,
										114311
									],
									[
										114528,
										114533
									],
									[
										114774,
										114779
									],
									[
										115115,
										115120
									],
									[
										115331,
										115336
									],
									[
										115582,
										115587
									],
									[
										115774,
										115779
									],
									[
										115970,
										115975
									],
									[
										116262,
										116267
									],
									[
										116522,
										116527
									],
									[
										116748,
										116753
									],
									[
										116997,
										117002
									],
									[
										117401,
										117406
									],
									[
										117448,
										117453
									],
									[
										117795,
										117800
									],
									[
										118191,
										118196
									],
									[
										118587,
										118592
									],
									[
										118669,
										118674
									],
									[
										118819,
										118824
									],
									[
										118901,
										118906
									],
									[
										119094,
										119099
									],
									[
										119325,
										119330
									],
									[
										119779,
										119784
									],
									[
										120007,
										120012
									],
									[
										120224,
										120229
									],
									[
										120375,
										120380
									],
									[
										120755,
										120760
									],
									[
										120811,
										120816
									],
									[
										121232,
										121237
									],
									[
										121748,
										121753
									],
									[
										121997,
										122002
									],
									[
										122296,
										122301
									],
									[
										122508,
										122513
									],
									[
										122887,
										122892
									],
									[
										123057,
										123062
									],
									[
										123229,
										123234
									],
									[
										123546,
										123551
									],
									[
										123657,
										123662
									],
									[
										123725,
										123730
									],
									[
										123952,
										123957
									],
									[
										124207,
										124212
									],
									[
										124510,
										124515
									],
									[
										124551,
										124556
									],
									[
										124845,
										124850
									],
									[
										124886,
										124891
									],
									[
										125075,
										125080
									],
									[
										125473,
										125478
									],
									[
										125687,
										125692
									],
									[
										125849,
										125854
									],
									[
										126205,
										126210
									],
									[
										126476,
										126481
									],
									[
										126744,
										126749
									],
									[
										127052,
										127057
									],
									[
										127261,
										127266
									],
									[
										127557,
										127562
									],
									[
										127732,
										127737
									],
									[
										127865,
										127870
									],
									[
										127901,
										127906
									],
									[
										127989,
										127994
									],
									[
										128099,
										128104
									],
									[
										128284,
										128289
									],
									[
										128515,
										128520
									],
									[
										128661,
										128666
									],
									[
										128804,
										128809
									],
									[
										128944,
										128949
									],
									[
										129140,
										129145
									],
									[
										129349,
										129354
									],
									[
										129715,
										129720
									],
									[
										129745,
										129750
									],
									[
										129781,
										129786
									],
									[
										130029,
										130034
									],
									[
										130139,
										130144
									],
									[
										130430,
										130435
									],
									[
										130770,
										130775
									],
									[
										131035,
										131040
									],
									[
										131280,
										131285
									],
									[
										131519,
										131524
									],
									[
										131644,
										131649
									],
									[
										131812,
										131817
									],
									[
										131955,
										131960
									],
									[
										132185,
										132190
									],
									[
										132393,
										132398
									],
									[
										132530,
										132535
									],
									[
										132690,
										132695
									],
									[
										132883,
										132888
									],
									[
										132984,
										132989
									],
									[
										133146,
										133151
									],
									[
										133238,
										133243
									],
									[
										133350,
										133355
									],
									[
										133579,
										133584
									],
									[
										133904,
										133909
									],
									[
										134023,
										134028
									],
									[
										134323,
										134328
									],
									[
										134458,
										134463
									],
									[
										134752,
										134757
									],
									[
										135165,
										135170
									],
									[
										135471,
										135476
									],
									[
										135839,
										135844
									],
									[
										136224,
										136229
									],
									[
										136520,
										136525
									],
									[
										136577,
										136582
									],
									[
										136682,
										136687
									],
									[
										136711,
										136716
									],
									[
										137133,
										137138
									],
									[
										137192,
										137197
									],
									[
										137577,
										137582
									],
									[
										137804,
										137809
									],
									[
										137846,
										137851
									],
									[
										138243,
										138248
									],
									[
										138630,
										138635
									],
									[
										138931,
										138936
									],
									[
										138962,
										138967
									],
									[
										139070,
										139075
									],
									[
										139110,
										139115
									],
									[
										139356,
										139361
									],
									[
										139369,
										139374
									],
									[
										139799,
										139804
									],
									[
										139966,
										139971
									],
									[
										140445,
										140450
									],
									[
										140460,
										140465
									],
									[
										140909,
										140914
									],
									[
										140951,
										140956
									],
									[
										141162,
										141167
									],
									[
										141190,
										141195
									],
									[
										141568,
										141573
									],
									[
										141698,
										141703
									],
									[
										141931,
										141936
									],
									[
										142034,
										142039
									],
									[
										142372,
										142377
									],
									[
										142610,
										142615
									],
									[
										142801,
										142806
									],
									[
										142921,
										142926
									],
									[
										142936,
										142941
									],
									[
										143005,
										143010
									],
									[
										143063,
										143068
									],
									[
										143079,
										143084
									],
									[
										143233,
										143238
									],
									[
										143375,
										143380
									],
									[
										143456,
										143461
									],
									[
										143491,
										143496
									],
									[
										143548,
										143553
									],
									[
										143605,
										143610
									],
									[
										143672,
										143677
									],
									[
										143878,
										143883
									],
									[
										143960,
										143965
									],
									[
										144040,
										144045
									],
									[
										144252,
										144257
									],
									[
										144264,
										144269
									],
									[
										144432,
										144437
									],
									[
										144486,
										144491
									],
									[
										144870,
										144875
									],
									[
										145027,
										145032
									],
									[
										145044,
										145049
									],
									[
										145181,
										145186
									],
									[
										145295,
										145300
									],
									[
										145547,
										145552
									],
									[
										145589,
										145594
									],
									[
										145710,
										145715
									],
									[
										145727,
										145732
									],
									[
										145862,
										145867
									],
									[
										145973,
										145978
									],
									[
										146163,
										146168
									],
									[
										146357,
										146362
									],
									[
										146650,
										146655
									],
									[
										146936,
										146941
									],
									[
										147293,
										147298
									],
									[
										147336,
										147341
									],
									[
										147374,
										147379
									],
									[
										147507,
										147512
									],
									[
										147872,
										147877
									],
									[
										147892,
										147897
									],
									[
										148177,
										148182
									],
									[
										148190,
										148195
									],
									[
										148404,
										148409
									],
									[
										148414,
										148419
									],
									[
										148521,
										148526
									],
									[
										148669,
										148674
									],
									[
										148831,
										148836
									],
									[
										148965,
										148970
									],
									[
										149268,
										149273
									],
									[
										149288,
										149293
									],
									[
										149575,
										149580
									],
									[
										149588,
										149593
									],
									[
										149806,
										149811
									],
									[
										149816,
										149821
									],
									[
										149867,
										149872
									],
									[
										150019,
										150024
									],
									[
										150182,
										150187
									],
									[
										150489,
										150494
									],
									[
										150509,
										150514
									],
									[
										150789,
										150794
									],
									[
										150802,
										150807
									],
									[
										151013,
										151018
									],
									[
										151023,
										151028
									],
									[
										151071,
										151076
									],
									[
										151259,
										151264
									],
									[
										151349,
										151354
									],
									[
										151463,
										151468
									],
									[
										151727,
										151732
									],
									[
										151769,
										151774
									],
									[
										151874,
										151879
									],
									[
										151964,
										151969
									],
									[
										151990,
										151995
									],
									[
										152046,
										152051
									],
									[
										152185,
										152190
									],
									[
										152255,
										152260
									],
									[
										152528,
										152533
									],
									[
										152698,
										152703
									],
									[
										152806,
										152811
									],
									[
										152869,
										152874
									],
									[
										153114,
										153119
									],
									[
										153191,
										153196
									],
									[
										153365,
										153370
									],
									[
										153472,
										153477
									],
									[
										153667,
										153672
									],
									[
										153753,
										153758
									],
									[
										153866,
										153871
									],
									[
										154233,
										154238
									],
									[
										154320,
										154325
									],
									[
										154515,
										154520
									],
									[
										154662,
										154667
									],
									[
										154779,
										154784
									],
									[
										154929,
										154934
									],
									[
										155045,
										155050
									],
									[
										155065,
										155070
									],
									[
										155120,
										155125
									],
									[
										155390,
										155395
									],
									[
										155704,
										155709
									],
									[
										155919,
										155924
									],
									[
										156285,
										156290
									],
									[
										156411,
										156416
									],
									[
										156791,
										156796
									],
									[
										157075,
										157080
									],
									[
										157421,
										157426
									],
									[
										157784,
										157789
									],
									[
										158080,
										158085
									],
									[
										158137,
										158142
									],
									[
										158242,
										158247
									],
									[
										158271,
										158276
									],
									[
										158671,
										158676
									],
									[
										158730,
										158735
									],
									[
										159093,
										159098
									],
									[
										159320,
										159325
									],
									[
										159362,
										159367
									],
									[
										159737,
										159742
									],
									[
										160102,
										160107
									],
									[
										160381,
										160386
									],
									[
										160412,
										160417
									],
									[
										160520,
										160525
									],
									[
										160560,
										160565
									],
									[
										160784,
										160789
									],
									[
										160797,
										160802
									],
									[
										161205,
										161210
									],
									[
										161372,
										161377
									],
									[
										161829,
										161834
									],
									[
										161844,
										161849
									],
									[
										162271,
										162276
									],
									[
										162313,
										162318
									],
									[
										162524,
										162529
									],
									[
										162552,
										162557
									],
									[
										162871,
										162876
									],
									[
										163017,
										163022
									],
									[
										163063,
										163068
									],
									[
										163187,
										163192
									],
									[
										163246,
										163251
									],
									[
										163509,
										163514
									],
									[
										163799,
										163804
									],
									[
										163973,
										163978
									],
									[
										164108,
										164113
									],
									[
										164163,
										164168
									],
									[
										164465,
										164470
									],
									[
										164724,
										164729
									],
									[
										165049,
										165054
									],
									[
										165268,
										165273
									],
									[
										165540,
										165545
									],
									[
										165634,
										165639
									],
									[
										165769,
										165774
									],
									[
										165825,
										165830
									],
									[
										166129,
										166134
									],
									[
										166224,
										166229
									],
									[
										166339,
										166344
									],
									[
										166697,
										166702
									],
									[
										166857,
										166862
									],
									[
										166992,
										166997
									],
									[
										167108,
										167113
									],
									[
										167483,
										167488
									],
									[
										167643,
										167648
									],
									[
										167937,
										167942
									],
									[
										168201,
										168206
									],
									[
										168526,
										168531
									],
									[
										168745,
										168750
									],
									[
										168883,
										168888
									],
									[
										168938,
										168943
									],
									[
										169232,
										169237
									],
									[
										169553,
										169558
									],
									[
										169798,
										169803
									],
									[
										170086,
										170091
									],
									[
										170254,
										170259
									],
									[
										170624,
										170629
									],
									[
										170914,
										170919
									],
									[
										171163,
										171168
									],
									[
										171549,
										171554
									],
									[
										171724,
										171729
									],
									[
										171977,
										171982
									],
									[
										172365,
										172370
									],
									[
										172542,
										172547
									],
									[
										172799,
										172804
									],
									[
										173189,
										173194
									],
									[
										173366,
										173371
									],
									[
										173623,
										173628
									],
									[
										174013,
										174018
									],
									[
										174190,
										174195
									],
									[
										174447,
										174452
									],
									[
										174837,
										174842
									],
									[
										175014,
										175019
									],
									[
										175271,
										175276
									],
									[
										175661,
										175666
									],
									[
										175840,
										175845
									],
									[
										176099,
										176104
									],
									[
										176491,
										176496
									],
									[
										176606,
										176611
									],
									[
										176875,
										176880
									],
									[
										177271,
										177276
									],
									[
										177428,
										177433
									],
									[
										177634,
										177639
									],
									[
										177671,
										177676
									],
									[
										177935,
										177940
									],
									[
										177972,
										177977
									],
									[
										178287,
										178292
									],
									[
										178516,
										178521
									],
									[
										178787,
										178792
									],
									[
										178977,
										178982
									],
									[
										179014,
										179019
									],
									[
										179149,
										179154
									],
									[
										179293,
										179298
									],
									[
										179514,
										179519
									],
									[
										179662,
										179667
									],
									[
										179847,
										179852
									],
									[
										180115,
										180120
									],
									[
										180354,
										180359
									],
									[
										180539,
										180544
									],
									[
										180622,
										180627
									],
									[
										180817,
										180822
									],
									[
										181021,
										181026
									],
									[
										181214,
										181219
									],
									[
										181406,
										181411
									],
									[
										181517,
										181522
									],
									[
										181688,
										181693
									],
									[
										181880,
										181885
									],
									[
										182130,
										182135
									],
									[
										182394,
										182399
									],
									[
										182569,
										182574
									],
									[
										182800,
										182805
									],
									[
										182889,
										182894
									],
									[
										183160,
										183165
									],
									[
										183304,
										183309
									],
									[
										183590,
										183595
									],
									[
										183995,
										184000
									],
									[
										184197,
										184202
									],
									[
										184468,
										184473
									],
									[
										184634,
										184639
									],
									[
										184923,
										184928
									],
									[
										185181,
										185186
									],
									[
										185437,
										185442
									],
									[
										185696,
										185701
									],
									[
										185955,
										185960
									],
									[
										186214,
										186219
									],
									[
										186473,
										186478
									],
									[
										186732,
										186737
									],
									[
										186991,
										186996
									],
									[
										187318,
										187323
									],
									[
										187645,
										187650
									],
									[
										187933,
										187938
									],
									[
										188111,
										188116
									],
									[
										188280,
										188285
									],
									[
										188433,
										188438
									],
									[
										188652,
										188657
									],
									[
										188855,
										188860
									],
									[
										189027,
										189032
									],
									[
										189202,
										189207
									],
									[
										189386,
										189391
									],
									[
										189561,
										189566
									],
									[
										189720,
										189725
									],
									[
										189945,
										189950
									],
									[
										190154,
										190159
									],
									[
										190332,
										190337
									],
									[
										190497,
										190502
									],
									[
										190699,
										190704
									],
									[
										190879,
										190884
									],
									[
										191046,
										191051
									],
									[
										191256,
										191261
									],
									[
										191460,
										191465
									],
									[
										191571,
										191576
									],
									[
										191715,
										191720
									],
									[
										191902,
										191907
									],
									[
										192054,
										192059
									],
									[
										192272,
										192277
									],
									[
										192576,
										192581
									],
									[
										192795,
										192800
									],
									[
										193051,
										193056
									],
									[
										193161,
										193166
									],
									[
										193404,
										193409
									],
									[
										193616,
										193621
									],
									[
										193892,
										193897
									],
									[
										193974,
										193979
									],
									[
										194084,
										194089
									],
									[
										194193,
										194198
									],
									[
										194337,
										194342
									],
									[
										194428,
										194433
									],
									[
										194658,
										194663
									],
									[
										194863,
										194868
									],
									[
										194943,
										194948
									],
									[
										195097,
										195102
									],
									[
										195192,
										195197
									],
									[
										195523,
										195540
									],
									[
										195767,
										195784
									],
									[
										196208,
										196225
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								195776,
								195776
							]
						],
						"settings":
						{
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 5,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2338.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/jindra/.platformio/packages/framework-arduinoespressif8266/cores/esp8266/Esp.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14824,
						"regions":
						{
						},
						"selection":
						[
							[
								13336,
								13336
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6793.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Deviot|Build1467836414.641733":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467836465.063132":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467836569.468524":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467836595.613198":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467837221.037764":
	{
		"height": 0.0
	},
	"output.Deviot|Build1467837247.187606":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467838904.417634":
	{
		"height": 320.0
	},
	"output.Deviot|Build1467839006.935112":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467839748.135487":
	{
		"height": 484.0
	},
	"output.Deviot|Build1467840083.146981":
	{
		"height": 406.0
	},
	"output.Deviot|Build1467842420.551007":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467842731.00641":
	{
		"height": 100.0
	},
	"output.Deviot|Build1467918284.000705":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468170822.431783":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468171001.204817":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468171056.45144":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468171102.58334":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468171117.862361":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468178731.903342":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468178759.886881":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468190902.378062":
	{
		"height": 343.0
	},
	"output.Deviot|Build1468190968.53397":
	{
		"height": 431.0
	},
	"output.Deviot|Build1468191671.298917":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468242372.886665":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468242426.074104":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468242786.043159":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468277964.559645":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468278017.539909":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468278038.61988":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578260.695276":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578289.98047":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578441.850393":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578477.928299":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578515.958563":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578615.445167":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578635.204889":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468578673.549014":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468580132.027537":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468580279.089187":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468586157.812084":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468586186.185908":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468589670.895958":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468590005.497943":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468592847.051738":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468602695.597841":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468602739.671466":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468602898.157853":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468602906.924421":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468603304.385464":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468603549.461615":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468606453.75715":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468606513.900219":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468606557.990698":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468606788.956806":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468607570.770138":
	{
		"height": 186.0
	},
	"output.Deviot|Build1468607617.926425":
	{
		"height": 356.0
	},
	"output.Deviot|Build1468607696.654732":
	{
		"height": 279.0
	},
	"output.Deviot|Build1468607723.648671":
	{
		"height": 280.0
	},
	"output.Deviot|Build1468607744.63186":
	{
		"height": 305.0
	},
	"output.Deviot|Build1468607775.332075":
	{
		"height": 230.0
	},
	"output.Deviot|Build1468608037.87702":
	{
		"height": 279.0
	},
	"output.Deviot|Build1468608468.148711":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468608858.439551":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468608908.276242":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468608962.161711":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468609037.956863":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468611774.74685":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468611814.896249":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468611837.040563":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468614050.791102":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468614096.00489":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468615011.247872":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468615048.842673":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468834007.473017":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468834047.978589":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468834090.861012":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468834118.805267":
	{
		"height": 25.0
	},
	"output.Deviot|Build1468834166.331067":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468871306.269518":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468871337.279794":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468883301.437179":
	{
		"height": 84.0
	},
	"output.Deviot|Build1468883399.681446":
	{
		"height": 350.0
	},
	"output.Deviot|Build1468883469.860141":
	{
		"height": 396.0
	},
	"output.Deviot|Build1468883587.466279":
	{
		"height": 229.0
	},
	"output.Deviot|Build1468962532.74601":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468963903.782457":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468963946.51439":
	{
		"height": 100.0
	},
	"output.Deviot|Build1468965971.594862":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469112363.510544":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469114750.85283":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469114784.203348":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469114808.500918":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469135459.421239":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469135513.862428":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469135730.339251":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469135950.801983":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469136055.750996":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469137383.991647":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469137420.824394":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469224714.997321":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469224824.852904":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469225446.319646":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469225480.893391":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469230069.237029":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469230095.362116":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469232890.540427":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469264965.625116":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469265005.29833":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469298808.88296":
	{
		"height": 112.0
	},
	"output.Deviot|Build1469299660.070542":
	{
		"height": 498.0
	},
	"output.Deviot|Build1469299869.969435":
	{
		"height": 112.0
	},
	"output.Deviot|Build1469300477.000238":
	{
		"height": 112.0
	},
	"output.Deviot|Build1469300500.16591":
	{
		"height": 112.0
	},
	"output.Deviot|Build1469300522.055969":
	{
		"height": 112.0
	},
	"output.Deviot|Build1469300573.152627":
	{
		"height": 112.0
	},
	"output.Deviot|Build1469305756.696082":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469311934.092558":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469343553.500005":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469343603.165763":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469343616.588813":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469343672.923133":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469344906.676125":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469345264.52847":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469345280.956341":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469345312.587646":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469346652.928741":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469346695.099955":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469346724.258208":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469346789.220905":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469346807.818143":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469347088.182031":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469347100.243916":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469347115.087738":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469348595.54853":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469348656.902216":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469348687.946535":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469348723.50345":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469348815.422021":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469367544.405875":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469367591.026662":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469367615.764964":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469367679.49808":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469367686.387105":
	{
		"height": 415.0
	},
	"output.Deviot|Build1469367794.781419":
	{
		"height": 367.0
	},
	"output.Deviot|Build1469367888.398057":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469367912.179842":
	{
		"height": 294.0
	},
	"output.Deviot|Build1469374691.860886":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469376009.032236":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469386529.389448":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469386534.579013":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469394482.925473":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469395707.96464":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469398930.977169":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469399254.209309":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469400659.47627":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469400796.934849":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469401551.21351":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469403518.502417":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469435410.240708":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469436206.879323":
	{
		"height": 100.0
	},
	"output.Deviot|Build1469437240.844071":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1467842739.170509":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1467843289.823908":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1468190964.78341":
	{
		"height": 435.0
	},
	"output.Deviot|Clean1469310387.118132":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1469343614.469668":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1469343669.689003":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1469346801.59484":
	{
		"height": 100.0
	},
	"output.Deviot|Clean1469347112.9414":
	{
		"height": 100.0
	},
	"output.Deviot|GetBoards1467839622.236174":
	{
		"height": 100.0
	},
	"output.Deviot|Library1467919169.523789":
	{
		"height": 0.0
	},
	"output.Deviot|Library1467920702.474639":
	{
		"height": 0.0
	},
	"output.Deviot|Library1467920703.411562":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468068905.325713":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468068906.447694":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468069001.712267":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468069002.323204":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468069128.787039":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468069129.436569":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468069130.91625":
	{
		"height": 100.0
	},
	"output.Deviot|Library1468163908.902814":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468163910.307422":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468163921.194619":
	{
		"height": 100.0
	},
	"output.Deviot|Library1468190091.350084":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468190092.456556":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468242411.244862":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468242412.026169":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468395531.636477":
	{
		"height": 0.0
	},
	"output.Deviot|Library1468395532.422923":
	{
		"height": 0.0
	},
	"output.Deviot|Library1469224887.104497":
	{
		"height": 0.0
	},
	"output.Deviot|Library1469224887.905609":
	{
		"height": 0.0
	},
	"output.Deviot|Pio_Install1467835276.069938":
	{
		"height": 100.0
	},
	"output.Deviot|Pio_Install1467836422.817401":
	{
		"height": 100.0
	},
	"output.Deviot|Pio_Install1467839716.418969":
	{
		"height": 100.0
	},
	"output.Deviot|Pio_Install1467919242.598551":
	{
		"height": 100.0
	},
	"output.Deviot|Pio_Install1468578278.365231":
	{
		"height": 100.0
	},
	"output.Deviot|Pio_Install1469348477.54428":
	{
		"height": 100.0
	},
	"output.Deviot|Pio_Install1469348482.911286":
	{
		"height": 100.0
	},
	"output.Deviot|Upgrade1467836422.813008":
	{
		"height": 0.0
	},
	"output.Deviot|Upgrade1467919242.594157":
	{
		"height": 0.0
	},
	"output.Deviot|Upgrade1468578278.35118":
	{
		"height": 0.0
	},
	"output.Deviot|Upload1467836634.0616":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467836685.539861":
	{
		"height": 197.0
	},
	"output.Deviot|Upload1467836888.336428":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467837811.360419":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840166.012347":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840198.790732":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840364.86979":
	{
		"height": 479.0
	},
	"output.Deviot|Upload1467840383.398704":
	{
		"height": 423.0
	},
	"output.Deviot|Upload1467840435.989742":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840452.474644":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840729.310969":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840763.964985":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840803.80807":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840853.228437":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467840934.022926":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841004.761187":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841414.355647":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841423.738382":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841423.905962":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841482.159799":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841486.726907":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467841932.314077":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842080.931362":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842089.381226":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842365.525006":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842385.194447":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842391.19161":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842400.800157":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842412.966464":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842418.086791":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842423.353498":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842678.675758":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842724.41595":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842727.621583":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842732.841448":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842744.17131":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842761.877709":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467842827.384128":
	{
		"height": 222.0
	},
	"output.Deviot|Upload1467842895.803765":
	{
		"height": 286.0
	},
	"output.Deviot|Upload1467843029.415065":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843044.910833":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843062.781275":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843078.756041":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843094.147698":
	{
		"height": 259.0
	},
	"output.Deviot|Upload1467843121.01521":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843156.808438":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843197.813415":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843245.775139":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843292.143368":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843338.459512":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843550.143381":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843643.14967":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843713.797759":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843759.723666":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467843800.42008":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467890600.887607":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467890813.807447":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467890909.203446":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467890920.353768":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467890934.112377":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467890953.459659":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891097.453815":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891173.563826":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891204.995384":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891253.112836":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891303.496724":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891356.212435":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891381.591996":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891441.977014":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467891504.789905":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916136.772163":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916237.853232":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916290.568784":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916331.760468":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916457.952136":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916817.607232":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916851.676216":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916928.748651":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916939.271972":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916950.536943":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467916989.436584":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917017.405292":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917209.858589":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917257.771468":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917292.975477":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917376.754139":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917395.801955":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917418.219632":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917434.094944":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917452.829358":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917558.017093":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917578.063968":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917587.569942":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917615.897891":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917651.391803":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917679.972825":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917715.935653":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917772.44998":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917784.463067":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917799.32202":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917817.907176":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917855.074982":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467917986.442082":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918001.408312":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918023.178718":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918040.95781":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918063.131721":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918100.32322":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918214.102287":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918305.261164":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918312.622526":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918386.947785":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918456.238312":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918489.142969":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918516.955418":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918532.834373":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918568.38801":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918612.274491":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467918653.368999":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467919132.790032":
	{
		"height": 240.0
	},
	"output.Deviot|Upload1467920347.940839":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920548.902765":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920564.958735":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920579.238794":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920603.273157":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920640.733157":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920659.137368":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920672.361709":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920686.047281":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920735.991341":
	{
		"height": 191.0
	},
	"output.Deviot|Upload1467920911.448143":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467920970.079808":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921065.996479":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921089.691335":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921108.047251":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921129.19918":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921147.257381":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921179.755689":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921204.841442":
	{
		"height": 514.0
	},
	"output.Deviot|Upload1467921276.545417":
	{
		"height": 192.0
	},
	"output.Deviot|Upload1467921318.361162":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921463.911758":
	{
		"height": 240.0
	},
	"output.Deviot|Upload1467921606.215536":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921611.484519":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921636.426131":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921787.342176":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467921811.232629":
	{
		"height": 208.0
	},
	"output.Deviot|Upload1467921999.3509":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922050.083316":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922120.571436":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922222.5251":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922280.739814":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922397.891931":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922579.865452":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922643.245441":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467922672.657128":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923087.477746":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923208.429546":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923350.901629":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923372.676728":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923395.750254":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923495.502087":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923507.378933":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923528.97213":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923549.906906":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923585.428406":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467923615.262908":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925026.877394":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925055.410899":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925095.067618":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925136.435723":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925183.954933":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925749.981662":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925808.378969":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467925950.239403":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467926051.756683":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467926081.507983":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927325.412352":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927363.524905":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927702.687357":
	{
		"height": 211.0
	},
	"output.Deviot|Upload1467927729.14383":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927774.944906":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927909.664424":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927936.007856":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1467927955.193969":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468004539.234582":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468005023.952082":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468006778.60212":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468006818.487708":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468006859.206652":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468006917.958593":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468007223.545925":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468007244.71265":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468007285.969849":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468007663.287935":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468007769.557552":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468007903.010713":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468008127.880946":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468008360.332336":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468008751.677405":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009003.864662":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009184.481562":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009312.621721":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009657.739331":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009689.421892":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009846.556655":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468009918.635624":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468010155.125529":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468082363.32136":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468088841.00751":
	{
		"height": 0.0
	},
	"output.Deviot|Upload1468143459.222359":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468143481.301609":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468143505.904209":
	{
		"height": 204.0
	},
	"output.Deviot|Upload1468143525.711108":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146121.928629":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146155.51826":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146284.932123":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146316.638403":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146383.490534":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146428.758766":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146588.792285":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146607.785196":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146640.682262":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146857.590602":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146909.383752":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468146932.641947":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468147360.227669":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468147397.841179":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468153277.818226":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468153588.627183":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468153640.047191":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468153683.305868":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468153809.572986":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468153925.254976":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468154024.609203":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468154200.795901":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468154750.652135":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468154832.122167":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468155025.465416":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468161769.515896":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468162241.047103":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468167411.754766":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468167622.881121":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468167680.598838":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468167722.132024":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468168114.080832":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468168248.101508":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468168333.686646":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468168869.596142":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468168909.618548":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468168935.104378":
	{
		"height": 103.0
	},
	"output.Deviot|Upload1468169070.775476":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169100.691663":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169129.701798":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169230.56888":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169265.629885":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169543.130234":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169565.385126":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169736.007601":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169796.314985":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169858.092537":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468169908.091141":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170110.759824":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170278.651586":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170298.093677":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170430.188502":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170469.678916":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170489.593905":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170564.199463":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468170608.723425":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468171157.213086":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468171361.263454":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468172214.489777":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468174095.207":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468174765.396842":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468174779.051799":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468174881.666858":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468175279.501898":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468175828.387754":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468175828.653421":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468176545.229807":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468176708.331113":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468176987.100965":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178493.206075":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178512.569814":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178538.170655":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178772.189268":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178840.384776":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178840.545279":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178842.605241":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178843.966537":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178860.173458":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468178869.836537":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468179630.118154":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468179647.209353":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468179660.790505":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468179678.397598":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468179711.011155":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468179729.910964":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180580.941083":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180605.332697":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180623.197165":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180637.235172":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180770.301511":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180779.765149":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180785.521251":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180866.920483":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180879.896961":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180898.755287":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180919.328318":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180933.662837":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468180956.609315":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468181208.70815":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468181898.498136":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468183935.291851":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468188164.120374":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468188667.171897":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468188694.221884":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468188810.71033":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468188949.691757":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190177.495268":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190220.675549":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190433.433844":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190473.157914":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190496.243436":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190537.140978":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468190822.808246":
	{
		"height": 354.0
	},
	"output.Deviot|Upload1468190942.186027":
	{
		"height": 447.0
	},
	"output.Deviot|Upload1468191079.473957":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468191712.200002":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192082.805101":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192132.351054":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192167.679681":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192309.114352":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192325.458055":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192512.095671":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192660.243689":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192728.610722":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468192923.010309":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468193136.275653":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468193189.696345":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468193264.407742":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468193313.859714":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468193369.37888":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468242810.456981":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468242853.636686":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468243021.971392":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468243081.706962":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468243590.379006":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468243615.048171":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468243756.486675":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468244172.686264":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468244189.354374":
	{
		"height": 25.0
	},
	"output.Deviot|Upload1468279277.604065":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468340763.748158":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468340820.493312":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468340880.704158":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468340932.758752":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468340966.665741":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468342497.696911":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468343116.220162":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468343228.217535":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468343302.521421":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468343325.471266":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468396010.650859":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468396018.193472":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468396044.296093":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580472.051205":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580511.453624":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580629.904519":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580743.447639":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580798.932937":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580879.513063":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580923.579723":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468580985.232737":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468581303.205772":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468586488.153751":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468586746.250771":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468586874.431211":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468588294.863571":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468590336.455936":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468591084.444986":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468591137.733003":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468591460.979575":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468592104.748299":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468592942.698498":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468592950.833106":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468593775.537737":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468593861.603735":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468593930.605488":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468593952.487415":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468595288.928338":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468598313.746784":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468602480.116779":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468602514.617994":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468602547.598326":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468602922.461427":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468603356.417896":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468603564.94312":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468604568.245637":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468604578.230027":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468604725.290997":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468605552.669956":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468605608.695828":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468607504.666344":
	{
		"height": 363.0
	},
	"output.Deviot|Upload1468608054.362809":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468608088.399974":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468608254.017611":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468608322.312231":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468608398.365248":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609065.036564":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609142.128498":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609203.456958":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609269.461266":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609478.247759":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609535.522888":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468609563.689629":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468611676.432204":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468611709.508603":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468611909.613778":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468612237.91482":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468612299.819629":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468612618.449128":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468613982.838479":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468614107.554436":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468614127.783265":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468614175.146683":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468614261.13031":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468615058.095187":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468615233.494123":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468615252.769862":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468615592.237506":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468615614.261996":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468616126.2749":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468616356.595135":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468616536.417675":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617051.100308":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617112.018155":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617158.017961":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617218.602705":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617319.117314":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617665.690309":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468617951.442512":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468618152.683186":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468618428.699708":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468618961.087999":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468619033.380483":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646449.717539":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646474.154082":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646495.902935":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646673.47729":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646715.524215":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646746.545422":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646785.110475":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646844.349391":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468646864.123":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647221.329919":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647344.370421":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647429.226772":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647463.984121":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647636.427657":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647656.987522":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647681.379207":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468647708.675447":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648186.2101":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648203.551752":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648237.712549":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648377.58611":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648409.069391":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648431.716243":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648453.575184":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648502.111679":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648607.725959":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648647.103622":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648702.080604":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648744.068817":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648848.746404":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468648870.164582":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708041.852293":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708113.771037":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708133.408717":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708176.455578":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708202.655259":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708358.462257":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468708381.76122":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468797560.060488":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468797648.607252":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468797678.036091":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468830375.929038":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468830505.030816":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468830548.789883":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468830564.064047":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833019.211241":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833394.042381":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833441.163256":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833697.234214":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833726.780446":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833759.459497":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468833921.202709":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468834178.176913":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468843372.762036":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468843721.342422":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468843779.554969":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468844467.117872":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468852370.937996":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468852508.134296":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468870130.465325":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468870154.336092":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468871532.960419":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468871720.532155":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468872041.511148":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468873542.54587":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468873566.37932":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468875358.151179":
	{
		"height": 0.0
	},
	"output.Deviot|Upload1468880992.424874":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468883695.987829":
	{
		"height": 311.0
	},
	"output.Deviot|Upload1468884626.776792":
	{
		"height": 306.0
	},
	"output.Deviot|Upload1468884738.870346":
	{
		"height": 347.0
	},
	"output.Deviot|Upload1468885522.387534":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468885562.51472":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468885800.909607":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468885840.638628":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468885868.983589":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468885918.01572":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468886112.640678":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468962565.834172":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468962615.570239":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468962957.56951":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468963002.145958":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468963061.142207":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468963208.375621":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468963264.327493":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964039.959853":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964320.950117":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964383.789711":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964515.378358":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964566.292743":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964656.703042":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964752.960444":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468964848.755081":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965011.340401":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965210.942665":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965538.558245":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965561.194543":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965586.979781":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965619.005847":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965656.029647":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965683.67503":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965714.12649":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965746.592151":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468965771.534611":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468966198.718686":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468966352.696073":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468966874.831058":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468967113.498255":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468967450.900278":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468997035.008307":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468997133.470031":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468997231.296412":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1468998787.827819":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469027212.748903":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469028111.442235":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469111889.028705":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469115242.430954":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469115259.555547":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469116547.285626":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469116578.832784":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469117906.814295":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469118817.279191":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469120136.005259":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469120704.575997":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469120909.862372":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469120967.264348":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469122323.751483":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469123652.968323":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469123710.596473":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469124104.038026":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469125019.911144":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469125245.118406":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469126072.907621":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469126192.029747":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469126254.807751":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469131599.840712":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469132233.245947":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469132470.407972":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469132511.100989":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469133114.160106":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469133522.228407":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469135807.233612":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469136131.87005":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469136330.690054":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469136537.533318":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469136723.452847":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469137298.772389":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469137463.627926":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469138079.726893":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469138436.773314":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469224516.956196":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469224532.346332":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469224655.392047":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469224908.452977":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469224936.754643":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469224974.330089":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469232907.273724":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469232933.688765":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469232959.496845":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469233016.91394":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258052.478824":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258103.651814":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258337.816792":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258797.069934":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258857.316932":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258903.236434":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469258930.549704":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469259075.491133":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469259237.968349":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469289975.542296":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469290089.705851":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469290112.463958":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469290138.552357":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469290469.82323":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297588.93566":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297722.53087":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297751.740302":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297773.371143":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297793.822467":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297809.673707":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297824.577357":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469297839.797798":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298418.075252":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298458.460736":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298474.911568":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298491.078044":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298509.554661":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298548.667403":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298592.782427":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298669.38984":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298713.691445":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298730.701144":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298746.772881":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469298772.916142":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469299132.137673":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469299152.482394":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469300926.513468":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469300959.17736":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469300976.454092":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469300996.97171":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301046.659516":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301082.417577":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301107.839038":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301141.821298":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301179.724562":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301217.631213":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301250.570829":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301282.905911":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301313.09082":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301342.93771":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301367.758073":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301415.476391":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301443.407347":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301459.551375":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301477.941889":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301494.504712":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301511.297399":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301572.88557":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301699.238099":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301713.847576":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469301944.516538":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302258.969618":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302309.055372":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302552.255195":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302576.056112":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302633.482721":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302676.397274":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302693.597072":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469302731.515255":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303192.920157":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303236.99835":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303279.302439":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303362.619268":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303385.322287":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303408.812662":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303434.287058":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303494.407937":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303536.494574":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303567.820215":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303599.580428":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303632.119569":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303710.061716":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303746.928825":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303770.836009":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469303800.298057":
	{
		"height": 112.0
	},
	"output.Deviot|Upload1469305827.640151":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469305907.524634":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469305929.540228":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469305950.391394":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469305996.827787":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469306041.624095":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469306068.039644":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469306231.069759":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307373.87975":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307399.126862":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307818.012487":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307852.669035":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307869.654337":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307888.96294":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307911.244326":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469307943.828461":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469308425.024818":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469308452.232178":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469308768.830164":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469308870.228849":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469308890.476382":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309609.081331":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309630.349883":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309649.980725":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309738.288315":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309760.385236":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309780.408129":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309801.255876":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309844.751187":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309927.664226":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309947.530281":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309969.576613":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469309989.926951":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310005.158375":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310022.909206":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310096.388094":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310140.764814":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310141.296978":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310167.916221":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310193.652612":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310229.181315":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310268.471921":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310295.967948":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310361.241719":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310395.937693":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310752.277293":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469310776.087298":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469311025.497373":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469311059.997844":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469311507.386105":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469345973.589296":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469349192.678045":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469349241.503022":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469349320.63249":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469363689.574367":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469363839.853107":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469363908.129409":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469365007.835303":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469365035.316885":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469365063.773439":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469365293.932842":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469365361.824018":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469365392.815024":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469366651.522861":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469366689.714124":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469366824.43891":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469366853.930477":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469366983.169891":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469367493.198521":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469367971.680935":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469368004.423205":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469368027.866036":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469368121.583419":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469368639.350902":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469373601.224639":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469373624.566785":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469373764.857559":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469373910.341903":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469373947.476349":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469373969.674918":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374004.00377":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374021.227277":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374045.034221":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374049.501718":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374147.962203":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374501.967158":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374522.109758":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374638.237216":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374814.762892":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374830.904579":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374868.672161":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374907.174362":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374915.436439":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469374937.192972":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375122.700147":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375142.833113":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375147.674349":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375166.910093":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375185.149628":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375207.423672":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375246.651577":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375266.299366":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375332.12743":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375349.388513":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375426.746449":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375650.702658":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375678.419444":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375697.621523":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375716.908444":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375751.998959":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375780.553601":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375785.980182":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375842.406158":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375878.452098":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375918.182804":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469375978.082571":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469376034.372644":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469381498.534308":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469381522.30981":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469381550.548593":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383569.464589":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383633.442893":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383653.109193":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383673.529431":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383689.095319":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383768.622691":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383840.509317":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383870.116588":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383915.852815":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469383937.935852":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469384568.989164":
	{
		"height": 290.0
	},
	"output.Deviot|Upload1469384703.781913":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469385316.360615":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469385337.433243":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469385346.17884":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469385366.666847":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469385808.525108":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469385845.287133":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469386423.199052":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469386502.422581":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469386781.562436":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387005.012415":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387024.969269":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387048.640181":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387052.87623":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387126.349742":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387225.976002":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387425.622105":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387493.197735":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387667.921977":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387760.788968":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387811.288216":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387835.184002":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387842.40387":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469387929.698407":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388003.9414":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388039.643736":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388169.365367":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388186.297831":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388205.411948":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388223.915778":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388583.696566":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388746.349368":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469388927.193361":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469389005.995354":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469389145.808763":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469389165.955938":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469389209.908726":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390030.806243":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390054.979306":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390065.934262":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390070.331661":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390746.326844":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390768.211019":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469390877.602657":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469391041.622663":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469391112.79437":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469391129.733206":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469391131.418523":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469391148.261114":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469391167.618654":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469392771.842591":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469392800.545227":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469392936.081148":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469392960.297325":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393080.14172":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393205.672359":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393230.615529":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393265.999753":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393292.251428":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393328.30849":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393355.614436":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469393404.134724":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469394095.509319":
	{
		"height": 100.0
	},
	"output.Deviot|Upload1469394430.350863":
	{
		"height": 100.0
	},
	"output.GitSavvy":
	{
		"height": 100.0
	},
	"output.deviot":
	{
		"height": 157.0
	},
	"output.deviot_console":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 125.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.show_commit_info":
	{
		"height": 100.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/User/Platformio.sublime-build",
	"project": "BaseESP8266Firmware.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/Platform.IO Projects/BojlerTesting/dataLoging.ino"
			],
			[
				"displa",
				"~/Documents/Platform.IO Projects/BojlerTesting/DisplayingData.ino"
			],
			[
				"uptime",
				"~/Documents/Platform.IO Projects/BojlerDoma/curentMetter.ino"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/Platform.IO Projects/Bojler/Bojler.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 431.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
